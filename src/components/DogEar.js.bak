'use client'

import Link from 'next/link'
import { useRouter } from 'next/navigation'

import styles from './DogEar.module.css'

// import { unlockPath } from '@/hooks/useGatekeeper'

export function DogEar({ href, 'aria-label': ariaLabel, position = 'bottom-right', onAfterClick, direction = 'next', ...props }) {
  const router = useRouter()
  const playSound = () => {
    // unlockPath(href)
    // console.log(`unlockpath: `, href)
    // const randomNumber = Math.floor(Math.random() * 7) // 7 for 0-6 range
    const randomNumber = Math.floor(Math.random() * 9)
    try {
      // console.log(`playing secret${randomNumber}.mp3`)
      const audio = new Audio(`/sound/secret${randomNumber}.mp3`)
      audio.play()
    } catch (error) {
      // console.error('Failed to play sound:', error)
    }
  }

  // The new, combined click handler
  const handleClick = (e) => {
    // // 1. Always play the UI sound first.
    // playSound()
    // // 2. If an extra function was passed from the parent, call it too.
    // if (onAfterClick) {
    //   onAfterClick(e)
    // }
    // Note: We don't need to manually handle navigation; the <Link> component does that.
    // 1. Prevent the <Link> from navigating immediately
    e.preventDefault()

    // 2. Play the sound effect
    try {
      const randomNumber = Math.floor(Math.random() * 0)
      const audio = new Audio(`/sound/secret${randomNumber}.mp3`)
      audio.volume = 0.4

      // 3. THE FIX: The 'onended' event fires when the sound is finished
      audio.addEventListener('ended', () => {
        // 5. Once the sound is done, navigate to the new page
        router.push(href)
      })
      // console.log(`dogear audio play()`)
      audio.play()
    } catch (error) {
      console.error('Failed to play DogEar sound:', error)
      // If the sound fails for any reason, navigate immediately so the user isn't stuck
      router.push(href)
    }

    // 4. Call any extra functions immediately
    if (onAfterClick) {
      // console.log(`dogear onAfterClick`)
      onAfterClick(e)
    }
  }

  const positionClass = position === 'bottom-left' ? styles.bottomLeft : styles.bottomRight

  //   const handlePreviousClick = () => {
  //     playSound()
  //     router.back()
  //   }
  //   // Conditionally render a 'back' button or a 'next' link
  //   if (direction === 'previous') {
  //     return (
  //       <div
  //         aria-label={ariaLabel || 'Go to previous page'}
  //         onClick={handlePreviousClick}
  //         className={`${styles.dogEar} ${styles.previous}`} // Add the 'previous' class
  //         {...props}
  //       />
  //     )
  //   }

  return <Link href={href} aria-label={ariaLabel || 'Go to next page'} onClick={handleClick} className={`${styles.dogEar} ${positionClass}`} {...props} />
}
