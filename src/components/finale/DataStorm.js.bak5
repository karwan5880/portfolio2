'use client'

import { useEffect, useMemo, useRef, useState } from 'react'

import styles from './Finale.module.css'

// --- DEBUGGING STEP 1: We are NOT using useSnippetPool ---
// import { useSnippetPool } from '@/hooks/useSnippetPool'

const SyntaxHighlightedCode = ({ content }) => {
  if (typeof content !== 'string') return null
  const html = content
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/(const|let|class|return|def|fn|public|static|void)/g, '<span class="keyword">$1</span>')
    .replace(/("[^"]*")/g, '<span class="string">$1</span>')
    .replace(/(\/\/.*|\#.*|\/\*.*\*\/)/g, '<span class="comment">$1</span>')
  return <pre dangerouslySetInnerHTML={{ __html: html }} />
}

const useParticleSystem = (config, createParticleData) => {
  const [particles, setParticles] = useState([])
  const requestRef = useRef()
  const lastSpawnTime = useRef(0)
  const configRef = useRef(config)
  const createParticleDataRef = useRef(createParticleData)

  useEffect(() => {
    configRef.current = config
    createParticleDataRef.current = createParticleData
  }, [config, createParticleData])

  useEffect(() => {
    const animate = (currentTime) => {
      const currentConfig = configRef.current
      if (currentConfig.isActive) {
        if (currentTime - lastSpawnTime.current > currentConfig.spawnRate) {
          lastSpawnTime.current = currentTime
          const data = createParticleDataRef.current()
          if (data) {
            const newParticle = {
              id: Math.random(),
              data,
              style: {
                top: `${Math.random() * 120 - 10}%`,
                left: `${Math.random() * 120 - 10}%`,
                '--particle-color': `hsl(120, 70%, 70%)`, // Green for debugging
                opacity: 0.7,
              },
            }
            setParticles((prev) => [...prev.slice(-200), newParticle])
          }
        }
      }
      requestRef.current = requestAnimationFrame(animate)
    }
    requestRef.current = requestAnimationFrame(animate)
    return () => cancelAnimationFrame(requestRef.current)
  }, [])
  return particles
}

export function DataStorm({ isActive, particleLifetime = 5000 }) {
  // --- DEBUGGING STEP 2: We IGNORE useSnippetPool ---
  // const { getSnippet } = useSnippetPool()
  const [isCollapsing, setIsCollapsing] = useState(false)

  console.log('--- DataStorm component received isActive: ---', isActive)

  useEffect(() => {
    if (!isActive && !isCollapsing) {
      setIsCollapsing(true)
    }
  }, [isActive, isCollapsing])

  const config = useMemo(
    () => ({
      isActive: isActive && !isCollapsing,
      spawnRate: 100, // Spawn slowly for debugging
    }),
    [isActive, isCollapsing]
  )

  // --- DEBUGGING STEP 3: Create a FAKE data function ---
  const createFakeParticleData = () => ({
    title: 'DEBUG PARTICLE',
    code: "console.log('Particle spawned!');",
  })

  // --- DEBUGGING STEP 4: Pass the FAKE function to the hook ---
  const particles = useParticleSystem(config, createFakeParticleData)

  if (!isActive && !isCollapsing) {
    return null
  }

  return (
    <div className={styles.dataStormOverlay}>
      {particles.map((particle) => (
        <div key={particle.id} className={`${styles.stormBlock} ${isCollapsing ? styles.collapsing : ''}`} style={{ ...particle.style, '--particle-lifetime': `${particleLifetime}ms` }}>
          <div className={styles.codeTitle}>{particle.data.title}</div>
          <SyntaxHighlightedCode content={particle.data.code} />
        </div>
      ))}
    </div>
  )
}
