'use client'

import { useEffect, useRef, useState } from 'react'

import styles from './Finale.module.css'
// import { useStreamData } from './useStreamData'
import { useFinaleData } from './FinaleDataProvider'

// We can have a local copy of this helper here too.
const SyntaxHighlightedCode = ({ content }) => {
  // console.log(`replace: `, content)
  const html = content
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/(const|let|class|return|def|fn|public|static|void)/g, '<span class="keyword">$1</span>')
    .replace(/("[^"]*")/g, '<span class="string">$1</span>')
    .replace(/(\/\/.*|\#.*|\/\*.*\*\/)/g, '<span class="comment">$1</span>')
  return <pre dangerouslySetInnerHTML={{ __html: html }} />
}

const GlitchSnippet = ({ snippet }) => {
  if (!snippet) return null
  return (
    <div className={styles.glitchItem} style={{ top: snippet.top, left: snippet.left, '--particle-lifetime': '1000ms' }}>
      <div className={styles.codeBlock}>
        <div className={styles.codeTitle}>{snippet.title}</div>
        <SyntaxHighlightedCode content={snippet.code} />
      </div>
    </div>
  )
}

export function GlitchOverlay({ theme, isScrolling }) {
  const [currentGlitch, setCurrentGlitch] = useState(null)
  const glitchIndex = useRef(0)

  // This component ALSO fetches its own 'multiColumn' data to use as a source pool.
  // const glitchDataPool = useStreamData(theme, 'multi', isScrolling)
  const { glitchDataPool } = useFinaleData() // <-- Get the pre-processed data

  // This useEffect is responsible for the internal animation timer.
  useEffect(() => {
    // Only run the timer if we are scrolling and have data to show.
    if (isScrolling && glitchDataPool.length > 0) {
      const interval = setInterval(() => {
        const nextSnippet = glitchDataPool[glitchIndex.current]
        setCurrentGlitch({
          ...nextSnippet,
          // top: `${Math.random() * 80 + 10}%`,
          // left: `${Math.random() * 80 + 10}%`,
          top: `${Math.random() * 120 - 10}%`,
          left: `${Math.random() * 120 - 10}%`,
          opacity: Math.random() * 0.4 + 0.3,
          '--particle-color': `hsl(${Math.random() * 360}, 70%, 70%)`,
          '--particle-scale': scale,
          '--particle-lifetime': `${lifetime}ms`,
          '--x-drift': `${(Math.random() - 0.5) * 40}vw`, // Drifts left/right
          '--y-drift': `${(Math.random() - 0.5) * 40}vh`, // Drifts up/down
          '--rotation': `${(Math.random() - 0.5) * 60}deg`, // A slight initial tilt
        })
        glitchIndex.current = (glitchIndex.current + 1) % glitchDataPool.length
      }, 1000) // New glitch every 3 seconds
      return () => clearInterval(interval)
    }
  }, [isScrolling, glitchDataPool])

  if (!isScrolling) {
    return null
  }

  return (
    <div className={styles.glitchOverlay}>
      <GlitchSnippet snippet={currentGlitch} />
    </div>
  )
}
