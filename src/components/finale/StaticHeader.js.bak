'use client'

import { useEffect, useRef, useState } from 'react'

import styles from './Finale.module.css'

function useTypewriter(textToType, startCondition, speed = 100, onComplete = () => {}) {
  const [typedText, setTypedText] = useState('')
  const hasStarted = useRef(false) // <-- NEW: A flag to ensure it only runs once

  useEffect(() => {
    // We only start the effect if the startCondition is true AND we haven't already started.
    if (startCondition && !hasStarted.current) {
      hasStarted.current = true // Lock it, so it can't run again.

      let timers = [] // Array to hold all our timers for cleanup

      const type = (index = 0) => {
        if (index < textToType.length) {
          setTypedText(textToType.substring(0, index + 1))
          const timer = setTimeout(() => type(index + 1), speed)
          timers.push(timer)
        } else {
          const completionTimer = setTimeout(onComplete, 500)
          timers.push(completionTimer)
        }
      }

      type() // Start the typing

      return () => {
        // Cleanup all timers when the component unmounts
        timers.forEach(clearTimeout)
      }
    }
  }, [startCondition, textToType, speed, onComplete])

  // If typing has started, return the animated text.
  // If not, return an empty string.
  return hasStarted.current ? typedText : ''
}

const finalMessage = '> Status: Still building.'
const initialLinks = [
  { content: '[ GitHub ]', href: 'https://github.com/karwan5880/portfolio2' },
  { content: '[ LinkedIn ]', href: 'https://www.linkedin.com/in/karwanleong' },
]

export function StaticHeader({ pageState, onTypingComplete }) {
  const [isTypingFinished, setIsTypingFinished] = useState(false)
  const [startTyping, setStartTyping] = useState(false)

  // const [typedText, setTypedText] = useState('')
  const typedText = useTypewriter(
    finalMessage,
    pageState === 'TYPING', // The condition to start typing
    100, // The speed
    onTypingComplete // The function to call when done
  )

  const handleTypingAnimationEnd = () => {
    console.log('CSS typing animation finished. Calling onComplete callback.')
    // setIsTypingFinished(true)
    // We add a small extra delay here to match the original 500ms pause
    // after typing, which feels more natural.
    setTimeout(onTypingComplete, 500)
  }

  // useEffect(() => {
  //   if (pageState === 'TYPING') {
  //     const typeText = (index = 0) => {
  //       if (index < finalMessage.length) {
  //         setTypedText(finalMessage.substring(0, index + 1))
  //         setTimeout(() => typeText(index + 1), 100)
  //       } else {
  //         setTimeout(onTypingComplete, 500)
  //       }
  //     }
  //     typeText() // Start typing immediately
  //   }
  // if (pageState === 'TYPING') {
  //   const typeText = (index = 0) => {
  //     if (index < finalMessage.length) {
  //       setTypedText(finalMessage.substring(0, index + 1))
  //       setTimeout(() => typeText(index + 1), 100)
  //     } else {
  //       setTimeout(onTypingComplete, 500) // Signal completion
  //     }
  //   }
  //   const timer = setTimeout(typeText, 1500)
  //   return () => clearTimeout(timer)
  // }
  // }, [pageState, onTypingComplete])
  // useEffect(() => {
  //   if (pageState === 'TYPING') {
  //     // The CSS animation duration is 2.5s + 0.5s pause
  //     const timer = setTimeout(onTypingComplete, 5000)
  //     return () => clearTimeout(timer)
  //   }
  // }, [pageState, onTypingComplete])
  // This hook now ONLY controls the start of the animation
  useEffect(() => {
    // We only want to run this logic when the parent is ready for typing
    if (pageState === 'TYPING') {
      // The 3-second contemplative pause
      const timer = setTimeout(() => {
        setStartTyping(true)
      }, 3000)
      return () => clearTimeout(timer)
    }
  }, [pageState])

  // if (pageState === 'DORMANT') {
  //   return (
  //     <div className={styles.staticContainer}>
  //       <p className={styles.finalMessage}>
  //         {'>'}
  //         <span className={styles.blinkingCursor}></span>
  //       </p>
  //       <div className={`${styles.linksContainer} ${pageState !== 'TYPING' ? '' : ''}`}>
  //         {initialLinks.map((item, index) => (
  //           <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
  //             {item.content}
  //           </a>
  //         ))}
  //       </div>
  //     </div>
  //   )
  // }

  return (
    <div className={`${styles.staticContainer} ${pageState === 'SCROLLING' ? styles.hidden : ''}`}>
      {/* <div className={`${styles.staticContainer} ${pageState === 'SCROLLING' ? '' : ''}`}> */}
      {/* {(pageState === 'TYPING' || pageState === 'STATIC' || pageState === 'SCROLLING') && ( */}
      {/* <p className={styles.finalMessage} onAnimationEnd={handleTypingAnimationEnd}> */}
      <p className={styles.finalMessageContainer}>
        {(pageState === 'TYPING' || pageState === 'STATIC' || pageState === 'SCROLLING') && (
          // <span className={`${styles.typingText} ${startTyping ? styles.startTyping : ''}`} onAnimationEnd={handleTypingAnimationEnd}>
          <span className={styles.typingAnimation} onAnimationEnd={handleTypingAnimationEnd}>
            {`> Status: Still building.`}
          </span>
        )}
        {(pageState === 'IDLE' || pageState === 'TYPING') && <span className={styles.blinkingCursor}></span>}
        {/* {(pageState === 'TYPING' || isTypingFinished) && <span className={`${startTyping ? styles.blinkingCursor : styles.blinkingCursor2}`}></span>} */}
        {/* {`> Status: Still building. `} */}
        {/* {pageState === 'SCROLLING' ? finalMessage : typedText} */}
        {/* {(pageState === 'TYPING' || pageState === 'STATIC') && <span className={styles.blinkingCursor}></span>} */}
        {/* {typedText} */}
        {/* {(pageState === 'TYPING' || pageState === 'STATIC' || pageState === 'SCROLLING') && <span className={styles.blinkingCursor}></span>} */}
      </p>
      {/* )} */}

      <div className={`${styles.linksContainer} ${pageState === 'STATIC' || pageState === 'SCROLLING' ? styles.visible : ''}`}>
        {initialLinks.map((item, index) => (
          <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
            {item.content}
          </a>
        ))}
      </div>
      {/* <div className={`${styles.linksContainer} ${pageState !== 'TYPING' ? styles.visible : ''}`}>
        {initialLinks.map((item, index) => (
          <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
            {item.content}
          </a>
        ))}
      </div> */}
    </div>
  )
}
