import { useEffect, useLayoutEffect, useRef, useState } from 'react'

import styles from './Finale.module.css'

// const AVERAGE_BLOCK_HEIGHT = 200

export function StreamColumn({ ...props }) {
  const { initialData, speed, direction, isEnding, className, renderItem } = props
  const [visibleItems, setVisibleItems] = useState([])
  const containerRef = useRef(null)
  const dataPoolRef = useRef([]) // Holds the untapped data
  const itemRefs = useRef(new Map())
  const positionsRef = useRef(new Map())
  const animationFrameId = useRef(null)
  const lastTimeRef = useRef(null)
  const positionRef = useRef({})
  const contentHeightRef = useRef(0) // Ref to store the total measured height

  console.log(`StreamColumn rendered. Speed: ${speed}, Direction: ${direction}, Items: ${initialData.length}, Class: "${className}"`)

  // This effect initializes the component when new data arrives
  useEffect(() => {
    // 1. Populate the pool with all the data
    dataPoolRef.current = [...initialData]
    positionsRef.current.clear()
    itemRefs.current.clear()
    // 2. Fill the screen with just enough items to be visible
    const screenHeight = window.innerHeight
    const initialVisible = []
    let currentHeight = 0
    while (currentHeight < screenHeight * 1.5 && dataPoolRef.current.length > 0) {
      const newItem = dataPoolRef.current.shift()
      initialVisible.push(newItem)
      currentHeight += 200 // Use a rough estimate just for the initial fill
    }
    setVisibleItems(initialVisible)
  }, [initialData])

  //   // --- NEW: Use refs to hold the props that change ---
  //   const latestProps = useRef({ speed, direction, isEnding })
  //   useLayoutEffect(() => {
  //     latestProps.current = { speed, direction, isEnding }
  //   })

  //   useLayoutEffect(() => {
  //     if (initialData.length === 0) return
  //     // --- NEW MEASUREMENT LOGIC ---
  //     let currentPos = 0
  //     initialData.forEach((data, index) => {
  //       const id = `${data.title || data.content.slice(0, 10)}-${index}`
  //       const node = itemRefs.current.get(id)
  //       if (node) {
  //         // Store the exact position for this item
  //         positionRef.current[id] = currentPos
  //         // Apply the transform immediately to prevent flicker
  //         node.style.transform = `translateY(${currentPos}px)`
  //         // Increment position by the *actual measured height* of the current node
  //         currentPos += node.offsetHeight
  //       }
  //     })
  //     // Store the total measured height for use in the animation loop
  //     contentHeightRef.current = currentPos
  //     // itemRefs.current.clear()
  //     // positionRef.current = {}
  //     // let currentPos = 0
  //     // initialData.forEach((data, index) => {
  //     //   //   const id = `${data.title}-${index}`
  //     //   const id = `${data.title || data.content.slice(0, 10)}-${index}`
  //     //   positionRef.current[id] = currentPos
  //     //   currentPos += AVERAGE_BLOCK_HEIGHT
  //     // })
  //   }, [initialData])

  // --- THIS IS THE CRITICAL FLICKER-PREVENTION HOOK ---
  // It runs whenever `visibleItems` changes, after they are in the DOM but before paint.
  useLayoutEffect(() => {
    let lastItemPos = 0
    let lastItemHeight = 0
    visibleItems.forEach((item) => {
      const node = itemRefs.current.get(item)
      if (!node) return
      // If this item doesn't have a position yet, calculate it.
      if (!positionsRef.current.has(item)) {
        const newPos = direction === 'up' ? lastItemPos + lastItemHeight : lastItemPos - node.offsetHeight
        positionsRef.current.set(item, newPos)
      }
      const currentPos = positionsRef.current.get(item)
      node.style.transform = `translateY(${currentPos}px)`
      lastItemPos = currentPos
      lastItemHeight = node.offsetHeight
    })
  }, [visibleItems, direction])

  useEffect(() => {
    const animate = (timestamp) => {
      if (lastTimeRef.current === null) {
        lastTimeRef.current = timestamp
      }
      const dt = (timestamp - lastTimeRef.current) / 1000
      lastTimeRef.current = timestamp
      const containerHeight = containerRef.current?.offsetHeight || 0
      if (containerHeight === 0) {
        // Safety check
        animationFrameId.current = requestAnimationFrame(animate)
        return
      }

      let hasChanged = false
      const newVisibleItems = [...visibleItems]
      const newPositions = new Map(positionsRef.current)
      // Move existing items and check for removal
      for (const item of visibleItems) {
        const node = itemRefs.current.get(item)
        if (!node) continue
        const oldPos = newPositions.get(item) || 0
        const newPos = direction === 'up' ? oldPos - speed * dt : oldPos + speed * dt
        newPositions.set(item, newPos)
        node.style.transform = `translateY(${newPos}px)`
        const isOffScreen = direction === 'up' ? newPos < -node.offsetHeight : newPos > containerHeight
        if (isOffScreen) {
          hasChanged = true
          const index = newVisibleItems.findIndex((i) => i === item)
          if (index > -1) newVisibleItems.splice(index, 1)
          newPositions.delete(item)
          itemRefs.current.delete(item)
        }
      }
      //   // Check for removal
      //   for (let i = newVisibleItems.length - 1; i >= 0; i--) {
      //     const item = newVisibleItems[i]
      //     // ... (off-screen check logic as before) ...
      //     if (isOffScreen) {
      //       hasChanged = true
      //       newVisibleItems.splice(i, 1)
      //       positionsRef.current.delete(item)
      //     }
      //   }
      // Add new items if needed
      if (!isEnding && dataPoolRef.current.length > 0) {
        const lastItem = newVisibleItems[newVisibleItems.length - 1]
        const lastNode = lastItem ? itemRefs.current.get(lastItem) : null
        const lastPos = lastNode ? newPositions.get(lastItem) + lastNode.offsetHeight : containerHeight
        if (direction === 'up' && lastPos < containerHeight) {
          hasChanged = true
          const newItem = dataPoolRef.current.shift()
          newVisibleItems.push(newItem)
          newPositions.set(newItem, lastPos)
        }
        // (A similar logic block for direction 'down' can be added if needed)
      }
      if (hasChanged) {
        setVisibleItems(newVisibleItems)
        positionsRef.current = newPositions
      }

      //   //   const totalContentHeight = Object.keys(positionRef.current).length * AVERAGE_BLOCK_HEIGHT
      //   const totalContentHeight = contentHeightRef.current // Use the accurately measured height
      //   if (totalContentHeight === 0) {
      //     // Don't animate if there's no content
      //     animationFrameId.current = requestAnimationFrame(animate)
      //     return
      //   }
      //   for (const [id, node] of itemRefs.current.entries()) {
      //     if (!node) continue
      //     const { speed, direction, isEnding } = latestProps.current
      //     const movement = speed * dt
      //     const oldPos = positionRef.current[id]
      //     const newPos = direction === 'up' ? oldPos - movement : oldPos + movement
      //     positionRef.current[id] = newPos
      //     const nodeHeight = node.offsetHeight
      //     // const isOffScreenTop = newPos < -AVERAGE_BLOCK_HEIGHT
      //     const isOffScreenTop = newPos < -nodeHeight
      //     const isOffScreenBottom = newPos > containerHeight
      //     if (direction === 'up' && isOffScreenTop) {
      //       if (isEnding) {
      //         node.style.display = 'none' // Hide if ending
      //       } else {
      //         positionRef.current[id] = newPos + totalContentHeight // Recycle
      //       }
      //     } else if (direction === 'down' && isOffScreenBottom) {
      //       if (isEnding) {
      //         node.style.display = 'none' // Hide if ending
      //       } else {
      //         positionRef.current[id] = newPos - totalContentHeight // Recycle
      //       }
      //     }
      //     node.style.transform = `translateY(${positionRef.current[id]}px)`
      //   }
      animationFrameId.current = requestAnimationFrame(animate)
    }
    animationFrameId.current = requestAnimationFrame(animate)
    return () => {
      if (animationFrameId.current) {
        cancelAnimationFrame(animationFrameId.current)
      }
      lastTimeRef.current = null
    }
  }, [visibleItems, speed, direction, isEnding])

  return (
    <div ref={containerRef} className={`${styles.columnWrapper} ${className}`}>
      {visibleItems.map((item, index) => {
        const id = `${item.title || item.content.slice(0, 10)}-${index}`
        return (
          <div
            key={id}
            ref={(node) => {
              if (node) itemRefs.current.set(item, node)
              else itemRefs.current.delete(item)
            }}
            className={styles.streamItemContainer}
            style={{ transform: `translateY(${positionsRef.current.get(item) || 0}px)` }}
          >
            {renderItem(item)}
          </div>
        )
      })}
    </div>
    // <div ref={containerRef} className={`${styles.columnWrapper} ${className}`}>
    //   {initialData.map((data, index) => {
    //     const id = `${data.title}-${index}`
    //     return (
    //       <div
    //         key={id}
    //         ref={(node) => {
    //           const map = itemRefs.current
    //           if (node) {
    //             map.set(id, node)
    //           } else {
    //             map.delete(id)
    //           }
    //         }}
    //         className={styles.streamItemContainer}
    //         style={{ transform: `translateY(${positionRef.current[id] || 0}px)` }}
    //       >
    //         {renderItem(data)}
    //       </div>
    //     )
    //   })}
    // </div>
    // <div ref={containerRef} className={`${styles.columnWrapper} ${className}`}>
    //   {items.map((item) => (
    //     <div key={item.id} className={styles.streamItemContainer} style={{ transform: `translateY(${item.position}px)` }}>
    //       {renderItem(item.data)}
    //     </div>
    //   ))}
    // </div>
    // <div
    //   className={`${animationClass} ${isDistant ? styles.distant : ''}  ${className}`}
    //   style={{
    //     '--scroll-duration': `${speed}s`,
    //     animationDelay: `-${Math.random() * speed}s`,
    //   }}
    // >
    //   {data.map((item, index) => renderItem(item, index))}
    // </div>
  )
}
