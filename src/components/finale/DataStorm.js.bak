'use client'

import { useCallback, useEffect, useMemo, useRef, useState } from 'react'

import styles from './Finale.module.css'
import { getRandomCodeSnippet } from '@/data/finale-stream-data'
import { useSnippetPool } from '@/hooks/useSnippetPool'

const SyntaxHighlightedCode = ({ content }) => {
  //   console.log(`replace: `, content)
  if (typeof content !== 'string') {
    console.log(`content undefined?: `, content, typeof content)
    return null // <-- FIX for the error
  }

  const html = content
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/(const|let|class|return|def|fn|public|static|void)/g, '<span class="keyword">$1</span>')
    .replace(/("[^"]*")/g, '<span class="string">$1</span>')
    .replace(/(\/\/.*|\#.*|\/\*.*\*\/)/g, '<span class="comment">$1</span>')
  return <pre dangerouslySetInnerHTML={{ __html: html }} />
}

const useParticleSystem = (config, createParticleData) => {
  const [particles, setParticles] = useState([])
  const lastSpawnTime = useRef(0)
  const requestRef = useRef()

  const totalTime = useRef(0)
  const snippetPool = useRef([]) // A local cache of snippets fetched from the API
  const isFetching = useRef(false) // <-- Add a ref to track fetching state

  // // --- NEW: API Fetching Logic ---
  // const fetchMoreSnippets = useCallback(async () => {
  //   if (isFetching.current) return // <-- Don't fetch if already fetching
  //   isFetching.current = true
  //   try {
  //     const response = await fetch('/api/snippets')
  //     if (!response.ok) {
  //       const errorData = await response.json()
  //       // Log the helpful error message from our new API
  //       throw new Error(errorData.error || 'API request failed')
  //     }
  //     const newSnippets = await response.json()
  //     snippetPool.current = [...snippetPool.current, ...newSnippets]
  //   } catch (error) {
  //     console.error('Failed to fetch snippets:', error)
  //   } finally {
  //     isFetching.current = false // <-- Reset on completion or error
  //   }
  // }, [])
  // useEffect(() => {
  //   // Pre-fetch the first batch of snippets when the component mounts
  //   fetchMoreSnippets()
  // }, [fetchMoreSnippets])

  useEffect(() => {
    // let animationFrameId
    // The main animation loop, running on every frame
    const animate = (currentTime) => {
      if (snippetPool.current.length < 20) {
        fetchMoreSnippets()
      }
      // // 1. Update total time elapsed
      // if (totalTime.current === 0) totalTime.current = currentTime
      // const elapsedTime = currentTime - totalTime.current
      // // 2. Stop the entire system after the full duration
      // if (elapsedTime > config.totalDuration) {
      //   setParticles([]) // Clear all remaining particles
      //   return
      // }
      // 3. Determine if we are in a "burst" or "pause" phase
      const cycleTime = elapsedTime % (config.burstDuration + config.pauseDuration)
      const isBursting = cycleTime < config.burstDuration

      // 4. Spawn new particles during a burst phase
      if (isBursting && currentTime - lastSpawnTime.current > config.spawnRate) {
        lastSpawnTime.current = currentTime
        setParticles((prev) => {
          if (snippetPool.current.length === 0) return prev // Don't spawn if pool is empty

          const data = createParticleData()
          if (data) {
            const newParticle = {
              id: Math.random(),
              data: data, // The data from our factory
              style: {
                top: `${Math.random() * 90}%`,
                left: `${Math.random() * 80 + 10}%`,
                '--particle-color': `hsl(${Math.random() * 360}, 70%, 70%)`,
              },
            }
            setParticles((prev) => [...prev.slice(-200), newParticle])
          }

          // // Get a snippet from our local pool
          // const randomSnippet = snippetPool.current.pop()
          // const newParticle = {
          //   id: Math.random(),
          //   data: randomSnippet,
          //   style: {
          //     top: `${Math.random() * 90}%`,
          //     left: `${Math.random() * 80 + 10}%`,
          //     '--particle-lifetime': `${config.particleLifetime}ms`,
          //     '--particle-color': `hsl(${Math.random() * 360}, 70%, 70%)`,
          //   },
          // }
          // return [...prev.slice(-200), newParticle]
        })
      }

      // 5. Continue the loop
      // animationFrameId = requestAnimationFrame(animate)
      requestRef.current = requestAnimationFrame(animate)
    }

    // // Start the loop
    // animationFrameId = requestAnimationFrame(animate)
    // A better way to control the storm: start it when active
    if (config.isActive) {
      requestRef.current = requestAnimationFrame(animate)
    }

    return () => {
      // cancelAnimationFrame(animationFrameId)
      if (requestRef.current) {
        cancelAnimationFrame(requestRef.current)
      }
    }
  }, [config.isActive, config, createParticleData]) // Re-run effect if isActive changes
  // }, [config, fetchMoreSnippets])

  return particles
}

// --- The DataStorm Component, now much cleaner ---
export function DataStorm({ isActive, particleLifetime = 1000 }) {
  const { getSnippet } = useSnippetPool()

  // Configuration for our blizzard
  const config = useMemo(
    () => ({
      spawnRate: 5, // Spawn a new particle every 40ms (25 per second)
      //   duration: 2000, // The total storm lasts for 4 seconds
      particleLifetime, // Each particle lives for 1 second
      burstDuration: 1000, // Burst for 1 second
      pauseDuration: 500, // Pause for 0.5 seconds
      totalDuration: 4000, // The entire effect lasts for ~4 seconds
    }),
    [isActive, particleLifetime]
  )

  //   const particles = useParticleSystem(stormData, config)
  const particles = useParticleSystem(config, getSnippet)

  console.log(`particles: `, particles)

  return (
    <div className={styles.dataStormOverlay}>
      {particles.map((particle) => (
        <div key={particle.id} className={styles.stormBlock} style={{ ...particle.style, '--particle-lifetime': `${particleLifetime}ms`, opacity: particle.style.opacity }}>
          <div className={styles.codeTitle}>{particle.data.title}</div>
          <SyntaxHighlightedCode content={particle.data.code} />
        </div>
      ))}
    </div>
  )
}
