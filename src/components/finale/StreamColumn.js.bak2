import { useEffect, useLayoutEffect, useRef, useState } from 'react'

import styles from './finale.module.css'

const POOL_SIZE = 30

export function StreamColumn({ ...props }) {
  const { initialData, speed, direction, isEnding, className, renderItem } = props
  const containerRef = useRef(null)
  const dataPoolRef = useRef([])
  const itemRefs = useRef([])
  const positionsRef = useRef([])
  const animationFrameId = useRef(null)
  const lastTimeRef = useRef(null)

  console.log(`StreamColumn rendered. Speed: ${speed}, Direction: ${direction}, Items: ${initialData.length}, Class: "${className}"`)

  useEffect(() => {
    dataPoolRef.current = [...initialData]
    itemRefs.current = itemRefs.current.slice(0, POOL_SIZE)
    positionsRef.current = new Array(POOL_SIZE).fill(0)

    let currentPos = 0
    for (let i = 0; i < POOL_SIZE; i++) {
      const node = itemRefs.current[i]
      if (!node) continue

      positionsRef.current[i] = currentPos
      node.style.transform = `translateY(${currentPos}px)`

      const data = dataPoolRef.current.shift()
      if (data) {
        renderItem(data, node)
      } else {
        node.style.display = 'none'
      }

      currentPos += node.offsetHeight || 200
    }
  }, [initialData, renderItem])

  useEffect(() => {
    const animate = (timestamp) => {
      if (!lastTimeRef.current) lastTimeRef.current = timestamp
      const dt = (timestamp - lastTimeRef.current) / 1000
      lastTimeRef.current = timestamp

      const containerHeight = containerRef.current?.offsetHeight || 0
      if (containerHeight === 0) {
        animationFrameId.current = requestAnimationFrame(animate)
        return
      }

      let totalContentHeight = 0
      itemRefs.current.forEach((node) => (totalContentHeight += node?.offsetHeight || 0))

      for (let i = 0; i < POOL_SIZE; i++) {
        const node = itemRefs.current[i]
        if (!node || node.style.display === 'none') continue

        const oldPos = positionsRef.current[i]
        const newPos = direction === 'up' ? oldPos - speed * dt : oldPos + speed * dt
        positionsRef.current[i] = newPos
        node.style.transform = `translateY(${newPos}px)`

        const isOffScreen = direction === 'up' ? newPos < -node.offsetHeight : newPos > containerHeight

        if (isOffScreen) {
          if (isEnding || dataPoolRef.current.length === 0) {
            node.style.display = 'none'
          } else {
            positionsRef.current[i] = newPos + (direction === 'up' ? totalContentHeight : -totalContentHeight)
            node.style.transform = `translateY(${positionsRef.current[i]}px)`

            const newData = dataPoolRef.current.shift()
            if (newData) {
              renderItem(newData, node)
            }
          }
        }
      }

      animationFrameId.current = requestAnimationFrame(animate)
    }

    animationFrameId.current = requestAnimationFrame(animate)
    return () => cancelAnimationFrame(animationFrameId.current)
  }, [speed, direction, isEnding, renderItem])

  return (
    <div ref={containerRef} className={`${styles.columnWrapper} ${className}`}>
      {[...Array(POOL_SIZE)].map((_, index) => (
        <div key={index} ref={(el) => (itemRefs.current[index] = el)} className={styles.streamItemContainer} />
      ))}
    </div>
  )
}
