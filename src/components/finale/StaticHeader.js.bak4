'use client'

import { useEffect, useRef, useState } from 'react'

import styles from './Finale.module.css'

function useTypewriter(textToType, startCondition, speed = 100, onComplete = () => {}) {
  const [typedText, setTypedText] = useState('')
  const hasStarted = useRef(false)

  useEffect(() => {
    if (startCondition && !hasStarted.current) {
      hasStarted.current = true

      let timers = []

      const type = (index = 0) => {
        if (index < textToType.length) {
          setTypedText(textToType.substring(0, index + 1))
          const timer = setTimeout(() => type(index + 1), speed)
          timers.push(timer)
        } else {
          const completionTimer = setTimeout(onComplete, 500)
          timers.push(completionTimer)
        }
      }

      type()

      return () => {
        timers.forEach(clearTimeout)
      }
    }
  }, [startCondition, textToType, speed, onComplete])

  return hasStarted.current ? typedText : ''
}

const finalMessage = '> Status: Still building.'
const initialLinks = [
  { content: '[ GitHub ]', href: 'https://github.com/karwan5880/portfolio2' },
  { content: '[ LinkedIn ]', href: 'https://www.linkedin.com/in/karwanleong' },
]

export function StaticHeader({ pageState, onTypingComplete, isExiting }) {
  const [isTypingFinished, setIsTypingFinished] = useState(false)
  const [startTyping, setStartTyping] = useState(false)
  const isScrolledUp = ['SCROLLING', 'TRANSITIONING', 'CREDITS_ROLLING', 'HEADER_EXITING'].includes(pageState)
  const shouldShowContent = ['TYPING', 'STATIC', 'SCROLLING', 'TRANSITIONING', 'CREDITS_ROLLING'].includes(pageState)

  const typedText = useTypewriter(finalMessage, pageState === 'TYPING', 100, onTypingComplete)

  const handleTypingAnimationEnd = () => {
    setTimeout(onTypingComplete, 500)
  }

  useEffect(() => {
    if (pageState === 'TYPING') {
      const timer = setTimeout(() => {
        setStartTyping(true)
      }, 3000)
      return () => clearTimeout(timer)
    }
  }, [pageState])

  return (
    <div
      className={`
        ${styles.staticContainer}
        ${isScrolledUp ? styles.scrollingUp : ''} 
        ${isExiting ? styles.exiting : ''}
      `}
    >
      {pageState === 'IDLE' && (
        <div className={styles.idlePrompt}>
          <span className={styles.blinkingCursor}></span>
        </div>
      )}

      {shouldShowContent && (
        <div className={styles.typingContainer}>
          <div className={styles.finalMessageContainer}>
            <span className={styles.finalMessage} onAnimationEnd={onTypingComplete}>
              {`> Status: Still building.`}
            </span>
          </div>
          <div className={`${styles.linksContainer} ${pageState !== 'TYPING' ? styles.visible : ''}`}>
            {initialLinks.map((item, index) => (
              <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
                {item.content}
              </a>
            ))}
          </div>
        </div>
      )}

      {/* {(pageState === 'TYPING' || pageState === 'STATIC' || pageState === 'SCROLLING') && (
        <div className={styles.typingContainer}>
          <div className={styles.finalMessageContainer}>
            <span id="implosion-target" className={styles.typingAnimation} onAnimationEnd={handleTypingAnimationEnd}>
              {`> Status: Still building.`}
            </span>
            {pageState === 'TYPING' && <div className={styles.typingCursor}></div>}
          </div>
          <div className={`${styles.linksContainer} ${pageState === 'STATIC' || pageState === 'SCROLLING' ? styles.visible : ''}`}>
            {initialLinks.map((item, index) => (
              <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
                {item.content}
              </a>
            ))}
          </div>
        </div>
      )} */}
    </div>
  )
}
