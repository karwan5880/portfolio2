import { create } from 'zustand'

const shuffleArray = (array) => {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[array[i], array[j]] = [array[j], array[i]]
  }
  return array
}

const sourcePlaylist = [
  { path: '/sound/megamanx5.mp3', theme: 'main_theme' },
  { path: '/sound/harvestmoon.mp3', theme: 'snow' },
  { path: '/sound/yangguxian.mp3', theme: 'thunder' },
  { path: '/sound/cangzoucheng.mp3', theme: 'lightning' },
  //   { path: '/sound/secret1.mp3', theme: 'main_theme' },
  //   { path: '/sound/secret2.mp3', theme: 'snow' },
  //   { path: '/sound/secret3.mp3', theme: 'thunder' },
  //   { path: '/sound/secret4.mp3', theme: 'lightning' },
]

// --- Construct the Dynamic Playlist ---
// 1. Take the first song, which is always our main theme.
const mainThemeTrack = sourcePlaylist[0]
// 2. Take the rest of the songs.
const thematicTracks = sourcePlaylist.slice(1)
// 3. Shuffle ONLY the thematic songs.
const shuffledThematicTracks = shuffleArray(thematicTracks)
// 4. Combine them back into the final playlist.
export const masterPlaylist = [mainThemeTrack, ...shuffledThematicTracks]

// console.log(
//   'Current Playlist Order:',
//   masterPlaylist.map((t) => t.theme)
// ) // For debugging

// --- The Singleton Audio Engine ---
// We create the Audio object OUTSIDE the store. It will only ever be created once.
// We check if 'window' exists to prevent errors during server-side rendering.
const audio = typeof window !== 'undefined' ? new Audio() : null
if (audio) {
  audio.volume = 0.15
  audio.loop = false
}

export const useAudioStore = create((set, get) => ({
  playlist: [], // <-- NEW: This will hold our shuffled queue
  currentSongIndex: -1,
  isPlaying: false,
  activeTheme: 'main_theme', // <-- NEW: The currently active theme
  playlistEnded: false,
  isInitialized: false, // This flag will prevent double execution.
  //   isMuted: true, // <-- NEW: Start in a muted state
  //   isInitialized: false, // NEW: Track if we've set up the audio element
  //   isArmed: false, // <-- NEW: Has the user given permission yet?
  //   hasPlaybackPermission: false,
  //   isAutoplayAuthorized: false,
  hasPermission: false,

  grantPermission: () => {
    // console.log('Permission to play audio has been granted by user action.')
    set({ hasPermission: true })
  },

  // This is now the master function that builds the playlist and starts it.
  startExperience: () => {
    if (get().isInitialized) return
    const { isPlaying, playNextTrack } = get()
    if (isPlaying) return // Don't restart if already playing
    // console.log('Building and starting the playlist...')
    // // THE SHUFFLE LOGIC:
    const firstTrack = masterPlaylist[0]
    const remainingTracks = shuffleArray([...masterPlaylist.slice(1)])
    const newPlaylist = [firstTrack, ...remainingTracks]
    set({ playlist: newPlaylist, currentTrackIndex: -1, playlistEnded: false, isInitialized: true })
    // set({ currentTrackIndex: 0, playlistEnded: false, isInitialized: true })
    // console.log(`startExperience: `, get().currentTrackIndex, get().playlist)
    // Attach the 'ended' listener IF it hasn't been attached before.
    if (!get().listenersAttached) {
      // console.log(`listenersAttached: `)
      audio.addEventListener('ended', () => get().playNextTrack())
      set({ listenersAttached: true })
    }
    get().playNextTrack() // Start the first song
  },

  // This function now simply plays the next track in the queue.
  playNextTrack: () => {
    // console.log('playNextTrack func.')
    const { playlist, currentTrackIndex } = get()
    const nextIndex = currentTrackIndex + 1
    // console.log('playNextTrack nextIndex: ', nextIndex, playlist, currentTrackIndex, playlist.length)
    if (nextIndex >= playlist.length) {
      // console.log('Playlist finished.', nextIndex, playlist, currentTrackIndex, playlist.length)
      set({ isPlaying: false, playlistEnded: true })
      audio.src = '' // Clear the audio source
      return
    }
    const track = playlist[nextIndex]
    audio.src = track.path
    // console.log(`playing: `, audio.src)
    audio.play().catch((e) => console.error('Playback error:', e))
    set({ isPlaying: true, currentTrackIndex: nextIndex, activeTheme: track.theme })
    // console.log('playNextTrack set: ', get().isPlaying, currentTrackIndex, nextIndex, get().activeTheme, track.theme, get().listenersAttached)
  },

  // This is now a ONE-TIME setup function for the listeners
  setupListeners: () => {
    if (!audio || get().listenersAttached) return // Prevent adding listeners twice
    const handleSongEnd = () => {
      get().playTrack(get().currentSongIndex + 1)
    }
    audio.addEventListener('ended', handleSongEnd)
    set({ listenersAttached: true })
  },

  // This is a "soft" cleanup, just for pausing.
  pausePlayback: () => {
    if (audio) audio.pause()
    set({ isPlaying: false })
  },

  // This is the "hard" reset for when the user truly leaves the page.
  fullReset: () => {
    if (audio) {
      audio.pause()
      audio.src = ''
    }
    // Reset EVERYTHING, including the start flag.
    set({
      playlist: [],
      currentTrackIndex: -1,
      isPlaying: false,
      playlistEnded: false,
      activeTheme: 'default_theme',
      hasExperienceStarted: false,
    })
  },

  //   authorizeAutoplay: () => set({ isAutoplayAuthorized: true }),

  //   //   grantPlaybackPermission: () => set({ hasPlaybackPermission: true }),
  //   // --- ACTIONS (now at the top level) ---
  //   grantPlaybackPermission: () => {
  //     console.log('Permission slip SIGNED.')
  //     set({ hasPlaybackPermission: true })
  //   },

  //   // The main function that starts everything
  //   initializeAndPlay: (audioElement) => {
  //     if (!audioElement) return
  //     const { isAutoplayAuthorized } = get()
  //     // const handleSongEnd = () => get().playTrack(get().currentSongIndex + 1)
  //     audioElement.addEventListener('ended', get().handleSongEnd)
  //     set({ audio: audioElement })
  //     // THE CORE LOGIC: Only play immediately if the ticket is valid.
  //     if (isAutoplayAuthorized) {
  //       get().playTrack(0)
  //       set({ isAutoplayAuthorized: false }) // Consume the ticket so it can't be reused.
  //     }
  //   },
  //   // This is the master function that starts the entire finale sequence
  //   initializeAndPlay: () => {
  //     // It will only proceed if it has permission
  //     if (!get().hasPermission || get().audio) return
  //     console.log('Permission granted. Initializing and playing audio.')
  //     const audio = new Audio()
  //     audio.volume = 0.3
  //     audio.loop = false
  //     const handleSongEnd = () => {
  //       const { playTrack, currentSongIndex } = get()
  //       playTrack(currentSongIndex + 1)
  //     }
  //     audio.addEventListener('ended', handleSongEnd)
  //     set({ audio })
  //     get().playTrack(0)
  //   },
  //   initializeAudio: () => {
  //     if (get().audio) return // Already initialized
  //     console.log('Audio system initialized and ready.')
  //     const audio = new Audio()
  //     audio.volume = 0.3
  //     audio.loop = false
  //     const handleSongEnd = () => get().playTrack(get().currentSongIndex + 1)
  //     audio.addEventListener('ended', handleSongEnd)
  //     set({ audio })
  //   },

  //   playPlaylist: () => {
  //     const { audio, playTrack } = get()
  //     if (audio) {
  //       playTrack(0)
  //     }
  //   },

  //   // This is the core function the finale page will call
  //   startPlaylist: (audioElement) => {
  //     if (!audioElement || !get().hasPlaybackPermission) return
  //     // Set up listeners on the audio element provided by the component
  //     const handleSongEnd = () => {
  //       const { playTrack, currentSongIndex } = get()
  //       playTrack(currentSongIndex + 1)
  //     }
  //     audioElement.addEventListener('ended', handleSongEnd)
  //     set({ audio: audioElement })
  //     get().playTrack(0) // Start the playlist
  //   },
  startPlaylist: () => {
    const { playTrack } = get()
    // console.log(`startPlaylist`)
    playTrack(0)
  },

  //   // This function ONLY creates the audio element and listeners. It does NOT play.
  //   initializeAudio: () => {
  //     if (get().isInitialized) return
  //     console.log('Audio system armed. Waiting for user interaction to play.')
  //     const audio = new Audio()
  //     audio.volume = 0.3
  //     audio.loop = false
  //     const handleSongEnd = () => {
  //       const { playTrack, currentSongIndex } = get()
  //       playTrack(currentSongIndex + 1)
  //     }
  //     audio.addEventListener('ended', handleSongEnd)
  //     set({ audio, isInitialized: true })
  //   },

  //   playTrack: (index) => {
  //     console.log(`playTrack`)
  //     const { audio } = get()
  //     if (!audio) {
  //       console.log(`playTrack !audio`)
  //       return
  //     }
  //     if (index >= masterPlaylist.length) {
  //       console.log(`playTrack index >=`)
  //       set({ isPlaying: false, playlistEnded: true })
  //       return
  //     }
  //     const track = masterPlaylist[index]
  //     audio.src = track.path
  //     console.log(`playTrack try play() audio ..`)
  //     audio.play().catch((e) => console.error('playTrack error:', e))
  //     // audio.play()
  //     console.log(`playTrack try play() audio .. success`)
  //     set({ isPlaying: true, currentSongIndex: index, activeTheme: track.theme })
  //     console.log(`playTrack try play() audio .. finished`)
  //   },
  playTrack: (index) => {
    // console.log(`playTrack`, index)
    if (!audio) {
      // console.log(`playTrack !audio`)
      return
    }
    if (index >= masterPlaylist.length) {
      // console.log(`playTrack index >=`)
      set({ isPlaying: false, playlistEnded: true })
      return
    }
    const track = masterPlaylist[index]
    audio.src = track.path
    // console.log(`playTrack try play() audio ..`, index)
    audio.play().catch((e) => console.error('Playback error:', e))
    // console.log(`playTrack try play() audio .. success`)
    set({ isPlaying: true, currentSongIndex: index, activeTheme: track.theme })
    // console.log(`playTrack try play() audio .. finished`)
  },

  //   // A new function to clean up when the finale page unmounts
  //   cleanupAudio: () => {
  //     const { audio } = get()
  //     if (audio) {
  //       audio.pause()
  //       audio.src = '' // Release the audio resource
  //     }
  //     // Reset the state to its initial values
  //     set({ hasPlaybackPermission: false, audio: null, isPlaying: false, currentSongIndex: 0, playlistEnded: false, activeTheme: null })
  //   },
  //   cleanupAudio: () => {
  //     const { audio } = get()
  //     if (audio) {
  //       // THE FIX: We check if the audio is not already paused before trying to pause it.
  //       // We also check if the network is fetching data (readyState > 0).
  //       if (!audio.paused || audio.readyState > 0) {
  //         audio.pause()
  //       }
  //       // Detach the event listener to prevent memory leaks
  //       audio.removeEventListener('ended', get().handleSongEnd) // We need to store the handler to remove it
  //       audio.src = ''
  //       set({ audio: null }) // Release the element for garbage collection
  //     }
  //     // Reset the state to its initial values
  //     // set({ hasPermission: false, isPlaying: false, currentSongIndex: 0, playlistEnded: false, activeTheme: null, isAutoplayAuthorized: false })
  //     set({ isPlaying: false, currentSongIndex: 0, playlistEnded: false, activeTheme: null, isAutoplayAuthorized: false })
  //   },
  cleanupAudio: () => {
    // console.log(`audiostore cleanupAudio`)
    if (audio) {
      audio.pause()
      audio.src = ''
    }
    // We do NOT reset hasPermission. We DO reset the other state.
    // set({ isPlaying: false, currentSongIndex: 0, playlistEnded: false, activeTheme: 'default_theme' })
    set({ playlist: [], currentTrackIndex: -1, isInitialized: false, isPlaying: false, playlistEnded: false, activeTheme: 'default_theme' })
  },

  //   // We need to store a reference to the event handler to remove it later
  //   handleSongEnd: () => {
  //     const { playTrack, currentSongIndex } = get()
  //     playTrack(currentSongIndex + 1)
  //   },

  //   // This is now called on page load
  //   initializeAndPlayMuted: () => {
  //     if (get().audio) return // Already initialized
  //     console.log('Initializing audio system in muted state.')
  //     const audio = new Audio()
  //     audio.volume = 0.3
  //     audio.muted = true // <-- THE KEY: Start muted
  //     audio.loop = false
  //     const handleSongEnd = () => {
  //       const { playTrack, currentSongIndex } = get()
  //       playTrack(currentSongIndex + 1)
  //     }
  //     audio.addEventListener('ended', handleSongEnd)
  //     set({ audio })
  //     // Start playback immediately, but it will be silent
  //     get().playTrack(0)
  //   },

  //   unmuteAndPlay: () => {
  //     const { audio, isPlaying, playTrack, isInitialized } = get()
  //     if (!isInitialized) return
  //     audio.muted = false
  //     set({ isMuted: false })
  //     // If it's not already playing, start the playlist from the beginning.
  //     if (!isPlaying) {
  //       playTrack(0)
  //     }
  //   },

  //   // This is called on the first user interaction
  //   unmuteAudio: () => {
  //     const { audio, isMuted } = get()
  //     if (audio && isMuted) {
  //       console.log('Unmuting audio.')
  //       audio.muted = false
  //       set({ isMuted: false })
  //     }
  //   },

  //   muteAudio: () => {
  //     const { audio } = get()
  //     if (audio) {
  //       audio.muted = true
  //       set({ isMuted: true })
  //     }
  //   },

  //   muteAudio: () => {
  //     const { audio, isMuted } = get()
  //     if (audio && !isMuted) {
  //       console.log('Muting audio.')
  //       audio.muted = true
  //       set({ isMuted: true })
  //     }
  //   },

  //   // This function is now the heart of the playlist logic
  //   playTrack: (index) => {
  //     const { audio } = get()
  //     if (!audio) return
  //     // Check if the playlist is over
  //     if (index >= masterPlaylist.length) {
  //       console.log('Playlist finished.')
  //       set({ isPlaying: false, playlistEnded: true })
  //       return
  //     }
  //     console.log(`Playing track index: ${index}`)
  //     const track = masterPlaylist[index]
  //     audio.src = track.path
  //     audio.play().catch((e) => console.error('Playback error:', e))
  //     set({ isPlaying: true, currentSongIndex: index, activeTheme: track.theme, playlistEnded: false })
  //   },
  //   armAudio: () => {
  //     if (get().isArmed) return
  //     console.log('Audio system armed by user interaction.')
  //     const audio = new Audio()
  //     audio.volume = 0.3
  //     audio.loop = false
  //     // --- THE CRITICAL FIX ---
  //     // When a song ends, it directly calls the master playTrack function with the next index.
  //     const handleSongEnd = () => {
  //       const { playTrack, currentSongIndex } = get()
  //       playTrack(currentSongIndex + 1)
  //     }
  //     audio.addEventListener('ended', handleSongEnd)
  //     set({ audio, isArmed: true })
  //   },

  //   // This function is now SILENT. It just prepares the audio system.
  //   armAudio: () => {
  //     if (get().isArmed) return // Don't run twice
  //     console.log('Audio system armed by user interaction.')
  //     const audio = new Audio()
  //     audio.volume = 0.3
  //     audio.loop = false
  //     const playNextSong = () => {
  //       set((state) => {
  //         const nextIndex = state.currentSongIndex + 1
  //         if (nextIndex >= masterPlaylist.length) {
  //           audio.removeEventListener('ended', playNextSong)
  //           return { isPlaying: false, activeTheme: 'none' } // End of playlist
  //         }
  //         return { currentSongIndex: nextIndex }
  //       })
  //     }
  //     audio.addEventListener('ended', playNextSong)
  //     set({ audio, isArmed: true })
  //   },

  //   startPlayback: () => {
  //     const { isArmed, isPlaying, playTrack } = get()
  //     if (isArmed && !isPlaying) {
  //       console.log('Playback started by finale page.')
  //       playTrack(0) // Start with the first track
  //     }
  //   },

  //   // This is the NEW function that the finale page will call
  //   startPlayback: () => {
  //     const { audio, isArmed, currentSongIndex, isPlaying } = get()
  //     if (audio && isArmed && !isPlaying) {
  //       console.log('Playback started by finale page.')
  //       const currentTrack = masterPlaylist[currentSongIndex]
  //       audio.src = currentTrack.path
  //       audio.play().catch((e) => console.error('Playback error:', e))
  //       set({ isPlaying: true, activeTheme: currentTrack.theme })
  //     }
  //   },

  //   // We need a way to advance the track now
  //   playNextTrack: () => {
  //     const { audio, currentSongIndex } = get()
  //     if (audio) {
  //       const currentTrack = masterPlaylist[currentSongIndex]
  //       audio.src = currentTrack.path
  //       audio.play()
  //       set({ activeTheme: currentTrack.theme })
  //     }
  //   },
}))

// --- Initialize listeners once the store is created ---
// This is a neat trick to attach the 'ended' listener to our singleton audio object.
// useAudioStore.getState().setupListeners()
