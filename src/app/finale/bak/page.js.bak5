'use client'

import { useRouter } from 'next/navigation'
import { useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react'

import { DogEar } from '@/components/DogEar'
import { LightningEffect } from '@/components/LightningEffect'
import { SnowEffect } from '@/components/SnowEffect'
import { ThunderEffect } from '@/components/ThunderEffect'
import { DataStorm } from '@/components/finale/DataStorm'
import { FinaleDataProvider, useFinaleData } from '@/components/finale/FinaleDataProvider'
import { GlitchOverlay } from '@/components/finale/GlitchOverlay'
import { SingleLineStream } from '@/components/finale/SingleLineStream'
import { StaticHeader } from '@/components/finale/StaticHeader'
import { StreamColumn } from '@/components/finale/StreamColumn'
import { SyntaxHighlightedCode } from '@/components/finale/SyntaxHighlightedCode'

import styles from './finale.module.css'
import { useAudioStore } from '@/stores/audioStore'

const THEME_CONFIGS = {
  main_theme: {
    singlespeeds: 2,
    speeds: [1000, 1500, 1000],
    directions: ['up', 'up', 'up'],
  },
  snow: {
    singlespeeds: 160,
    speeds: [40, 40, 40],
    directions: ['up', 'up', 'up'],
  },
  thunder: {
    singlespeeds: 150,
    speeds: [50, 50, 50],
    directions: ['up', 'up', 'up'],
  },
  lightning: {
    singlespeeds: 140,
    speeds: [60, 60, 60],
    directions: ['up', 'up', 'up'],
  },
  default_theme: {
    singlespeeds: 40,
    speeds: [120, 120, 120],
    directions: ['up', 'up', 'up'],
  },
}

function FinaleStreams({ isEnding, activeTheme }) {
  const { data, isLoading } = useFinaleData()

  const themeConfig = THEME_CONFIGS[activeTheme] || THEME_CONFIGS.default_theme

  // const columnData1 = useMemo(() => {
  //   if (!data?.multiStream) return []
  //   return data.multiStream.slice(0, 20)
  // }, [data?.multiStream])

  // const columnData2 = useMemo(() => {
  //   if (!data?.multiStream) return []
  //   return data.multiStream.slice(20, 40)
  // }, [data?.multiStream])

  // const columnData3 = useMemo(() => {
  //   if (!data?.multiStream) return []
  //   return data.multiStream.slice(40, 60)
  // }, [data?.multiStream])

  // useMemo for the data is correct.
  const columnData1 = useMemo(() => data?.multiStream?.slice(0, 20) || [], [data])
  const columnData2 = useMemo(() => data?.multiStream?.slice(20, 40) || [], [data])
  const columnData3 = useMemo(() => data?.multiStream?.slice(40, 60) || [], [data])

  const renderCodeBlock = useCallback(
    (snip, node) => {
      if (!node) return

      node.className = `${styles.streamItemContainer} ${styles.codeBlock} ${snip.isDistant ? styles.distant : ''}`

      // IMPORTANT: Sanitize the title and code to prevent HTML injection issues.
      const sanitizedTitle = snip.title.replace(/</g, '<').replace(/>/g, '>')
      const sanitizedCode = snip.code.replace(/</g, '<').replace(/>/g, '>')
      node.innerHTML = `
      <div class="${styles.codeTitle}">${sanitizedTitle}</div>
      <pre>${sanitizedCode}</pre>
    `
    },
    [styles]
  )

  if (isLoading || !data?.multiStream?.length) {
    return null
  }

  return (
    <div className={styles.contentWrapper}>
      <SingleLineStream data={data.singleStream} speed={themeConfig.singlespeeds} />

      <div className={styles.codeWall}>
        <StreamColumn
          initialData={columnData1}
          speed={themeConfig.speeds[0]}
          direction={themeConfig.directions[0]}
          isEnding={isEnding}
          className={styles.columnWrapper}
          renderItem={(snip) => (
            <div className={`${styles.codeBlock} ${snip.isDistant ? styles.distant : ''}`}>
              <div className={styles.codeTitle}>{snip.title}</div>
              <SyntaxHighlightedCode content={snip.code} />
            </div>
          )}
        />
        <StreamColumn
          initialData={columnData2}
          speed={themeConfig.speeds[1]}
          direction={themeConfig.directions[1]}
          isEnding={isEnding}
          className={styles.columnWrapper}
          renderItem={(snip) => (
            <div className={`${styles.codeBlock} ${snip.isDistant ? styles.distant : ''}`}>
              <div className={styles.codeTitle}>{snip.title}</div>
              <SyntaxHighlightedCode content={snip.code} />
            </div>
          )}
        />
        <StreamColumn
          initialData={columnData3}
          speed={themeConfig.speeds[2]}
          direction={themeConfig.directions[2]}
          isEnding={isEnding}
          className={styles.columnWrapper}
          renderItem={(snip) => (
            <div className={`${styles.codeBlock} ${snip.isDistant ? styles.distant : ''}`}>
              <div className={styles.codeTitle}>{snip.title}</div>
              <SyntaxHighlightedCode content={snip.code} />
            </div>
          )}
        />
      </div>
    </div>
  )
}

const initialState = {
  pageState: 'DORMANT',
  isExiting: false,
}
function finaleReducer(state, action) {
  switch (action.type) {
    case 'SHOW_CURSOR':
      return { ...state, pageState: 'IDLE' }
    case 'HIDE_CURSOR':
      return { ...state, pageState: 'PRE_TYPE' }
    case 'START_TYPING':
      return { ...state, pageState: 'TYPING' }
    case 'FINISH_TYPING':
      return { ...state, pageState: 'STATIC' }
    case 'START_SCROLLING':
      return { ...state, pageState: 'SCROLLING' }
    case 'START_CREDITS':
      return { ...state, pageState: 'CREDITS_ROLLING' }
    case 'EXIT_HEADER':
      return { ...state, pageState: 'HEADER_EXITING' }
    case 'NAVIGATE':
      return { ...state, pageState: 'NAVIGATING' }
    case 'START_TRANSITION':
      return { ...state, pageState: 'TRANSITIONING' }
    case 'EXIT':
      return { ...state, isExiting: true }
    default:
      throw new Error()
  }
}

export default function FinalePage() {
  const router = useRouter() // Initialize the router
  const [state, dispatch] = useReducer(finaleReducer, initialState)
  const [showDataStorm, setShowDataStorm] = useState(false)
  const hasInitialized = useRef(false)

  const { hasPermission, startExperience, cleanupAudio, activeTheme, playlistEnded } = useAudioStore()

  const isStreamVisible = state.pageState === 'SCROLLING' || state.pageState === 'CREDITS_ROLLING'
  const isTransitioning = state.pageState === 'TRANSITIONING'
  const isEnding = state.pageState === 'CREDITS_ROLLING'

  useEffect(() => {
    if (hasInitialized.current) {
      if (state.pageState !== 'CREDITS_ROLLING' && state.pageState !== 'HEADER_EXITING') {
        dispatch({ type: 'START_TRANSITION' })
      }
    }
  }, [activeTheme])

  useEffect(() => {
    if (playlistEnded) {
      console.log('Playlist ended. Starting credits roll...')
      dispatch({ type: 'START_CREDITS' })
    }
  }, [playlistEnded])

  useEffect(() => {
    if (hasInitialized.current) {
      return
    }
    hasInitialized.current = true
    const startSequence = async () => {
      if (hasPermission) {
        await new Promise((resolve) => setTimeout(resolve, 7000))
        startExperience()
      } else {
      }
    }
    startSequence()
    return () => {
      cleanupAudio()
    }
  }, [hasPermission, startExperience, cleanupAudio])

  useEffect(() => {
    let timer
    if (state.pageState === 'STATIC') {
      timer = setTimeout(() => dispatch({ type: 'START_SCROLLING' }), 13600)
    } else if (state.pageState === 'TRANSITIONING') {
      // The glitch transition is 1.5 seconds long
      timer = setTimeout(() => dispatch({ type: 'START_SCROLLING' }), 1500)
    } else if (state.pageState === 'CREDITS_ROLLING') {
      timer = setTimeout(() => dispatch({ type: 'EXIT_HEADER' }), 8000)
    } else if (state.pageState === 'HEADER_EXITING') {
      timer = setTimeout(() => dispatch({ type: 'NAVIGATE' }), 2000)
    } else if (state.pageState === 'NAVIGATING') {
      router.push('/post-scene')
    }
    return () => clearTimeout(timer)
  }, [state.pageState, router])

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        console.log('Escape key pressed. Disconnecting.')
        dispatch({ type: 'EXIT' })
      }
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [])

  return (
    <div className={`${styles.finaleWrapper} ${styles[activeTheme] || ''} ${state.isExiting ? styles.exiting : ''}`}>
      {isStreamVisible && (activeTheme === 'snow' || activeTheme === 'main_theme') && <SnowEffect />}
      {isStreamVisible && (activeTheme === 'thunder' || activeTheme === 'main_theme') && <ThunderEffect />}
      {isStreamVisible && (activeTheme === 'lightning' || activeTheme === 'main_theme') && <LightningEffect />}
      <StaticHeader pageState={state.pageState} onTypingComplete={() => dispatch({ type: 'FINISH_TYPING' })} isExiting={state.pageState === 'HEADER_EXITING'} />
      <FinaleDataProvider theme={activeTheme}>
        {state.pageState !== 'DORMANT' && state.pageState !== 'IDLE' && state.pageState !== 'PRE_TYPE' && state.pageState !== 'TYPING' && state.pageState !== 'STATIC' && (
          <div className={`${styles.streamsContainer} ${!isStreamVisible ? styles.hidden : ''}`}>
            <FinaleStreams isEnding={isEnding} activeTheme={activeTheme} />
          </div>
        )}
        {isTransitioning && <GlitchOverlay isScrolling={true} />}
      </FinaleDataProvider>
      {/* {state.pageState === 'SCROLLING' && <DataStorm isActive={showDataStorm} particleLifetime={2500} cname="c1" />} */}
      <DogEar href="/dev-history" position="bottom-left" aria-label="Return to dev-history" />
      <DogEar href="/" position="bottom-right" aria-label="View main page" />
    </div>
  )
}
