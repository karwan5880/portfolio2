'use client'

import Link from 'next/link'
import { useEffect, useMemo, useRef, useState } from 'react'

import { DogEar } from '@/components/DogEar'
import { LightningEffect } from '@/components/LightningEffect'
import { SnowEffect } from '@/components/SnowEffect'
import { ThunderEffect } from '@/components/ThunderEffect'

import styles from './finale.module.css'
import { finaleStream } from '@/data/finale-stream-data'
import { useGatekeeper } from '@/hooks/useGatekeeper'
import { masterPlaylist } from '@/stores/audioStore'
import { useAudioStore } from '@/stores/audioStore'

const createHighlightedHTML = (content) => {
  const html = content
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/(const|let|class|return|def|function|async|await|if|else|public|static|void|FROM|WORKDIR|COPY|RUN|CMD|SELECT|JOIN|FROM|WHERE|template|typename|include|using|namespace|std|fn)/g, '<span class="keyword">$1</span>')
    .replace(/("[^"]*"|'[^']*'|`[^`]*`)/g, '<span class="string">$1</span>')
    .replace(/(\/\/.*|\#.*|\/\*[\s\S]*?\*\/|;.*)/g, '<span class="comment">$1</span>')
  return { __html: html }
}

const CodeBlock = ({ item }) => (
  <div className={styles.codeColumn}>
    <div className={styles.codeTitle}>{item.title}</div>
    <pre dangerouslySetInnerHTML={createHighlightedHTML(item.code)} />
  </div>
)

const StreamItem = ({ item }) => {
  const handleSecretClick = () => {
    console.log('SECRET FOUND!')
    window.location.href = '/secret-room'
  }

  if (item.type === 'multi-column') {
    return (
      <div className={styles.multiColumnContainer}>
        {item.columns.map((col, i) => (
          <div key={i} className={styles.codeColumn}>
            <div className={styles.codeTitle}>{col.title}</div>
            <pre dangerouslySetInnerHTML={createHighlightedHTML(col.code)} />
          </div>
        ))}
      </div>
    )
  }

  // if (item.type === 'multi-column') {
  //   return (
  //     <div className={`${styles.streamItem} ${styles.isMultiColumn}`}>
  //       <div className={styles.multiColumnContainer}>
  //         {item.columns.map((col, i) => (
  //           <div key={i} className={styles.codeColumn}>
  //             <div className={styles.codeTitle}>{col.title}</div>
  //             <pre dangerouslySetInnerHTML={createHighlightedHTML(col.code)} />
  //           </div>
  //         ))}
  //       </div>
  //     </div>
  //   )
  // }

  // if (item.type === 'multi-column') {
  //   return (
  //     <div className={`${styles.streamItem} ${styles.multiColumnContainer}`}>
  //       {item.columns.map((col, i) => (
  //         <div key={i} className={styles.codeColumn}>
  //           <div className={styles.codeTitle}>{col.title}</div>
  //           <pre dangerouslySetInnerHTML={createHighlightedHTML(col.code)} />
  //         </div>
  //       ))}
  //     </div>
  //   )
  // }

  // if (item.type === 'multi-column') {
  //   return (
  //     <div className={`${styles.streamItem} ${styles.multiColumnContainer}`}>
  //       {item.columns.map((col, i) => (
  //         <div key={i} className={styles.codeColumn}>
  //           <div className={styles.codeTitle}>{col.title}</div>
  //           <pre dangerouslySetInnerHTML={createHighlightedHTML(col.code)} />
  //         </div>
  //       ))}
  //     </div>
  //   )
  // }

  if (item.type.startsWith('live-data')) {
    return (
      <div className={`${styles.streamItem} ${styles[item.type]}`}>
        <span>{item.content}</span>
      </div>
    )
  }

  return (
    <div className={`${styles.streamItem} ${styles[item.type]} ${item.secret ? styles.secret : ''}`} onClick={item.secret ? handleSecretClick : null}>
      <span>{item.content}</span>
    </div>
  )
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[array[i], array[j]] = [array[j], array[i]]
  }
  return array
}

const finalMessage = '> Status: Still building.'
const initialLinks = [
  { type: 'link', content: '[ GitHub ]', href: 'https://github.com/karwan5880/portfolio2' },
  { type: 'link', content: '[ LinkedIn ]', href: 'https://www.linkedin.com/in/karwanleong' },
]

export default function FinalePage() {
  useGatekeeper('/finale') // Checks if level 5 is unlocked, then sets max level to 6
  const [pageState, setPageState] = useState('TYPING')
  const [typedText, setTypedText] = useState('')
  const [isExiting, setIsExiting] = useState(false)
  // const masterPlaylist = useMemo(() => ['/sound/megamanx5.mp3', '/sound/yangguxian.mp3', '/sound/cangzoucheng.mp3', '/sound/harvestmoon.mp3'], [])
  // const [currentSongIndex, setCurrentSongIndex] = useState(0)
  // const { currentSongIndex } = useAudioStore()
  const isAudioPlaying = useAudioStore((state) => state.isPlaying)
  const { startPlayback, playNextTrack, currentSongIndex, isPlaying, activeTheme } = useAudioStore()
  // const [activeTheme, setActiveTheme] = useState(null)
  // const { activeTheme } = useAudioStore((state) => ({ activeTheme: state.activeTheme }))
  const audioRef = useRef(null)
  const [githubItems, setGithubItems] = useState([])
  const [musicItems, setMusicItems] = useState([])
  const [githubBurst, setGithubBurst] = useState(null)
  const [musicBurst, setMusicBurst] = useState(null)
  // const [animationDurations, setAnimationDurations] = useState({
  //   marquee1: 10,
  //   marquee2: 5,
  // })
  // const singleLineData = useMemo(() => {
  //   const filtered = finaleStream.filter((item) => item.type !== 'multi-column')
  //   for (let i = filtered.length - 1; i > 0; i--) {
  //     const j = Math.floor(Math.random() * (i + 1))
  //     ;[filtered[i], filtered[j]] = [filtered[j], filtered[i]]
  //   }
  //   return filtered
  // }, [])
  // const multiColumnData = useMemo(() => finaleStream.filter((item) => item.type === 'multi-column'), [])
  const [singleLineItems, setSingleLineItems] = useState([])
  const [multiColumnItems, setMultiColumnItems] = useState([])
  const singleLineData = useMemo(() => {
    const stream = finaleStream[activeTheme] || finaleStream['default_theme']
    return shuffleArray(stream.filter((item) => item.type !== 'multi-column'))
  }, [activeTheme])
  // const multiColumnData = useMemo(() => {
  //   const stream = finaleStream[activeTheme] || finaleStream['default_theme']
  //   return stream.filter((item) => item.type === 'multi-column')
  // }, [activeTheme])
  const [leftColumnItems, setLeftColumnItems] = useState([])
  const [middleColumnItems, setMiddleColumnItems] = useState([])
  const [rightColumnItems, setRightColumnItems] = useState([])
  const [glitchItems, setGlitchItems] = useState([])
  const { leftColumnData, middleColumnData, rightColumnData, glitchData } = useMemo(() => {
    const stream = finaleStream[activeTheme] || finaleStream['default_theme']
    const multiColumnBlocks = shuffleArray(stream.filter((item) => item.type === 'multi-column'))
    const allCodeSnippets = multiColumnBlocks.flatMap((block) => block.columns)
    const left = []
    const middle = []
    const right = []
    const glitches = []
    allCodeSnippets.forEach((snippet, index) => {
      const lane = index % 4
      if (lane === 0) {
        left.push(snippet)
      } else if (lane === 1) {
        middle.push(snippet)
      } else if (lane === 2) {
        right.push(snippet)
      } else {
        // lane === 3
        glitches.push(snippet)
      }
    })
    return {
      leftColumnData: left,
      middleColumnData: middle,
      rightColumnData: right,
      glitchData: shuffleArray(glitches),
    }
  }, [])
  const glitchIndex = useRef(0)
  const [streamItems, setStreamItems] = useState([])

  // This effect starts the music when the component mounts
  useEffect(() => {
    // After a 4-second delay, try to start the music.
    const timer = setTimeout(() => {
      startPlayback()
    }, 4000)
    return () => clearTimeout(timer)
  }, [startPlayback])

  useEffect(() => {
    const timer = setTimeout(() => startPlayback(), 4000)
    return () => clearTimeout(timer)
  }, [startPlayback])
  useEffect(() => {
    if (currentSongIndex > 0) playNextTrack()
  }, [currentSongIndex, playNextTrack])

  // useEffect(() => {
  //   // This effect runs whenever the song changes OR when playback starts/stops
  //   if (isPlaying) {
  //     const currentSong = masterPlaylist[currentSongIndex]
  //     if (currentSong.includes('harvestmoon.mp3')) {
  //       setActiveTheme('snow')
  //     } else if (currentSong.includes('cangzoucheng.mp3')) {
  //       setActiveTheme('thunder')
  //     } else if (currentSong.includes('yangguxian.mp3')) {
  //       setActiveTheme('lightning')
  //     } else {
  //       setActiveTheme(null) // No theme for other songs
  //     }
  //   } else {
  //     setActiveTheme(null) // No theme if nothing is playing
  //   }
  // }, [isPlaying, currentSongIndex])

  // // useeffect for changing background effect
  // useEffect(() => {
  //   let audio
  //   const initialPlayTimer = setTimeout(() => {
  //     audio = new Audio(masterPlaylist[currentSongIndex])
  //     if (masterPlaylist[currentSongIndex].includes('harvestmoon.mp3')) {
  //       setActiveTheme('snow')
  //     } else if (masterPlaylist[currentSongIndex].includes('cangzoucheng.mp3')) {
  //       setActiveTheme('thunder')
  //     } else if (masterPlaylist[currentSongIndex].includes('yangguxian.mp3')) {
  //       setActiveTheme('lightning')
  //     } else {
  //       setActiveTheme(null)
  //     }
  //     audioRef.current = audio
  //     audio.volume = 0.2
  //     audio.play()
  //     const handleSongEnd = () => {
  //       setCurrentSongIndex((prevIndex) => {
  //         if (prevIndex === 0) {
  //           return 1
  //         } else {
  //           const nextIndex = prevIndex + 1
  //           return nextIndex >= masterPlaylist.length ? 1 : nextIndex
  //         }
  //       })
  //     }
  //     audio.addEventListener('ended', handleSongEnd)
  //   }, 4000)
  //   return () => {
  //     clearTimeout(initialPlayTimer)
  //     if (audioRef.current) {
  //       audioRef.current.pause()
  //     }
  //   }
  // }, [currentSongIndex])

  // useeffect for escape listener, unused.
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        setIsExiting(true)
      }
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [])

  // useeffect for the three pagestate
  useEffect(() => {
    if (pageState === 'TYPING') {
      const typeText = (index = 0) => {
        if (index < finalMessage.length) {
          setTypedText(finalMessage.substring(0, index + 1))
          setTimeout(() => typeText(index + 1), 100)
        } else {
          setTimeout(() => setPageState('STATIC'), 500)
        }
      }
      const startTypingTimer = setTimeout(typeText, 1500)
      return () => clearTimeout(startTypingTimer)
    }
    if (pageState === 'STATIC') {
      const startScrollingTimer = setTimeout(() => setPageState('SCROLLING'), 15000)
      return () => clearTimeout(startScrollingTimer)
    }
    if (pageState === 'SCROLLING') {
      console.log('State changed to SCROLLING. Populating streams and starting glitch loop.')
      // const initialSingleLines = singleLineData
      // const initialMultiColumns = multiColumnData
      // setSingleLineItems(initialSingleLines)
      // setMultiColumnItems(initialMultiColumns)
      setSingleLineItems(singleLineData)
      // setMultiColumnItems(multiColumnData)
      setLeftColumnItems(leftColumnData)
      setMiddleColumnItems(middleColumnData)
      setRightColumnItems(rightColumnData)
      // --- Glitch Fragment Logic ---
      let glitchTimerId
      const glitchLoop = () => {
        const item = glitchData[glitchIndex.current]
        if (!item) return // Safety check in case the glitch data array is empty
        const uniqueItem = { ...item, id: Date.now() } // Give it a unique ID
        setGlitchItems((prev) => [...prev, uniqueItem])
        glitchIndex.current = (glitchIndex.current + 1) % glitchData.length
        // Remove the item after its animation is done
        setTimeout(() => {
          setGlitchItems((prev) => prev.filter((i) => i.id !== uniqueItem.id))
        }, 4000) // 4s animation
        // Set a timer for the next glitch
        const randomDelay = Math.random() * 3000 + 1000 // 1s to 4s
        glitchTimerId = setTimeout(glitchLoop, randomDelay)
      }
      glitchLoop()
      // The cleanup function for this state
      return () => {
        // When the component unmounts or the state changes, clear any pending timer
        // This prevents memory leaks and errors.
        clearTimeout(glitchTimerId)
      }
    }
  }, [pageState, singleLineData, leftColumnData, middleColumnData, rightColumnData, glitchData])
  // }, [pageState, singleLineData, leftColumnData, middleColumnData, rightColumnData])
  // }, [pageState, singleLineData, multiColumnData])
  // }, [pageState])

  // // useeffect for music data burst
  // useEffect(() => {
  //   if (pageState !== 'SCROLLING') return
  //   console.log('Updating Now Playing data...')
  //   const songName = masterPlaylist[currentSongIndex].split('/').pop().replace('.mp3', '')
  //   const uniqueId = `music-${currentSongIndex}-${Date.now()}`
  //   const musicItem = {
  //     id: uniqueId,
  //     type: 'live-data-audio',
  //     id: `music-${currentSongIndex}-${Date.now()}`, // Unique ID
  //     content: `[AUDIO_LOG] Now Playing: ${songName}`,
  //   }
  //   setMusicItems((prev) => [...prev, musicItem])
  //   setTimeout(() => {
  //     setMusicItems((prev) => prev.filter((item) => item.id !== uniqueId))
  //   }, 15000)
  // }, [pageState, currentSongIndex])

  // --- EFFECT: GitHub Live Data Burst ---
  useEffect(() => {
    if (pageState !== 'SCROLLING') return
    const fetchAndAnimateGithubData = async () => {
      try {
        const response = await fetch('https://api.github.com/repos/karwan5880/portfolio2')
        if (!response.ok) throw new Error('GitHub API response failed')
        const repoData = await response.json()
        if (!repoData.pushed_at) return
        const lastPush = new Date(repoData.pushed_at).toLocaleString()
        const uniqueId = `github-${Date.now()}`
        const githubItem = {
          id: uniqueId,
          type: 'live-data-github',
          id: `github-${Date.now()}`,
          content: `[LIVE] Last commit to this repository: ${lastPush}`,
        }
        // Set the state to this ONE item
        setGithubBurst(githubItem)
        // After 5s, set it back to null to remove it from the DOM
        setTimeout(() => setGithubBurst(null), 5000)
      } catch (error) {
        console.error(error)
      }
    }
    const interval = setInterval(fetchAndAnimateGithubData, 60000)
    fetchAndAnimateGithubData()
    return () => clearInterval(interval)
  }, [pageState])

  // --- EFFECT: Music "Now Playing" Data Burst ---
  useEffect(() => {
    if (pageState !== 'SCROLLING') return
    // const songName = masterPlaylist[currentSongIndex].split('/').pop().replace('.mp3', '')
    const songName = masterPlaylist[currentSongIndex]['path'].split('/').pop()
    const uniqueId = `music-${currentSongIndex}-${Date.now()}`
    const musicItem = { id: uniqueId, type: 'live-data-audio', content: `[AUDIO] Now Playing: ${songName}` }
    // Set the state to this ONE item
    setMusicBurst(musicItem)
    // After 5s, set it back to null
    setTimeout(() => setMusicBurst(null), 5000)
  }, [pageState, currentSongIndex]) // This correctly runs every time the song changes

  // // useeffect for git live data
  // useEffect(() => {
  //   if (pageState !== 'SCROLLING') return
  //   const fetchGithubData = async () => {
  //     console.log('Fetching GitHub data...')
  //     try {
  //       const response = await fetch('https://api.github.com/repos/karwan5880/portfolio2')
  //       if (!response.ok) throw new Error('GitHub API response failed')
  //       const repoData = await response.json()
  //       if (!repoData.pushed_at) return
  //       const lastPush = new Date(repoData.pushed_at).toLocaleString()
  //       const uniqueId = `github-${Date.now()}`
  //       const githubItem = {
  //         id: uniqueId,
  //         type: 'live-data-github',
  //         id: `github-${Date.now()}`,
  //         content: `[LIVE] Last commit to this repository: ${lastPush}`,
  //       }
  //       setGithubItems((prev) => [...prev, githubItem])
  //       setTimeout(() => {
  //         setGithubItems((prev) => prev.filter((item) => item.id !== uniqueId))
  //       }, 15000)
  //     } catch (error) {
  //       console.error('GitHub fetch failed:', error)
  //     }
  //   }
  //   const interval = setInterval(fetchGithubData, 30000)
  //   return () => clearInterval(interval)
  // }, [pageState])

  return (
    <div className={`${styles.finaleWrapper} ${isExiting ? styles.exiting : ''}`}>
      {activeTheme === 'snow' && <SnowEffect />}
      {activeTheme === 'thunder' && <ThunderEffect />}
      {activeTheme === 'lightning' && <LightningEffect />}

      <div className={`${styles.staticContainer} ${pageState === 'SCROLLING' ? styles.hidden : ''}`}>
        <p className={`${styles.streamItem} ${styles.finalMessage}`}>
          {typedText}
          {!isExiting && <span className={styles.blinkingCursor}></span>}
        </p>
        <div className={`${styles.linksContainer} ${pageState !== 'TYPING' ? styles.visible : ''}`}>
          {initialLinks.map((item, index) => (
            <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
              {item.content}
            </a>
          ))}
        </div>
      </div>

      {/* --- The SCROLLING ENGINE --- */}
      <div className={`${styles.scrollTrack} ${pageState === 'SCROLLING' ? styles.scrolling : ''}`}>
        {/* Train Car 1 */}
        <div className={styles.contentBlock}>
          {streamItems.map((item, index) => (
            <StreamItem key={index} item={item} />
          ))}
        </div>

        {/* Train Car 2 (The Clone) */}
        <div className={styles.contentBlock} aria-hidden="true">
          {streamItems.map((item, index) => (
            <StreamItem key={index} item={item} />
          ))}
        </div>
      </div>

      <div className={`${styles.scrollContainer} ${pageState === 'SCROLLING' ? styles.scrolling : ''}`}>
        {/* <div className={`${styles.marquee} ${styles.marqueeCenter}`}>
          <div className={styles.streamContent}>
            {singleLineItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {singleLineItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
        </div>
        <div className={`${styles.marquee} ${styles.marqueeLeft}`}>
          <div className={styles.streamContent}>
            {leftColumnData.map((item, i) => (
              <CodeBlock key={i} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {leftColumnData.map((item, i) => (
              <CodeBlock key={i} item={item} />
            ))}
          </div>
        </div>
        <div className={`${styles.marquee} ${styles.marqueeMiddle}`}>
          <div className={styles.streamContent}>
            {middleColumnData.map((item, i) => (
              <CodeBlock key={i} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {middleColumnData.map((item, i) => (
              <CodeBlock key={i} item={item} />
            ))}
          </div>
        </div>
        <div className={`${styles.marquee} ${styles.marqueeRight}`}>
          <div className={styles.streamContent}>
            {rightColumnData.map((item, i) => (
              <CodeBlock key={i} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {rightColumnData.map((item, i) => (
              <CodeBlock key={i} item={item} />
            ))}
          </div>
        </div>
        <div className={styles.glitchContainer}>
          {glitchItems.map((item) => (
            <div key={item.id} className={styles.glitchItem} style={{ top: `${Math.random() * 90}%`, left: `${Math.random() * 90}%` }}>
              <CodeBlock item={item} />
            </div>
          ))}
        </div> */}
        {/* <div className={`${styles.marquee} ${styles.multiColumnMarquee}`}> */}
        {/* <div className={styles.streamContent}>
            {multiColumnItems.map((item, i) => (
              <StreamItem key={i} item={item} />
              // <div key={i} className={styles.multiColumnContainer}>
              //   {item.columns.map((col, j) => (
              //     <div key={j} className={styles.codeColumn}>
              //       <div className={styles.codeTitle}>{col.title}</div>
              //       <pre dangerouslySetInnerHTML={createHighlightedHTML(col.code)} />
              //     </div>
              //   ))}
              // </div>
            ))}
          </div> */}
        {/* <div className={styles.streamContent} aria-hidden="true">
            {multiColumnItems.map((item, i) => (
              <StreamItem key={i} item={item} />
              // <div key={i} className={styles.multiColumnContainer}>
              //   {item.columns.map((col, j) => (
              //     <div key={j} className={styles.codeColumn}>
              //       <div className={styles.codeTitle}>{col.title}</div>
              //       <pre dangerouslySetInnerHTML={createHighlightedHTML(col.code)} />
              //     </div>
              //   ))}
              // </div>
            ))}
          </div> */}
        {/* </div> */}
        {/* <div className={`${styles.marquee} ${styles.singleLineMarquee}`}> */}
        {/* <div className={styles.streamContent}>
            {singleLineItems.map((item, i) => (
              <StreamItem key={i} item={item} />
              // // The single-line items are rendered directly
              // <div key={i} className={`${styles.streamItem} ${styles[item.type]}`}>
              //   <span>{item.content}</span>
              // </div>
            ))}
          </div> */}
        {/* <div className={styles.streamContent} aria-hidden="true">
            {singleLineItems.map((item, i) => (
              <StreamItem key={i} item={item} />
              // <div key={i} className={`${styles.streamItem} ${styles[item.type]}`}>
              //   <span>{item.content}</span>
              // </div>
            ))}
          </div> */}
        {/* </div> */}
        <div className={styles.dataBurstContainer}>{githubBurst && <StreamItem key={githubBurst.id} item={githubBurst} />}</div>
        <div className={styles.dataBurstContainer}>{musicBurst && <StreamItem key={musicBurst.id} item={musicBurst} />}</div>
      </div>
      <DogEar href="/dev-history" position="bottom-left" aria-label="Return to dev-history" />
      <DogEar href="/" position="bottom-right" aria-label="View main page" />
    </div>

    // <div className={`${styles.finaleWrapper} ${isExiting ? styles.exiting : ''}`}>
    //   {activeTheme === 'snow' && <SnowEffect />}
    //   {activeTheme === 'thunder' && <ThunderEffect />}
    //   {activeTheme === 'lightning' && <LightningEffect />}
    //   <div className={styles.staticContainer}>
    //     <p className={`${styles.streamItem} ${styles.finalMessage}`}>
    //       {typedText}
    //       {!isExiting && <span className={styles.blinkingCursor}></span>}
    //     </p>
    //     <div className={`${styles.linksContainer} ${pageState !== 'TYPING' ? styles.visible : ''}`}>
    //       {initialLinks.map((item, index) => (
    //         <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
    //           {item.content}
    //         </a>
    //       ))}
    //     </div>
    //   </div>
    //   <div className={`${styles.scrollContainer} ${pageState === 'SCROLLING' ? styles.scrolling : ''}`}>
    //     <div className={`${styles.marquee} ${styles.marquee1} ${!isAudioPlaying ? styles.paused : ''}`}>
    //       <div className={styles.streamContent}>
    //         {multiColumnItems.map((item, i) => (
    //           <StreamItem key={i} item={item} />
    //         ))}
    //       </div>
    //     </div>
    //     <div className={`${styles.marquee} ${styles.marquee2} ${!isAudioPlaying ? styles.paused : ''}`}>
    //       <div className={styles.streamContent}>
    //         {singleLineItems.map((item, i) => (
    //           <StreamItem key={i} item={item} />
    //         ))}
    //       </div>
    //     </div>
    //     <div className={styles.dataBurstContainer}>
    //       {githubBurst && <StreamItem key={githubBurst.id} item={githubBurst} />}
    //     </div>
    //     <div className={styles.dataBurstContainer}>
    //       {musicBurst && <StreamItem key={musicBurst.id} item={musicBurst} />}
    //     </div>
    //   </div>
    //   <DogEar href="/dev-history" position="bottom-left" aria-label="Return to dev-history" />
    //   <DogEar href="/" position="bottom-right" aria-label="View main page" />
    // </div>
  )
}
