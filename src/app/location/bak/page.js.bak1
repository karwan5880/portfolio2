'use client'

import { OrbitControls, Stars, Text } from '@react-three/drei'
import { Canvas, useLoader } from '@react-three/fiber'
import { useState } from 'react'
import { TextureLoader, Vector3 } from 'three'

import { CornerLink } from '@/components/CornerLink'

import styles from './location.module.css'
import { latLonToVector3, locations } from '@/data/location-data'
import { useGatekeeper } from '@/hooks/useGatekeeper'

// --- 3D Components ---

// A single pulsating location node
function LocationNode({ position, type, onHover }) {
  const [isHovered, setIsHovered] = useState(false)
  const color = type === 'home' ? '#00ff9d' : '#ff47a6'

  return (
    <mesh
      position={position}
      onPointerOver={(e) => {
        e.stopPropagation()
        setIsHovered(true)
        onHover(true)
      }}
      onPointerOut={() => {
        setIsHovered(false)
        onHover(false)
      }}
    >
      <sphereGeometry args={[isHovered ? 0.08 : 0.05, 16, 16]} />
      <meshStandardMaterial color={color} emissive={color} emissiveIntensity={isHovered ? 5 : 2} toneMapped={false} />
    </mesh>
  )
}

// The main globe and all the nodes
function World({ onHoverLocation }) {
  const mapTexture = useLoader(TextureLoader, '/textures/world-dots.png') // You'll need to find a dot-matrix world map texture
  const GLOBE_RADIUS = 3

  return (
    <>
      <ambientLight intensity={0.2} />
      <directionalLight position={[5, 5, 5]} intensity={1} />
      {/* <mesh rotation-y={-Math.PI / 2}> */}
      <mesh rotation-y={-1.3}>
        <sphereGeometry args={[GLOBE_RADIUS, 64, 64]} />
        <meshStandardMaterial alphaMap={mapTexture} emissive="#00ff9d" emissiveIntensity={0.8} transparent={true} opacity={0.7} depthWrite={false} />
      </mesh>
      {locations.map((loc) => (
        <LocationNode key={loc.id} position={latLonToVector3(loc.coordinates[0], loc.coordinates[1], GLOBE_RADIUS)} type={loc.type} onHover={(isHovering) => onHoverLocation(isHovering ? loc : null)} />
      ))}
    </>
  )
}

// --- Main Page Component ---

export default function LocationPage() {
  useGatekeeper('/location')
  const [hoveredLocation, setHoveredLocation] = useState(null)
  const homeLocation = locations.find((l) => l.type === 'home')
  const displayLocation = hoveredLocation || homeLocation
  const grantPermission = useAudioStore((state) => state.grantPermission)

  return (
    <div className={styles.wrapper}>
      {/* 2D Information Panel */}
      <div className={styles.infoPanel}>
        <div className={styles.panelSection}>
          <h2>OPERATIONAL RANGE</h2>
          <p>Global relocation candidate. Ready to engage targets worldwide.</p>
        </div>
        <div className={styles.panelSection}>
          <h3>HOME BASE</h3>
          <p className={styles.locationName}>{homeLocation.name}</p>
          <p className={styles.statusOnline}>{homeLocation.status}</p>
        </div>
        <div className={styles.panelSection}>
          <h3>TARGET LOCK</h3>
          <p className={styles.locationName}>{displayLocation.name}</p>
          <p className={displayLocation.type === 'home' ? styles.statusOnline : styles.statusWarning}>{displayLocation.status}</p>
        </div>
      </div>

      {/* 3D Canvas */}
      <div className={styles.canvasContainer}>
        <Canvas camera={{ position: [0, 0, 7], fov: 50 }}>
          <Stars count={2000} fade />
          <World onHoverLocation={setHoveredLocation} />
          <OrbitControls enableZoom={false} enablePan={false} autoRotate autoRotateSpeed={0.5} />
        </Canvas>
      </div>

      <CornerLink href="/dev-history" position="bottom-left" label="Timeline" />
      <CornerLink href="/finale" position="bottom-right" label="Finale" onNavigateStart={grantPermission} />
    </div>
  )
}
