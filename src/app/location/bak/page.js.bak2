'use client'

import { useEffect, useState } from 'react'
import { ComposableMap, Geographies, Geography, Line, Marker } from 'react-simple-maps'

import { CornerLink } from '@/components/CornerLink'

// Or your preferred nav component
import styles from './location.module.css'
import { useAudioStore } from '@/stores/audioStore'

const geoUrl = '/world.json' // The GeoJSON file we created
// const geoUrl = '/sea_map.json'

// const targetCountries = ['HKG', 'TWN', 'SGP', 'AUS', 'JPN', 'KOR', 'GBR', 'USA', 'CAN', 'DNK',
//     'SWE', 'FIN', 'FRA', 'ARE', 'DEU', 'IRL', 'NLD', 'DNK', 'NOR', 'CHE', 'ESP', 'ITA', 'NZL']
const targetCountries = [
  // Asia-Pacific
  'HKG',
  'TWN',
  'SGP',
  'AUS',
  'JPN',
  'KOR',
  'NZL',
  // Europe
  'GBR',
  'DNK',
  'SWE',
  'FIN',
  'FRA',
  'DEU',
  'IRL',
  'NLD',
  'NOR',
  'CHE',
  'ESP',
  'ITA',
  // North America
  'USA',
  'CAN',
  // Middle East
  'ARE',
]
const homeCountry = 'MYS'

const countryStyles = {
  default: { fill: '#2C2C2C', stroke: '#555555', strokeWidth: 0.5, outline: 'none' },
  hover: { fill: '#00FF9D', stroke: '#00FF9D', strokeWidth: 0.75, outline: 'none' },
  pressed: { fill: '#00FF9D', stroke: '#00FF9D', outline: 'none' },
}

const MAGNIFIER_SIZE = 200 // The diameter of our magnifying glass in pixels

export default function LocationPage() {
  const [tooltipContent, setTooltipContent] = useState('')
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 })
  const grantPermission = useAudioStore((state) => state.grantPermission)
  const [magnifierPosition, setMagnifierPosition] = useState({ x: 0, y: 0 })
  const [isMagnifierVisible, setIsMagnifierVisible] = useState(false)

  // const handleMouseMove = (e) => {
  //   setTooltipPosition({ x: e.clientX, y: e.clientY })
  // }
  const handleMouseMove = (e) => {
    // We get the position of the map container itself to make the coordinates relative
    const rect = e.currentTarget.getBoundingClientRect()
    setMagnifierPosition({
      x: e.clientX - rect.left,
      y: e.clientY - rect.top,
    })
  }

  return (
    <div className={styles.wrapper} onMouseMove={handleMouseMove}>
      <div className={styles.header}>
        <h1>Global Relocation Availability</h1>
        <p>Ready to engage worldwide. Visa sponsorship required for all locations outside of Malaysia.</p>
      </div>

      <ComposableMap
        // projection="geoConicEqualArea"
        projectionConfig={{ scale: 160, center: [0, 0] }}
        // projectionConfig={{
        //   rotate: [-122, -0, 0],
        //   scale: 320,
        // }}
        className={styles.map}
      >
        <Geographies geography={geoUrl}>
          {({ geographies }) =>
            geographies.map((geo) => {
              const isTarget = targetCountries.includes(geo.properties.iso_a3)
              const isHome = geo.properties.iso_a3 === homeCountry

              let style = { ...countryStyles.default }
              if (isHome) style.fill = '#FFC300'
              if (isTarget) style.fill = 'rgba(0, 255, 157, 0.2)'

              return (
                <Geography
                  key={geo.rsmKey}
                  geography={geo}
                  style={{ default: style, hover: countryStyles.hover, pressed: countryStyles.pressed }}
                  onMouseEnter={() => {
                    if (isTarget) setTooltipContent(`${geo.properties.name} - Visa Sponsorship Required`)
                    if (isHome) setTooltipContent(`${geo.properties.name} - Home Base (No Sponsorship)`)
                  }}
                  onMouseLeave={() => setTooltipContent('')}
                />
              )
            })
          }
        </Geographies>
        <Marker coordinates={[101.97, 4.21]}>
          <circle r={1} fill="#FF0000" stroke="#f00" strokeWidth={1} />
        </Marker>
      </ComposableMap>

      {tooltipContent && (
        <div style={{ left: tooltipPosition.x + 15, top: tooltipPosition.y + 15 }} className={styles.tooltip}>
          {tooltipContent}
        </div>
      )}

      <CornerLink href="/dev-history" position="bottom-left" label="Timeline" />
      <CornerLink href="/finale" position="bottom-right" label="Finale" onNavigateStart={grantPermission} />
    </div>
  )
}
