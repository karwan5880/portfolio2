// data/finale-stream-data.js

const createCodeBlock = (title, code) => ({ type: 'multi-column', columns: [{ title, code }] })

export const finaleStream = {
  main_theme: [
    { type: 'thought', content: 'The journey is the reward.' },
    { type: 'thought', content: 'For every "no", a new line of code.' },
    { type: 'thought', content: 'Failure is not an exception. It is a core library.' },
    { type: 'thought', content: 'There is a profound beauty in a system that works.' },
    { type: 'thought', content: 'Solve the problem, then write the code.' },
    { type: 'thought', content: 'The journey is the reward.' },
    { type: 'thought', content: 'For every "no", a new line of code.' },
    { type: 'thought', content: 'There’s always one more bug hiding where you least expect.' },
    { type: 'thought', content: 'Great engineers are great explainers.' },
    { type: 'comment-kt', content: '// Everything can be an extension function.' },
    { type: 'comment-ex', content: '# Processes everywhere, and not a thread in sight.' },
    { type: 'comment-ex', content: '# Pattern matching is life.' },
    { type: 'comment-scala', content: '// Implicits giveth, implicits taketh away.' },
    { type: 'comment-scala', content: '// Functional or object-oriented? Yes.' },
    { type: 'comment-ipynb', content: '# Cells cells cells… everywhere.' },
    { type: 'comment-ipynb', content: '# Restart kernel, pray harder.' },
    { type: 'comment-emacs', content: ';; A text editor. And an operating system.' },
    { type: 'comment-emacs', content: ';; The pinky strain is real.' },
    { type: 'comment-js', content: '// 99% of time waiting for Webpack to build.' },
    { type: 'comment-js', content: '// Module not found: again.' },
    { type: 'comment-js', content: '// Ask only what you need. Get everything anyway.' },
    { type: 'comment-js', content: '// Queries, mutations, and frustration.' },
    { type: 'comment-c', content: '/* Here be dragons. */' },
    { type: 'comment-py', content: '# Tensors don’t lie. But shapes sometimes do.' },
    { type: 'comment-py', content: '# CUDA or CPU? That is the eternal question.' },
    { type: 'comment-py', content: '# Beware of in-place operations.' },
    { type: 'comment-py', content: '# Sessions, graphs, and a bit of magic.' },
    { type: 'comment-py', content: '# Eager execution is a blessing and a curse.' },
    { type: 'comment-py', content: '# Shapes, ranks, and broadcasting: fight me.' },
    { type: 'comment-dart', content: '// Hot reload saves lives.' },
    { type: 'comment-dart', content: '// Everything is a widget. Even your frustration.' },
    { type: 'comment-dart', content: '// The widget tree is your friend… and your foe.' },
    { type: 'comment-gd', content: '# Signals connect us all.' },
    { type: 'comment-gd', content: '# Nodes, scenes, and dreams.' },
    { type: 'comment-gd', content: '# Export variables: pure magic.' },
    { type: 'comment-sh', content: '# One bad quote breaks the world.' },
    { type: 'comment-sh', content: '# Never run scripts you don’t understand.' },
    { type: 'comment-js', content: '// Perfection is a direction, not a destination.' },
    { type: 'code-line', content: 'printf("Hello from C\\n");' },
    { type: 'code-line', content: 'ls | grep "config"' },
    { type: 'code-line', content: 'poetry add numpy' },
    { type: 'code-line', content: 'rails generate scaffold Post title:string body:text' },
    { type: 'code-line', content: 'php artisan migrate' },
    { type: 'code-line', content: 'swift build' },
    { type: 'code-line', content: 'kotlinc Hello.kt -include-runtime -d Hello.jar' },
    { type: 'code-line', content: 'elixir my_script.exs' },
    { type: 'code-line', content: 'scala my_program.scala' },
    { type: 'code-line', content: 'brew install nginx' },
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),
  ],
  // Theme for your "Winter" Song - Calm, poetic, elegant code
  snow: [
    { type: 'thought', content: 'Simplicity is the ultimate sophistication.' },
    { type: 'thought', content: 'Sleep. Wake up. Code. Eat. Repeat. ' },
    { type: 'thought', content: 'The journey is the reward.' },
    { type: 'thought', content: 'The journey is the reward.' },
    { type: 'thought', content: 'The best way to predict the future is to build it.' },
    { type: 'thought', content: 'An investment in knowledge pays the best interest.' },
    { type: 'thought', content: 'Code is poetry.' },
    { type: 'thought', content: 'Every master was once a disaster.' },
    { type: 'thought', content: 'Failure is not an exception. It is a core library.' },
    { type: 'comment-c', content: "/* Don't try to understand this part, just accept it. */" },
    { type: 'comment-python', content: '# Deep learning: when you want to throw a lot of math at a problem.' },
    { type: 'comment-solidity', content: '// Beware of reentrancy here!' },
    { type: 'comment-julia', content: '# This function is highly optimized for scientific computing.' },
    { type: 'comment-csharp', content: '// TODO: Implement proper error handling instead of just throwing.' },
    { type: 'comment-lua', content: '-- The simplest solutions are often the best.' },
    { type: 'comment-kotlin', content: '// Another day, another null pointer exception avoided.' },
    { type: 'comment-cpp', content: "// This function is self-documenting. If you can't read it, that's on you." },
    { type: 'comment-cs', content: '// TODO: Add more magic here.' },
    { type: 'comment-dart', content: '// For my sanity, do not refactor this file without me.' },
    { type: 'comment-gdscript', content: '# Warning: May cause existential dread.' },
    { type: 'comment-matlab', content: "% It's not a bug, it's an undocumented feature." },
    { type: 'comment-py', content: '# Code is poetry.' },
    { type: 'comment-sh', content: '# First, do it. Then, do it right. Then, do it better.' },
    { type: 'comment-js', content: '// Perfection is a direction, not a destination.' },
    { type: 'comment-py', content: '# The cost of knowledge is effort; the reward is creation.' },
    { type: 'comment-c', content: '/* Undefined behavior is a feature, not a bug. */' },
    { type: 'comment-c', content: '/* One pointer to rule them all. */' },
    { type: 'comment-c', content: '/* Brace yourself. */' },
    { type: 'comment-c', content: '/* Every bug is a lesson in disguise. */' },
    { type: 'comment-py', content: '# This part is magic. Do not touch.' },
    { type: 'comment-c', content: '/* Here be dragons. */' },
    { type: 'comment-js', content: '// Perfection is a direction, not a destination.' },
    { type: 'comment-py', content: '# The cost of knowledge is effort; the reward is creation.' },
    { type: 'code-line', content: 'geth attach ipc:///path/to/geth.ipc' },
    { type: 'code-line', content: 'jupyter notebook' },
    { type: 'code-line', content: 'ghidra /path/to/binary' },
    { type: 'code-line', content: 'valgrind --leak-check=yes ./my_program' },
    { type: 'code-line', content: 'npm install web3' },
    { type: 'code-line', content: 'pip install scipy matplotlib jupyter' },
    { type: 'code-line', content: 'apk add --no-cache radare2' },
    { type: 'code-line', content: 'g++ solution.cpp -o solution' },
    { type: 'code-line', content: 'python -c "import solution; print(solution.twoSum([2,7,11,15], 9))"' },
    { type: 'code-line', content: 'node -e "const sol = require(\'./solution.js\'); console.log(sol.reverseList(null));"' },
    { type: 'code-line', content: 'gcc -o solution solution.c' },
    { type: 'code-line', content: 'npm test -- --grep "Two Sum"' },
    { type: 'code-line', content: 'pytest test_solution.py' },
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    // ... more elegant, simple snippets
  ],
  // Theme for your "Energy" Song - Complex, chaotic, powerful code
  thunder: [
    { type: 'thought', content: 'The best code is no code.' },
    { type: 'thought', content: "Debuggers don't fix bugs, they find them. You fix them." },
    { type: 'thought', content: 'Measure twice, cut once. Code twice, test once.' },
    { type: 'thought', content: 'If you optimize everything, you will always be unhappy.' },
    { type: 'thought', content: 'Code is like humor. When you have to explain it, it’s bad.' },
    { type: 'thought', content: 'Failure is not an exception. It is a core library.' },
    { type: 'thought', content: 'Simplicity is the ultimate sophistication.' },
    { type: 'thought', content: 'Good code is its own best documentation.' },
    { type: 'thought', content: 'The screen is a canvas.' },
    { type: 'thought', content: 'The obstacle is the path.' },
    { type: 'thought', content: 'For every "no", a new line of code.' },
    { type: 'thought', content: 'Failure is not an exception. It is a core library.' },
    { type: 'thought', content: 'There is a profound beauty in a system that works.' },
    { type: 'thought', content: 'Solve the problem, then write the code.' },
    { type: 'thought', content: 'Simplicity is the ultimate sophistication.' },
    { type: 'thought', content: 'Good code is its own best documentation.' },
    { type: 'thought', content: 'The only constant in software is change... and bugs.' },
    { type: 'thought', content: 'Premature optimization is the root of all evil (or at least most of it).' },
    { type: 'thought', content: 'Good artists copy, great artists steal (and then refactor).' },
    { type: 'thought', content: "If you automate your job away, you've done it right." },
    { type: 'comment-cs', content: '// Everything inherits from MonoBehaviour. Deal with it.' },
    { type: 'comment-cs', content: '// Inspector overrides all your code.' },
    { type: 'comment-cpp', content: '// Blueprints everywhere. C++ somewhere.' },
    { type: 'comment-cpp', content: '// Unreal is real. Crashes are more real.' },
    { type: 'comment-yml', content: '# Idempotency is happiness.' },
    { type: 'comment-yml', content: '# YAML spacing wars begin here.' },
    { type: 'comment-py', content: '# Fast enough to make Django nervous.' },
    { type: 'comment-py', content: '# Type hints or bust.' },
    { type: 'comment-js', content: '// Actions, reducers, and tears.' },
    { type: 'comment-js', content: '// Single source of truth. Infinite sources of bugs.' },
    { type: 'comment-wasm', content: ';; The browser is my runtime now.' },
    { type: 'comment-wasm', content: ';; From C to web. What could go wrong?' },
    { type: 'comment-md', content: '<!-- Everything is a list. -->' },
    { type: 'comment-md', content: '<!-- Tables: beautiful in theory, painful in practice. -->' },
    { type: 'comment-yml', content: '# Helm charts and heartbreak.' },
    { type: 'comment-yml', content: '# Values files are never enough.' },
    { type: 'comment-sol', content: '// Gas fees remind me life is short.' },
    { type: 'comment-sol', content: '// Decentralized until the DAO votes otherwise.' },
    { type: 'comment-qc', content: '// Qubits exist in superposition… until your code runs.' },
    { type: 'comment-qc', content: '// Entanglement is fun. Debugging it isn’t.' },
    { type: 'comment-shell', content: '# When in doubt, reboot.' },
    { type: 'comment-powershell', content: "# This script is my life's work. Handle with care." },
    { type: 'comment-perl', content: '# Just enough Perl to be dangerous.' },
    { type: 'comment-fortran', content: 'C This loop goes to 11.' },
    { type: 'comment-lisp', content: "; One more parenthesis won't hurt, right?" },
    { type: 'comment-js', content: '// This part is magic. Do not touch.' },
    { type: 'comment-c', content: '/* Here be dragons. */' },
    { type: 'comment-js', content: '// Sometimes I believe the compiler ignores all my comments.' },
    { type: 'comment-js', content: '// When in doubt, console.log it out.' },
    { type: 'comment-js', content: '// Async today, gone tomorrow.' },
    { type: 'comment-js', content: '// This is fine. Probably.' },
    { type: 'code-line', content: 'python -m venv .venv' },
    { type: 'code-line', content: 'mv old_project new_project' },
    { type: 'code-line', content: 'cat /dev/urandom | head -c 1000 | base64' },
    { type: 'code-line', content: 'git push origin main --force' },
    { type: 'code-line', content: 'git commit -m "Refactor entire universe"' },
    { type: 'code-line', content: 'sudo apt-get update && sudo apt-get upgrade -y' },
    { type: 'code-line', content: 'make && ./run_simulation' },
    { type: 'code-line', content: '$ echo "Hello, World"' },
    { type: 'code-line', content: '>>> print("Still building...")' },
    { type: 'code-line', content: 'git commit -m "Refactor entire universe"' },
    { type: 'code-line', content: 'sudo apt-get update && sudo apt-get upgrade -y' },
    { type: 'code-line', content: 'make && ./run_simulation' },
    { type: 'code-line', content: 'const a = 42;' },
    { type: 'code-line', content: 'mvn clean install -DskipTests' },
    { type: 'code-line', content: 'npm audit fix --force' },
    { type: 'code-line', content: 'yarn add react-router-dom' },
    { type: 'code-line', content: 'docker stop $(docker ps -aq)' },
    { type: 'code-line', content: 'gcloud compute instances start my-instance' },
    { type: 'code-line', content: 'julia myscript.jl' },
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),
    // ... more complex, modern snippets
  ],
  lightning: [
    { type: 'thought', content: 'Every bug starts as a feature request.' },
    { type: 'thought', content: 'Reading code is harder than writing it. That’s why we write so much.' },
    { type: 'thought', content: 'Good tools save bad days.' },
    { type: 'thought', content: 'Software rots. Keep refactoring.' },
    { type: 'comment-sh', content: '# In scripts we trust.' },
    { type: 'comment-sh', content: '# Here be dragons and dollar signs.' },
    { type: 'comment-sh', content: '# Good luck debugging this pipeline.' },
    { type: 'comment-sh', content: '# Shell scripts age like milk.' },
    { type: 'comment-bat', content: ':: DOS commands from the stone age.' },
    { type: 'comment-bat', content: ':: One % too few, and all hell breaks loose.' },
    { type: 'comment-ps1', content: '# Everything is an object. Until it isn’t.' },
    { type: 'comment-ps1', content: '# Verb-Noun forever.' },
    { type: 'comment-vim', content: '" Just one more hjkl...' },
    { type: 'comment-vim', content: '" :wq or :q! — the eternal dilemma.' },
    { type: 'comment-vim', content: '" :q is not an exit. It’s a lifestyle."' },
    { type: 'comment-rs', content: '// Ownership is freedom. And pain.' },
    { type: 'comment-rs', content: '// Fearless concurrency. Fearful compiler.' },
    { type: 'comment-cpp', content: '// Templates inside templates inside templates.' },
    { type: 'comment-cpp', content: '// Undefined behavior loves surprises.' },
    { type: 'comment-docker', content: '# It worked on my machine. Now it works in yours.' },
    { type: 'code-line', content: 'yarn create next-app myproject' },
    { type: 'code-line', content: 'ls -lah' },
    { type: 'code-line', content: 'kubectl get pods --all-namespaces' },
    { type: 'code-line', content: 'const a = 42;' },
    { type: 'code-line', content: 'rm -rf / --no-preserve-root' },
    { type: 'code-line', content: 'npm install' },
    { type: 'code-line', content: 'cargo run' },
    { type: 'code-line', content: 'SELECT * FROM users WHERE clueless > 0;' },
    { type: 'code-line', content: 'git push origin main --force' },
    { type: 'code-line', content: 'ls -R | grep TODO' },
    { type: 'code-line', content: 'Start-Process notepad.exe' },
    { type: 'code-line', content: 'vim -u NONE' },
    { type: 'code-line', content: 'cargo fmt' },
    { type: 'code-line', content: 'docker build -t myapp .' },
    { type: 'code-line', content: 'kubectl describe pod my-pod' },
    { type: 'code-line', content: 'git rebase -i HEAD~5' },
    { type: 'code-line', content: 'go mod tidy' },
    { type: 'code-line', content: 'npm audit fix' },
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),
  ],

  // A default theme for any other songs
  default_theme: [
    { type: 'thought', content: 'Still building.' },
    { type: 'comment-sh', content: '# To be or not to be...' },
  ],
}

const allCodeSnippets = finaleStream['main_theme'] // Or your combined pool
  .filter((item) => item.type === 'multi-column')
  .flatMap((block) => block.columns)

export const getRandomCodeSnippet = () => {
  // This function is now incredibly fast. It just picks one from the pre-processed list.
  return allCodeSnippets[Math.floor(Math.random() * allCodeSnippets.length)]
}
