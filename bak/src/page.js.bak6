'use client'

import { useEffect, useState } from 'react'
import { ComposableMap, Geographies, Geography, Marker } from 'react-simple-maps'

import { CornerLink } from '@/components/CornerLink'
import { LocationModal } from '@/components/LocationModal'

import styles from './location.module.css'

const targetLocations = [
  { id: 'MYS', name: 'Malaysia', image: '/images/locations/malaysia.png', status: 'Home Base (No Sponsorship Required)' },
  { id: 'SGP', name: 'Singapore', image: '/images/locations/singapore.png', status: 'Visa Sponsorship Required' },
  { id: 'HKG', name: 'Hong Kong', image: '/images/locations/hongkong.png', status: 'Visa Sponsorship Required' },
  { id: 'JPN', name: 'Japan', image: '/images/locations/japan.png', status: 'Visa Sponsorship Required' },
  { id: 'KOR', name: 'South Korea', image: '/images/locations/korea.png', status: 'Visa Sponsorship Required' },
  { id: 'TWN', name: 'Taiwan', image: '/images/locations/taiwan.png', status: 'Visa Sponsorship Required' },
  // Add more here...
]
const targetCountryCodes = targetLocations.map((loc) => loc.id)

const worldGeoUrl = '/world.json' // We'll use the 50m world.json
const seaGeoUrl = '/sea_10m.json'

// --- Define our two "camera" settings ---
const worldProjectionConfig = {
  scale: 160,
  center: [0, 0],
}

const seaProjectionConfig = {
  scale: 800, // Zoomed in
  center: [118, 15], // Centered on SE Asia
}

// --- Define our target countries ---
// const targetCountries = ['HKG', 'TWN', 'SGP', 'AUS', 'JPN', 'GBR', 'USA', 'CAN', 'DNK', 'SWE', 'FIN', 'FRA', 'NOR']
const targetCountries = [
  // Asia-Pacific
  'HKG',
  'TWN',
  'SGP',
  'AUS',
  'JPN',
  'KOR',
  'NZL',
  // Europe
  'GBR',
  'DNK',
  'SWE',
  'FIN',
  'FRA',
  'DEU',
  'IRL',
  'NLD',
  'NOR',
  'CHE',
  'ESP',
  'ITA',
  // North America
  'USA',
  'CAN',
  // Middle East
  'ARE',
]
const homeCountry = 'MYS'

const countryStyles = {
  default: { fill: '#2C2C2C', stroke: '#555555', strokeWidth: 0.5, outline: 'none' },
  hover: { fill: '#00FF9D', stroke: '#00FF9D', strokeWidth: 0.75, outline: 'none' },
  pressed: { fill: '#00FF9D', stroke: '#00FF9D', outline: 'none' },
}

export default function LocationPage() {
  const [tooltipContent, setTooltipContent] = useState('')
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 })
  const [activeLocationIndex, setActiveLocationIndex] = useState(null)

  // --- NEW: State to control the current map view ---
  const [view, setView] = useState('WORLD') // 'WORLD' or 'SEA'
  const [geoData, setGeoData] = useState(null)
  const grantPermission = useAudioStore((state) => state.grantPermission)

  useEffect(() => {
    const url = view === 'WORLD' ? worldGeoUrl : seaGeoUrl
    fetch(url)
      .then((res) => res.json())
      .then((data) => {
        setGeoData(data)
      })
  }, [view]) // This effect re-runs whenever the 'view' state changes

  const handleOpenModal = (geoId) => {
    const index = targetLocations.findIndex((loc) => loc.id === geoId)
    if (index !== -1) {
      setActiveLocationIndex(index)
    }
  }

  const handleCloseModal = () => {
    setActiveLocationIndex(null)
  }

  const handleNextLocation = () => {
    if (activeLocationIndex !== null) {
      setActiveLocationIndex((prevIndex) => (prevIndex + 1) % targetLocations.length)
    }
  }

  const handlePrevLocation = () => {
    if (activeLocationIndex !== null) {
      setActiveLocationIndex((prevIndex) => (prevIndex - 1 + targetLocations.length) % targetLocations.length)
    }
  }
  const handleMouseMove = (e) => {
    setTooltipPosition({ x: e.clientX, y: e.clientY })
  }

  // --- NEW: Function to toggle the view state ---
  const toggleView = () => {
    setView((currentView) => (currentView === 'WORLD' ? 'SEA' : 'WORLD'))
  }

  // Don't render anything until the initial map data has loaded
  if (!geoData) {
    return <div className={styles.loading}>Loading Map...</div>
  }

  return (
    <div className={styles.wrapper} onMouseMove={handleMouseMove}>
      <div className={styles.header}>
        {/* The header can also be dynamic based on the view */}
        {/* <h1>{view === 'WORLD' ? 'Global Relocation Availability' : 'Target Region: Asia-Pacific'}</h1> */}
        {/* <p>Ready to engage worldwide. Visa sponsorship required for all locations outside of Malaysia.</p> */}
        {/* <h1>{view === 'WORLD' ? 'Global Relocation Availability' : 'Target Region: Asia-Pacific'}</h1> */}
        {/* <p>Ready to engage worldwide. Visa sponsorship required for all locations outside of Malaysia.</p> */}
        <h1>Relocation Availability</h1>
        <p>Currently based in Malaysia. Open to opportunities in key global tech hubs.</p>
      </div>

      {/* Adding a key prop that changes with the view forces React to
          re-mount the component, which prevents weird zooming/panning bugs. */}
      <ComposableMap key={view} projectionConfig={view === 'WORLD' ? worldProjectionConfig : seaProjectionConfig} className={styles.map}>
        {/* <Geographies geography={worldGeoUrl}> */}
        <Geographies geography={geoData}>
          {({ geographies }) =>
            geographies.map((geo) => {
              const geoId = geo.properties.iso_a3

              const isTarget = targetCountries.includes(geo.properties.iso_a3)
              const isHome = geo.properties.iso_a3 === homeCountry

              let style = { ...countryStyles.default }
              // In SEA view, we can make non-target countries even more subtle
              if (view === 'SEA') {
                style.fill = '#1a1a1a'
                style.stroke = '#444'
              }
              if (isHome) style.fill = '#FFC300'
              if (isTarget) style.fill = 'rgba(0, 255, 157, 0.2)'

              return (
                <Geography
                  key={geo.rsmKey}
                  geography={geo}
                  onMouseEnter={() => {
                    if (isTarget) setTooltipContent(`${geo.properties.name} - Visa Sponsorship Required`)
                    if (isHome) setTooltipContent(`${geo.properties.name} - Home Base (Legal To Work)`)
                  }}
                  onMouseLeave={() => setTooltipContent('')}
                  onClick={() => isTarget && handleOpenModal(geoId)}
                  // style={{ default: style, hover: countryStyles.hover, pressed: countryStyles.pressed }}
                  style={{
                    default: {
                      fill: isTarget ? 'rgba(0, 255, 157, 0.4)' : '#2C2C2C',
                      stroke: '#555555',
                      strokeWidth: 0.5,
                      outline: 'none',
                    },
                    hover: {
                      fill: isTarget ? '#00FF9D' : '#3a3a3a',
                      outline: 'none',
                    },
                    pressed: {
                      fill: isTarget ? '#00FF9D' : '#2C2C2C',
                      outline: 'none',
                    },
                  }}
                />
              )
            })
          }
        </Geographies>
        <Marker coordinates={[101.97, 4.21]}>
          <circle r={view === 'WORLD' ? 1 : 1} fill="#FF0000" stroke="#f00" strokeWidth={view === 'WORLD' ? 1 : 0.5} />
        </Marker>
      </ComposableMap>

      {tooltipContent && (
        <div style={{ left: tooltipPosition.x + 15, top: tooltipPosition.y + 15 }} className={styles.tooltip}>
          {tooltipContent}
        </div>
      )}

      {/* --- NEW: The Toggle Button --- */}
      {/* <button className={styles.toggleButton} onClick={toggleView}>
        {view === 'WORLD' ? 'SEA' : 'World'}
      </button> */}

      <CornerLink href="/dev-history" position="bottom-left" label="Timeline" />
      <CornerLink href="/finale" position="bottom-right" label="Finale" onNavigateStart={grantPermission} />
      <LocationModal isOpen={activeLocationIndex !== null} onClose={handleCloseModal} onNext={handleNextLocation} onPrev={handlePrevLocation} location={activeLocationIndex !== null ? targetLocations[activeLocationIndex] : null} />
    </div>
  )
}
