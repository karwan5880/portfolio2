// data/finale-stream-data.js

const createCodeBlock = (title, code) => ({ type: 'multi-column', columns: [{ title, code }] })

export const finaleStream = {
  main_theme: [
    { type: 'thought', content: 'The journey is the reward.' },
    { type: 'thought', content: 'For every "no", a new line of code.' },
    { type: 'thought', content: 'Failure is not an exception. It is a core library.' },
    { type: 'thought', content: 'There is a profound beauty in a system that works.' },
    { type: 'thought', content: 'Solve the problem, then write the code.' },
    { type: 'thought', content: 'The journey is the reward.' },
    { type: 'thought', content: 'For every "no", a new line of code.' },
    { type: 'thought', content: 'There’s always one more bug hiding where you least expect.' },
    { type: 'thought', content: 'Great engineers are great explainers.' },
    { type: 'thought', content: 'Good architecture is invisible until it breaks.' },
    { type: 'thought', content: 'The best code is the code you never have to write.' },
    { type: 'thought', content: 'Start simple. Then simplify further.' },
    { type: 'thought', content: 'Premature optimization is the temptation of the clever.' },
    { type: 'thought', content: 'Refactoring is a love letter to your future self.' },
    { type: 'thought', content: 'Trust the compiler, but verify the output.' },
    { type: 'thought', content: 'Documentation is the soul of the codebase.' },
    { type: 'thought', content: 'Clean code is kindness made visible.' },
    { type: 'thought', content: 'Writing code is easy. Naming things is the hard part.' },
    { type: 'thought', content: 'Tests are love letters to your future self.' },
    { type: 'thought', content: 'Every “quick hack” becomes permanent.' },
    { type: 'thought', content: 'Code reviews teach patience. And humility.' },
    { type: 'thought', content: 'Measure twice, deploy once.' },
    { type: 'comment-rb', content: '# Everything is an object. Even nothing.' },
    { type: 'comment-rb', content: '# Rails makes magic. And mysteries.' },
    { type: 'comment-php', content: '// $_POST your dreams away.' },
    { type: 'comment-php', content: '// Here be dragons and dollar signs.' },
    { type: 'comment-swift', content: '// Optionals are both friend and foe.' },
    { type: 'comment-swift', content: '// Protocols are power.' },
    { type: 'comment-kt', content: '// Null safety or bust.' },
    { type: 'comment-kt', content: '// Everything can be an extension function.' },
    { type: 'comment-ex', content: '# Processes everywhere, and not a thread in sight.' },
    { type: 'comment-ex', content: '# Pattern matching is life.' },
    { type: 'comment-scala', content: '// Implicits giveth, implicits taketh away.' },
    { type: 'comment-scala', content: '// Functional or object-oriented? Yes.' },
    { type: 'comment-ipynb', content: '# Cells cells cells… everywhere.' },
    { type: 'comment-ipynb', content: '# Restart kernel, pray harder.' },
    { type: 'comment-emacs', content: ';; A text editor. And an operating system.' },
    { type: 'comment-emacs', content: ';; The pinky strain is real.' },
    { type: 'comment-js', content: '// 99% of time waiting for Webpack to build.' },
    { type: 'comment-js', content: '// Module not found: again.' },
    { type: 'comment-js', content: '// Ask only what you need. Get everything anyway.' },
    { type: 'comment-js', content: '// Queries, mutations, and frustration.' },
    { type: 'comment-c', content: '/* Here be dragons. */' },
    { type: 'comment-py', content: '# Tensors don’t lie. But shapes sometimes do.' },
    { type: 'comment-py', content: '# CUDA or CPU? That is the eternal question.' },
    { type: 'comment-py', content: '# Beware of in-place operations.' },
    { type: 'comment-py', content: '# Sessions, graphs, and a bit of magic.' },
    { type: 'comment-py', content: '# Eager execution is a blessing and a curse.' },
    { type: 'comment-py', content: '# Shapes, ranks, and broadcasting: fight me.' },
    { type: 'comment-dart', content: '// Hot reload saves lives.' },
    { type: 'comment-dart', content: '// Everything is a widget. Even your frustration.' },
    { type: 'comment-dart', content: '// The widget tree is your friend… and your foe.' },
    { type: 'comment-gd', content: '# Signals connect us all.' },
    { type: 'comment-gd', content: '# Nodes, scenes, and dreams.' },
    { type: 'comment-gd', content: '# Export variables: pure magic.' },
    { type: 'comment-sh', content: '# One bad quote breaks the world.' },
    { type: 'comment-sh', content: '# Never run scripts you don’t understand.' },
    { type: 'comment-js', content: '// Perfection is a direction, not a destination.' },
    { type: 'comment-py', content: '# The cost of knowledge is effort; the reward is creation.' },
    { type: 'comment-c', content: '/* Every bug is a lesson in disguise. */' },
    { type: 'comment-asm', content: '; The shortest path is rarely the most scenic.' },
    { type: 'comment-asm', content: '; The shortest path is rarely the most scenic.' },
    { type: 'comment-sh', content: '# First, do it. Then, do it right. Then, do it better.' },
    { type: 'comment-js', content: '// TODO: Figure out the meaning of it all.' },
    { type: 'code-line', content: 'make && ./run_simulation' },
    { type: 'code-line', content: '$ echo "Hello, World"' },
    { type: 'code-line', content: '>>> print("Still building...")' },
    { type: 'code-line', content: 'grep -r "the_bug" .' },
    { type: 'code-line', content: 'git push origin main --force' },
    { type: 'code-line', content: '$ echo "Hello, World"' },
    { type: 'code-line', content: '>>> print("Still building...")' },
    { type: 'code-line', content: 'git commit -m "Refactor entire universe"' },
    { type: 'code-line', content: 'sudo apt-get update && sudo apt-get upgrade -y' },
    { type: 'code-line', content: 'make && ./run_simulation' },
    { type: 'code-line', content: 'const a = 42;' },
    { type: 'code-line', content: 'grep -r "the_bug" .' },
    { type: 'code-line', content: 'git push origin main --force' },
    { type: 'code-line', content: 'while(true) { suffer(); }' },
    { type: 'code-line', content: 'torch.randn(3, 3).cuda()' },
    { type: 'code-line', content: 'tf.keras.Model.compile(optimizer="adam", loss="mse")' },
    { type: 'code-line', content: 'flutter run' },
    { type: 'code-line', content: 'godot -e' },
    { type: 'code-line', content: 'cargo build --release' },
    { type: 'code-line', content: 'git stash save "Work in progress"' },
    { type: 'code-line', content: 'npm install -g typescript' },
    { type: 'code-line', content: 'printf("Hello from C\\n");' },
    { type: 'code-line', content: 'ls | grep "config"' },
    { type: 'code-line', content: 'poetry add numpy' },
    { type: 'code-line', content: 'rails generate scaffold Post title:string body:text' },
    { type: 'code-line', content: 'php artisan migrate' },
    { type: 'code-line', content: 'swift build' },
    { type: 'code-line', content: 'kotlinc Hello.kt -include-runtime -d Hello.jar' },
    { type: 'code-line', content: 'elixir my_script.exs' },
    { type: 'code-line', content: 'scala my_program.scala' },
    { type: 'code-line', content: 'brew install nginx' },
    { type: 'code-line', content: 'terraform apply' },
    { type: 'code-line', content: 'ansible-playbook deploy.yml' },
    { type: 'code-line', content: 'jupyter notebook' },
    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),

    createCodeBlock('RUBY METHOD', `def greet(name)\n  puts "Hello, #{name}!"\nend`),
    createCodeBlock('PHP FUNCTION', `<?php\nfunction greet($name) {\n  echo "Hello, $name!";\n}`),
    createCodeBlock('SWIFT FUNCTION', `func greet(name: String) {\n  print("Hello, \\(name)!")\n}`),
    createCodeBlock('KOTLIN FUNCTION', `fun greet(name: String) {\n  println("Hello, $name!")\n}`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule Greeter do\n  def greet(name) do\n    IO.puts("Hello, #{name}!")\n  end\nend`),
    createCodeBlock('SCALA FUNCTION', `object Hello {\n  def greet(name: String): Unit = {\n    println(s"Hello, $name!")\n  }\n}`),
    createCodeBlock('JUPYTER CELL', `# Cell 1\nimport numpy as np\nnp.zeros((3,3))`),
    createCodeBlock('EMACS LISP', `(defun greet (name)\n  (message "Hello, %s!" name))`),
    createCodeBlock('GRAPHQL QUERY', `query GetUsers {\n  users {\n    id\n    name\n  }\n}`),
    createCodeBlock('TERRAFORM CONFIG', `resource "aws_s3_bucket" "b" {\n  bucket = "my-tf-test-bucket"\n}`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: Text('Hello Flutter')),\n        body: Center(child: Text('Still building...')),\n      ),\n    );\n  }\n}`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len...`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    // ... more classic, powerful codecreateCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),

    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),

    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),
  ],
  // Theme for your "Winter" Song - Calm, poetic, elegant code
  snow: [
    { type: 'thought', content: 'Simplicity is the ultimate sophistication.' },
    { type: 'thought', content: 'Sleep. Wake up. Code. Eat. Repeat. ' },
    { type: 'thought', content: 'The journey is the reward.' },
    { type: 'thought', content: 'The journey is the reward.' },
    { type: 'thought', content: 'The best way to predict the future is to build it.' },
    { type: 'thought', content: 'An investment in knowledge pays the best interest.' },
    { type: 'thought', content: 'Code is poetry.' },
    { type: 'thought', content: 'Every master was once a disaster.' },
    { type: 'thought', content: 'Failure is not an exception. It is a core library.' },
    { type: 'thought', content: 'There is a profound beauty in a system that works.' },
    { type: 'thought', content: 'Solve the problem, then write the code.' },
    { type: 'thought', content: 'Complexity grows; clarity must grow faster.' },
    { type: 'thought', content: 'Your bugs are your teachers.' },
    { type: 'thought', content: 'Perfect code does not exist. Strive anyway.' },
    { type: 'thought', content: 'Elegance emerges when you delete the unnecessary.' },
    { type: 'thought', content: 'Code is poetry. Maintenance is prose.' },
    { type: 'thought', content: 'The compiler is not your enemy. It’s your strictest friend.' },
    { type: 'thought', content: 'Trust in tests, but verify with curiosity.' },
    { type: 'thought', content: 'Great software solves real problems, not imaginary ones.' },
    { type: 'thought', content: 'Write code as if the next person maintaining it knows kung fu and is angry.' },
    { type: 'thought', content: 'Every abstraction leaks. Know where.' },
    { type: 'thought', content: 'The only way to learn a new language is to write bad code in it.' },
    { type: 'thought', content: 'If it compiles, ship it! (Just kidding... mostly.)' },
    { type: 'thought', content: 'A good programmer is someone who always looks both ways before crossing a one-way street.' },
    { type: 'thought', content: 'Documentation is a love letter that you write to your future self.' },
    { type: 'thought', content: 'There are only two hard things in computer science: cache invalidation, naming things, and off-by-one errors.' },
    { type: 'thought', content: 'The commit message is the last bastion of true communication.' },
    { type: 'thought', content: "If you never break production, you're not trying hard enough." },
    { type: 'thought', content: 'Automate everything, then automate the automation.' },
    { type: 'thought', content: 'A keyboard is not a weapon, but it can be used to destroy a codebase.' },
    { type: 'thought', content: 'Coffee is the fuel of debugging.' },
    { type: 'thought', content: 'The compiler is your friend, but the linker is a demanding partner.' },
    { type: 'thought', content: 'If you want to go fast, go alone. If you want to go far, go together (and use version control).' },
    { type: 'thought', content: 'Every line of code you write is a liability.' },
    { type: 'thought', content: 'The hardest part of debugging is knowing when to stop.' },
    { type: 'thought', content: 'Legacy code is just code that works.' },
    { type: 'thought', content: 'The best way to predict the future is to implement it.' },
    { type: 'thought', content: 'The first solution is usually not the optimal one.' },
    { type: 'thought', content: 'Edge cases are where the real bugs hide.' },
    { type: 'thought', content: 'Big O notation: Your best friend for understanding performance.' },
    { type: 'thought', content: 'Sometimes, drawing it out on paper saves hours of coding.' },
    { type: 'thought', content: 'Recursion is elegant, but iteration is often faster and safer.' },
    { type: 'comment-c', content: '/* Two Sum: Iterate and hash. */' },
    { type: 'comment-cpp', content: '// Reverse Linked List: Pointers, pointers everywhere.' },
    { type: 'comment-py', content: '# Valid Parentheses: Stack-based approach.' },
    { type: 'comment-js', content: '// Merge Two Sorted Lists: Handle nulls carefully.' },
    { type: 'comment-csharp', content: '// Palindrome Number: Convert to string or math it out.' },
    { type: 'comment-cs', content: '// This is where the magic happens (and probably the bugs).' },
    { type: 'comment-kt', content: "// Remember: conciseness doesn't always mean clarity." },
    { type: 'comment-solidity', content: '// Verify this contract with great care before deployment.' },
    { type: 'comment-julia', content: '# Performance critical section, do not touch without benchmarking.' },
    { type: 'comment-assembly', content: "; NOP slide for obfuscation. Don't ask." },
    { type: 'comment-c', content: "/* Don't try to understand this part, just accept it. */" },
    { type: 'comment-python', content: '# Deep learning: when you want to throw a lot of math at a problem.' },
    { type: 'comment-solidity', content: '// Beware of reentrancy here!' },
    { type: 'comment-julia', content: '# This function is highly optimized for scientific computing.' },
    { type: 'comment-csharp', content: '// TODO: Implement proper error handling instead of just throwing.' },
    { type: 'comment-lua', content: '-- The simplest solutions are often the best.' },
    { type: 'comment-kotlin', content: '// Another day, another null pointer exception avoided.' },
    { type: 'comment-cpp', content: "// This function is self-documenting. If you can't read it, that's on you." },
    { type: 'comment-cs', content: '// TODO: Add more magic here.' },
    { type: 'comment-dart', content: '// For my sanity, do not refactor this file without me.' },
    { type: 'comment-gdscript', content: '# Warning: May cause existential dread.' },
    { type: 'comment-matlab', content: "% It's not a bug, it's an undocumented feature." },
    { type: 'comment-py', content: '# Code is poetry.' },
    { type: 'comment-sh', content: '# First, do it. Then, do it right. Then, do it better.' },
    { type: 'comment-js', content: '// Perfection is a direction, not a destination.' },
    { type: 'comment-py', content: '# The cost of knowledge is effort; the reward is creation.' },
    { type: 'comment-c', content: '/* Undefined behavior is a feature, not a bug. */' },
    { type: 'comment-c', content: '/* One pointer to rule them all. */' },
    { type: 'comment-c', content: '/* Brace yourself. */' },
    { type: 'comment-c', content: '/* Every bug is a lesson in disguise. */' },
    { type: 'comment-py', content: '# This part is magic. Do not touch.' },
    { type: 'comment-c', content: '/* Here be dragons. */' },
    { type: 'comment-js', content: '// Perfection is a direction, not a destination.' },
    { type: 'comment-py', content: '# The cost of knowledge is effort; the reward is creation.' },
    { type: 'code-line', content: 'export const getAnswer = () => 42;' },
    { type: 'code-line', content: '1. e4 e5 2. Nf3 Nc6 3. Bb5' },
    { type: 'code-line', content: 'public static void main(String[] args)' },
    { type: 'code-line', content: 'Exception e = new Exception("Something bad happened");' },
    { type: 'code-line', content: 'console.log(`The time is ${new Date()}`)' },
    { type: 'code-line', content: '[...new Set(array)]' },
    { type: 'code-line', content: 'process.exit(1);' },
    { type: 'code-line', content: 'pip install pandas numpy scikit-learn matplotlib' },
    { type: 'code-line', content: 'git rebase -i HEAD~3' },
    { type: 'code-line', content: 'flutter run --debug' },
    { type: 'code-line', content: 'godot --editor --project-path .' },
    { type: 'code-line', content: 'tensorboard --logdir runs' },
    { type: 'code-line', content: "ssh user@your_server 'sudo systemctl restart nginx'" },
    { type: 'code-line', content: 'truffle migrate --reset' },
    { type: 'code-line', content: 'Pkg.add("DataFrames")' },
    { type: 'code-line', content: 'dotnet run --project MyWebApp' },
    { type: 'code-line', content: 'npm install -g @angular/cli' },
    { type: 'code-line', content: 'mix phx.server' },
    { type: 'code-line', content: 'gradle build' },
    { type: 'code-line', content: 'unity -batchmode -nographics -quit -projectPath . -executeMethod BuildScript.PerformBuild' },
    { type: 'code-line', content: 'kotlin Main.kt' },
    { type: 'code-line', content: 'geth attach ipc:///path/to/geth.ipc' },
    { type: 'code-line', content: 'jupyter notebook' },
    { type: 'code-line', content: 'ghidra /path/to/binary' },
    { type: 'code-line', content: 'valgrind --leak-check=yes ./my_program' },
    { type: 'code-line', content: 'npm install web3' },
    { type: 'code-line', content: 'pip install scipy matplotlib jupyter' },
    { type: 'code-line', content: 'apk add --no-cache radare2' },
    { type: 'code-line', content: 'g++ solution.cpp -o solution' },
    { type: 'code-line', content: 'python -c "import solution; print(solution.twoSum([2,7,11,15], 9))"' },
    { type: 'code-line', content: 'node -e "const sol = require(\'./solution.js\'); console.log(sol.reverseList(null));"' },
    { type: 'code-line', content: 'gcc -o solution solution.c' },
    { type: 'code-line', content: 'npm test -- --grep "Two Sum"' },
    { type: 'code-line', content: 'pytest test_solution.py' },
    createCodeBlock('LEETCODE: TWO SUM (C)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, and free'd by the caller.\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result; // Should not reach here for valid inputs\n}`),
    createCodeBlock('LEETCODE: TWO SUM (C++)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> numMap;\n        for (int i = 0; i < nums.size(); ++i) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n        return {}; // Should not reach here for valid inputs\n    }\n};`),
    createCodeBlock('LEETCODE: TWO SUM (PYTHON)', `# LeetCode Problem: Two Sum\n# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nclass Solution:\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_map:\n                return [num_map[complement], i]\n            num_map[num] = i\n        return [] # Should not reach here for valid inputs`),
    createCodeBlock('LEETCODE: TWO SUM (JAVASCRIPT)', `// LeetCode Problem: Two Sum\n// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i];\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not reach here for valid inputs\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n#include <stddef.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head){\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    struct ListNode* next_node = NULL;\n\n    while (current != NULL) {\n        next_node = current->next;\n        current->next = prev;\n        prev = current;\n        current = next_node;\n    }\n    return prev;\n}`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (C++)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        \n        while (current != nullptr) {\n            ListNode* nextTemp = current->next;\n            current->next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (PYTHON)', `# LeetCode Problem: Reverse Linked List\n# Given the head of a singly linked list, reverse the list, and return the reversed list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        current = head\n        while current:\n            next_temp = current.next\n            current.next = prev\n            prev = current\n            current = next_temp\n        return prev`),
    createCodeBlock('LEETCODE: REVERSE LINKED LIST (JAVASCRIPT)', `// LeetCode Problem: Reverse Linked List\n// Given the head of a singly linked list, reverse the list, and return the reversed list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    let prev = null;\n    let current = head;\n\n    while (current !== null) {\n        let nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    return prev;\n};`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (PYTHON)', `# LeetCode Problem: Valid Parentheses\n# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", "}": "{", "]": "["}\n\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n\n        return not stack`),
    createCodeBlock('LEETCODE: VALID PARENTHESES (JAVASCRIPT)', `// LeetCode Problem: Valid Parentheses\n// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    const stack = [];\n    const mapping = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (mapping[char]) { // If it's a closing bracket\n            const topElement = stack.length ? stack.pop() : '#';\n            if (mapping[char] !== topElement) {\n                return false;\n            }\n        } else { // If it's an opening bracket\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('UNITY SCRIPT (RAYCASTING)', `using UnityEngine;\n\npublic class RaycastDetector : MonoBehaviour\n{\n    public LayerMask hitLayers;\n    public float rayLength = 10f;\n\n    void Update()\n    {\n        // Draw a debug ray in the editor\n        Debug.DrawRay(transform.position, transform.forward * rayLength, Color.red);\n\n        // Perform the raycast\n        RaycastHit hit;\n        if (Physics.Raycast(transform.position, transform.forward, out hit, rayLength, hitLayers))\n        {\n            Debug.Log("Hit: " + hit.collider.name);\n            // You can do something with the hit object here\n        }\n    }\n}`),
    createCodeBlock('KOTLIN DATA CLASS & COLLECTIONS', `data class User(val id: Int, val name: String, val email: String? = null)\n\nfun main() {\n    val users = listOf(\n        User(1, "Alice", "alice@example.com"),\n        User(2, "Bob"),\n        User(3, "Charlie", "charlie@example.com"),\n        User(4, "David")\n    )\n\n    // Filter users with email and map to their names\n    val usersWithEmail = users.filter { it.email != null }.map { it.name }\n    println("Users with email: $usersWithEmail") // Output: [Alice, Charlie]\n\n    // Find a user by ID\n    val user2 = users.find { it.id == 2 }\n    println("User 2: \${user2?.name}") // Output: Bob\n}`),
    createCodeBlock('ETHEREUM SMART CONTRACT (ERC-20)', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    // Optional: Add custom functions here like burning or pausing\n}`),
    createCodeBlock('JULIA NUMERICAL INTEGRATION', `using QuadGK\n\n# Define the function to integrate\nf(x) = sin(x) / x\n\n# Integrate f(x) from 0.0 to pi\nintegral_result, err = quadgk(f, 0.0, pi, rtol=1e-8)\n\nprintln("Integral of sin(x)/x from 0 to pi:")\nprintln("Result: ", integral_result)\nprintln("Estimated error: ", err)`),
    createCodeBlock('PYTHON REVERSE ENGINEERING (WITH SCAPY)', `from scapy.all import *\n\ndef packet_callback(packet):\n    if packet.haslayer(TCP):\n        print(f"TCP Packet: {packet[IP].src}:{packet[TCP].sport} -> {packet[IP].dst}:{packet[TCP].dport}")\n        if packet.haslayer(Raw):\n            print("  Raw Data: " + packet[Raw].load.hex())\n    elif packet.haslayer(UDP):\n        print(f"UDP Packet: {packet[IP].src}:{packet[UDP].sport} -> {packet[IP].dst}:{packet[UDP].dport}")\n\n# Sniff packets on the 'eth0' interface (or 'Wi-Fi' on Windows/macOS)\n# Requires root/admin privileges\nprint("Starting packet sniff...")\nsniff(prn=packet_callback, filter="ip", count=10) # Sniff 10 IP packets`),
    createCodeBlock('SWIFT UI (IOS APP)', `import SwiftUI\n\nstruct ContentView: View {\n    @State private var toggleIsOn: Bool = false\n\n    var body: some View {\n        VStack {\n            Text(toggleIsOn ? "Toggle is ON" : "Toggle is OFF")\n                .font(.largeTitle)\n                .padding()\n\n            Toggle(isOn: $toggleIsOn) {\n                Text("Enable Feature")\n            }\n            .padding()\n            .tint(.green)\n\n            Spacer()\n\n            Button("Reset Toggle") {\n                toggleIsOn = false\n            }\n            .buttonStyle(.borderedProminent)\n            .tint(.red)\n        }\n    }\n}\n\n// To preview in Xcode:\n// struct ContentView_Previews: PreviewProvider {\n//     static var previews: some View {\n//         ContentView()\n//     }\n// }`),
    createCodeBlock('GOLANG CONCURRENCY (CHANNELS)', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc producer(ch chan<- int) {\n\tfor i := 0; i < 5; i++ {\n\t\tch <- i // Send value to channel\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tclose(ch) // Close the channel when done\n}\n\nfunc consumer(ch <-chan int) {\n\tfor val := range ch { // Receive values from channel until closed\n\t\tfmt.Printf("Received: %d\\n", val)\n\t}\n\tfmt.Println("Consumer finished.")\n}\n\nfunc main() {\n\tmyChannel := make(chan int)\n\n\tgo producer(myChannel)\n\tconsumer(myChannel)\n\n\tfmt.Println("Main routine finished.")\n}`),
    createCodeBlock('R LANGUAGE (STATISTICAL MODEL)', `\n# Sample data\ndata <- data.frame(\n  x = 1:10,\n  y = c(2.1, 4.0, 5.9, 8.1, 10.0, 12.2, 14.0, 16.1, 18.0, 20.2)\n)\n\n# Fit a linear model (simple regression)\nmodel <- lm(y ~ x, data = data)\n\n# Print summary of the model\nprint(summary(model))\n\n# Predict new values\nnew_data <- data.frame(x = c(11, 12))\npredictions <- predict(model, newdata = new_data)\n\nprint("Predictions for new data:")\nprint(predictions)`),
    createCodeBlock('ASSEMBLY (X86-64 LINUX SYSCALL)', `section .data\n    msg db "Hello, syscall world!", 0xa\n    len equ $ - msg\n\nsection .text\n    global _start\n\n_start:\n    ; write(STDOUT_FILENO, msg, len)\n    mov rax, 1             ; sys_write\n    mov rdi, 1             ; STDOUT_FILENO\n    lea rsi, [msg]         ; address of msg\n    mov rdx, len           ; length of msg\n    syscall\n\n    ; exit(0)\n    mov rax, 60            ; sys_exit\n    mov rdi, 0             ; exit code 0\n    syscall`),
    createCodeBlock('SOLIDITY SMART CONTRACT', `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 public storedData;\n\n    function set(uint256 x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint256) {\n        return storedData;\n    }\n}`),
    createCodeBlock('JULIA DATA MANIPULATION', `using DataFrames, CSV\n\n# Create a DataFrame\ndf = DataFrame(Name = ["Alice", "Bob", "Charlie"], Age = [25, 30, 35], City = ["NYC", "LA", "Chicago"])\n\n# Filter rows where Age is greater than 28\nfiltered_df = filter(row -> row.Age > 28, df)\n\n# Select specific columns\nselected_df = select(df, :Name, :Age)\n\nprintln("Original DataFrame:")\nprintln(df)\nprintln("\\nFiltered DataFrame:")\nprintln(filtered_df)\nprintln("\\nSelected DataFrame:")\nprintln(selected_df)`),
    createCodeBlock('C# UNITY SCRIPT', `using UnityEngine;\nusing System.Collections;\n\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5f;\n    public float jumpForce = 10f;\n\n    private Rigidbody2D rb;\n\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n\n    void Update()\n    {\n        // Horizontal movement\n        float moveInput = Input.GetAxis("Horizontal");\n        rb.velocity = new Vector2(moveInput * speed, rb.velocity.y);\n\n        // Jumping\n        if (Input.GetButtonDown("Jump"))\n        {\n            rb.velocity = new Vector2(rb.velocity.x, jumpForce);\n        }\n    }\n}`),
    createCodeBlock('ANGULAR COMPONENT (TYPESCRIPT)', `import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.css']\n})\nexport class HelloComponent implements OnInit {\n  message: string;\n\n  constructor() { \n    this.message = 'Hello from Angular!';\n  }\n\n  ngOnInit(): void {\n    console.log('HelloComponent initialized!');\n  }\n\n  changeMessage(newMessage: string): void {\n    this.message = newMessage;\n  }\n}`),
    createCodeBlock('RUST MACRO', `macro_rules! my_vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $( temp_vec.push($x); )*\n            temp_vec\n        }\n    };\n}\n\n// Usage:\n// let v = my_vec![1, 2, 3];\n// println!("{:?}", v); // Prints: [1, 2, 3]`),
    createCodeBlock('LUA GAME SCRIPT (LOVE2D)', `function love.load()\n    playerX = love.graphics.getWidth() / 2\n    playerY = love.graphics.getHeight() / 2\n    playerSpeed = 100\nend\n\nfunction love.update(dt)\n    if love.keyboard.isDown("d") then\n        playerX = playerX + playerSpeed * dt\n    end\n    if love.keyboard.isDown("a") then\n        playerX = playerX - playerSpeed * dt\n    end\n    if love.keyboard.isDown("w") then\n        playerY = playerY - playerSpeed * dt\n    end\n    if love.keyboard.isDown("s") then\n        playerY = playerY + playerSpeed * dt\n    end\nend\n\nfunction love.draw()\n    love.graphics.print("Move with WASD!", 10, 10)\n    love.graphics.circle("fill", playerX, playerY, 20)\nend`),
    createCodeBlock('KOTLIN ANDROID ACTIVITY', `package com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var clickCountTextView: TextView\n    private lateinit var clickButton: Button\n    private var count = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        clickCountTextView = findViewById(R.id.clickCountTextView)\n        clickButton = findViewById(R.id.clickButton)\n\n        updateClickCountText()\n\n        clickButton.setOnClickListener {\n            count++\n            updateClickCountText()\n        }\n    }\n\n    private fun updateClickCountText() {\n        clickCountTextView.text = "Clicks: $count"\n    }\n}`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass SimpleNet(nn.Module):\n    def __init__(self):\n        super(SimpleNet, self).__init__()\n        self.fc = nn.Linear(10, 1)\n\n    def forward(self, x):\n        return self.fc(x)\n\nmodel = SimpleNet()\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Dummy data\ninputs = torch.randn(100, 10)\ntargets = torch.randn(100, 1)\n\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/100], Loss: {loss.item():.4f}')`),
    createCodeBlock('TENSORFLOW KERAS MODEL', `import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple sequential model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dropout(0.5),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Dummy data (e.g., from MNIST)\nimport numpy as np\n(x_train, y_train), (x_test, y_test) = (np.random.rand(60000, 784), np.random.randint(0,10,60000)), (np.random.rand(10000, 784), np.random.randint(0,10,10000))\n\n# Train the model\n# model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_test, y_test))`),
    createCodeBlock('FLUTTER WIDGET', `import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('My Flutter App'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'Hello from Flutter!',\n                style: TextStyle(fontSize: 24),\n              ),\n              SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: () {\n                  // Add button functionality here\n                  print('Button pressed!');\n                },\n                child: Text('Press Me'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}`),
    createCodeBlock('GODOT SCRIPT (GDScript)', `# Godot GDScript\nextends Node2D\n\nvar speed = 100\n\nfunc _process(delta):\n    var velocity = Vector2.ZERO\n    if Input.is_action_pressed("ui_right"):\n        velocity.x += 1\n    if Input.is_action_pressed("ui_left"):\n        velocity.x -= 1\n    if Input.is_action_pressed("ui_down"):\n        velocity.y += 1\n    if Input.is_action_pressed("ui_up"):\n        velocity.y -= 1\n\n    if velocity.length() > 0:\n        velocity = velocity.normalized() * speed\n\n    position += velocity * delta\n\nfunc _ready():\n    print("Game started!")`),
    createCodeBlock('JAVA SPRING BOOT REST CONTROLLER', `import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GreetingController {\n\n    @GetMapping("/greeting")\n    public String greeting(@RequestParam(value = "name", defaultValue = "World") String name) {\n        return String.format("Hello, %s!", name);\n    }\n}`),
    createCodeBlock('REACT FUNCTIONAL COMPONENT', `import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \`You clicked \${count} times\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;`),
    createCodeBlock('R DATA MANIPULATION', `library(dplyr)\n\ndata <- data.frame(\n  id = 1:5,\n  name = c("Alice", "Bob", "Charlie", "David", "Eve"),\n  score = c(85, 92, 78, 95, 88)\n)\n\n# Filter for scores above 90 and select name and score\nfiltered_data <- data %>%\n  filter(score > 90) %>%\n  select(name, score)\n\nprint(filtered_data)`),
    createCodeBlock('C++ TEMPLATE CLASS', `template <typename T>\nclass MyStack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    void push(T const& elem) {\n        elements.push_back(elem);\n    }\n\n    void pop() {\n        if (elements.empty()) {\n            throw std::out_of_range("pop on empty stack");\n        }\n        elements.pop_back();\n    }\n\n    T const& top() const {\n        if (elements.empty()) {\n            throw std::out_of_range("top on empty stack");\n        }\n        return elements.back();\n    }\n\n    bool empty() const {\n        return elements.empty();\n    }\n};\n\n// Usage example:\n// MyStack<int> intStack;\n// intStack.push(10);`),
    createCodeBlock('PHP ARRAY MANIPULATION', `<?php\n\n$fruits = ["apple", "banana", "cherry"];\n\n// Add an element\n$fruits[] = "date";\n\n// Iterate and print\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\n// Associative array\n$person = [\n    "name" => "John Doe",\n    "age" => 30,\n    "city" => "New York"\n];\n\necho $person["name"] . " is " . $person["age"] . " years old.\\n";\n\n?>`),
    createCodeBlock('TYPESCRIPT FUNCTION', `function greet(name: string): string {\n  return \`Hello, \${name}!\`;\n}\n\nconsole.log(greet("World"));`),
    createCodeBlock('SQL GROUP BY', `SELECT language, COUNT(*) as num_repos\nFROM repositories\nGROUP BY language\nORDER BY num_repos DESC;`),
    createCodeBlock('GODOT GDSCRIPT', `extends Node\n\nfunc _ready():\n    print("Hello from Godot!")\n\nfunc _process(delta):\n    # Game logic goes here\n    pass`),
    createCodeBlock('TENSORFLOW SEQUENTIAL', `import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n  def wrapper(*args, **kwargs):...`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nclass Node {\npublic:\n  T data;\n  Node* next;\n\n  Node(T val) : data(val), next(nullptr) {}\n};`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON NUMPY', `import numpy as np\n\ndef process_data(arr):\n  mean = np.mean(arr)\n  std_dev = np.std(arr)\n  return (arr - mean) / std_dev`),
    createCodeBlock('REACT HOOK', `const useViewport = () => {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { width };\n}`),
    createCodeBlock('WINRT C++/WINRT', `// WINRT\n#include <winrt/Windows.Foundation.h>\n\nusing namespace winrt;\nusing namespace Windows::Foundation;\n\nIAsyncAction main() {\n  // CoInitialize / Uninitialize RAII\n  apartment_context-apartment;\n  // ...\n}`),
    createCodeBlock('SQL JOIN', `SELECT \n  u.id, u.name, p.post_title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.signup_date > '2023-01-01';`),
    createCodeBlock('X86 ASSEMBLY', `SECTION .text\n  global _start\n\n_start:\n  mov edx, len\n  mov ecx, msg\n  mov ebx, 1\n  mov eax, 4\n  int 0x80`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1; // s1 is moved to s2\n\n  // println!("{}, world!", s1); // This would fail!\n  println!("{}, world!", s2);\n}`),
    createCodeBlock('DOCKERFILE', `FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["python", "main.py"]`),
    // ... more elegant, simple snippets
  ],
  // Theme for your "Energy" Song - Complex, chaotic, powerful code
  thunder: [
    { type: 'thought', content: 'The best code is no code.' },
    { type: 'thought', content: "Debuggers don't fix bugs, they find them. You fix them." },
    { type: 'thought', content: 'Measure twice, cut once. Code twice, test once.' },
    { type: 'thought', content: 'If you optimize everything, you will always be unhappy.' },
    { type: 'thought', content: 'Code is like humor. When you have to explain it, it’s bad.' },
    { type: 'thought', content: 'Failure is not an exception. It is a core library.' },
    { type: 'thought', content: 'Simplicity is the ultimate sophistication.' },
    { type: 'thought', content: 'Good code is its own best documentation.' },
    { type: 'thought', content: 'The screen is a canvas.' },
    { type: 'thought', content: 'The obstacle is the path.' },
    { type: 'thought', content: 'For every "no", a new line of code.' },
    { type: 'thought', content: 'Failure is not an exception. It is a core library.' },
    { type: 'thought', content: 'There is a profound beauty in a system that works.' },
    { type: 'thought', content: 'Solve the problem, then write the code.' },
    { type: 'thought', content: 'Simplicity is the ultimate sophistication.' },
    { type: 'thought', content: 'Good code is its own best documentation.' },
    { type: 'thought', content: 'The only constant in software is change... and bugs.' },
    { type: 'thought', content: 'Premature optimization is the root of all evil (or at least most of it).' },
    { type: 'thought', content: 'Good artists copy, great artists steal (and then refactor).' },
    { type: 'thought', content: "If you automate your job away, you've done it right." },
    { type: 'thought', content: 'Code reviews: where bugs go to die, or multiply.' },
    { type: 'code-line', content: 'az group create --name MyResourceGroup --location eastus' },
    { type: 'thought', content: 'Code without empathy becomes legacy without mercy.' },
    { type: 'thought', content: 'Don’t fear deleting code. Fear keeping it.' },
    { type: 'thought', content: 'Always be curious. Especially when it compiles without warnings.' },
    { type: 'thought', content: 'A few minutes of planning saves hours of debugging.' },
    { type: 'thought', content: 'The terminal is both sword and shield.' },
    { type: 'comment-jl', content: '# Performance matters. Type annotations matter more.' },
    { type: 'comment-jl', content: '# Multiple dispatch is my superpower.' },
    { type: 'comment-pl', content: '# There’s more than one way to do it.' },
    { type: 'comment-pl', content: '# Welcome to the land of sigils and chaos.' },
    { type: 'comment-hs', content: '-- Pure functions, pure bliss.' },
    { type: 'comment-hs', content: '-- Monads explained: eventually.' },
    { type: 'comment-cs', content: '// Everything inherits from MonoBehaviour. Deal with it.' },
    { type: 'comment-cs', content: '// Inspector overrides all your code.' },
    { type: 'comment-cpp', content: '// Blueprints everywhere. C++ somewhere.' },
    { type: 'comment-cpp', content: '// Unreal is real. Crashes are more real.' },
    { type: 'comment-yml', content: '# Idempotency is happiness.' },
    { type: 'comment-yml', content: '# YAML spacing wars begin here.' },
    { type: 'comment-py', content: '# Fast enough to make Django nervous.' },
    { type: 'comment-py', content: '# Type hints or bust.' },
    { type: 'comment-js', content: '// Actions, reducers, and tears.' },
    { type: 'comment-js', content: '// Single source of truth. Infinite sources of bugs.' },
    { type: 'comment-wasm', content: ';; The browser is my runtime now.' },
    { type: 'comment-wasm', content: ';; From C to web. What could go wrong?' },
    { type: 'comment-md', content: '<!-- Everything is a list. -->' },
    { type: 'comment-md', content: '<!-- Tables: beautiful in theory, painful in practice. -->' },
    { type: 'comment-yml', content: '# Helm charts and heartbreak.' },
    { type: 'comment-yml', content: '# Values files are never enough.' },
    { type: 'comment-sol', content: '// Gas fees remind me life is short.' },
    { type: 'comment-sol', content: '// Decentralized until the DAO votes otherwise.' },
    { type: 'comment-qc', content: '// Qubits exist in superposition… until your code runs.' },
    { type: 'comment-qc', content: '// Entanglement is fun. Debugging it isn’t.' },
    { type: 'comment-shell', content: '# When in doubt, reboot.' },
    { type: 'comment-powershell', content: "# This script is my life's work. Handle with care." },
    { type: 'comment-perl', content: '# Just enough Perl to be dangerous.' },
    { type: 'comment-fortran', content: 'C This loop goes to 11.' },
    { type: 'comment-lisp', content: "; One more parenthesis won't hurt, right?" },
    { type: 'comment-js', content: '// This part is magic. Do not touch.' },
    { type: 'comment-c', content: '/* Here be dragons. */' },
    { type: 'comment-js', content: '// Sometimes I believe the compiler ignores all my comments.' },
    { type: 'comment-js', content: '// When in doubt, console.log it out.' },
    { type: 'comment-js', content: '// Async today, gone tomorrow.' },
    { type: 'comment-js', content: '// This is fine. Probably.' },
    { type: 'comment-c', content: '/* TODO: Refactor this into a singularity. */' },
    { type: 'comment-js', content: '// This function is a tribute to spaghetti.' },
    { type: 'comment-py', content: '# Future self, please forgive this code.' },
    { type: 'comment-asm', content: '; Optimizing for readability, not speed.' },
    { type: 'comment-sh', content: "# Don't touch this. It works." },
    { type: 'comment-java', content: '// Sometimes, the best solution is to just go to bed.' },
    { type: 'comment-html', content: '' },
    { type: 'comment-py', content: '# When I wrote this, only God and I understood what I was doing. Now, only God knows.' },
    { type: 'comment-c', content: '/* I am not responsible for this code. I am merely its caretaker. */' },
    { type: 'comment-asm', content: '; I dedicate all this code to my wife, Neit Irlem Eey, who will have to support me and our three children and the dog once it gets released into the public.', secret: true },
    { type: 'comment-sh', content: "# This script, when run, will solve all of life's problems. If not, please submit a bug report." },
    { type: 'comment-js', content: "// I'm sorry." },
    { type: 'comment-py', content: "# If you're reading this, you are stuck in the same loop I was." },
    { type: 'comment-c', content: '/* You are not expected to understand this. */' },
    { type: 'comment-asm', content: '; This is where the fun begins.' },
    { type: 'comment-sh', content: '# To be or not to be, that is the question. This script answers "to be".' },
    { type: 'comment-js', content: '// Fallthrough intended.' },
    { type: 'comment-py', content: '# It works on my machine.' },
    { type: 'comment-py', content: '# Life is short. Import this.' },
    { type: 'comment-py', content: '# If it works, it works.' },
    { type: 'comment-py', content: '# Readability counts.' },
    { type: 'code-line', content: 'npm install --save-dev eslint' },
    { type: 'code-line', content: 'docker-compose up -d --build' },
    { type: 'code-line', content: 'kubectl get pods --all-namespaces' },
    { type: 'code-line', content: 'python -m venv .venv' },
    { type: 'code-line', content: 'mv old_project new_project' },
    { type: 'code-line', content: 'cat /dev/urandom | head -c 1000 | base64' },
    { type: 'code-line', content: 'git push origin main --force' },
    { type: 'code-line', content: 'git commit -m "Refactor entire universe"' },
    { type: 'code-line', content: 'sudo apt-get update && sudo apt-get upgrade -y' },
    { type: 'code-line', content: 'make && ./run_simulation' },
    { type: 'code-line', content: '$ echo "Hello, World"' },
    { type: 'code-line', content: '>>> print("Still building...")' },
    { type: 'code-line', content: 'git commit -m "Refactor entire universe"' },
    { type: 'code-line', content: 'sudo apt-get update && sudo apt-get upgrade -y' },
    { type: 'code-line', content: 'make && ./run_simulation' },
    { type: 'code-line', content: 'const a = 42;' },
    { type: 'code-line', content: 'mvn clean install -DskipTests' },
    { type: 'code-line', content: 'npm audit fix --force' },
    { type: 'code-line', content: 'yarn add react-router-dom' },
    { type: 'code-line', content: 'docker stop $(docker ps -aq)' },
    { type: 'code-line', content: 'gcloud compute instances start my-instance' },
    { type: 'code-line', content: 'julia myscript.jl' },
    { type: 'code-line', content: 'perl -e "print qq{Hello, Perl!\\n};"' },
    { type: 'code-line', content: 'ghci myfile.hs' },
    { type: 'code-line', content: 'dotnet build' },
    { type: 'code-line', content: 'ansible-playbook deploy.yml --check' },
    { type: 'code-line', content: 'fastapi run app:app' },
    { type: 'code-line', content: 'npx create-react-app myapp' },
    { type: 'code-line', content: 'wasm-pack build' },
    { type: 'code-line', content: 'helm install myapp ./chart' },
    { type: 'code-line', content: 'solc --optimize MyContract.sol' },
    { type: 'code-line', content: 'qiskit run my_script.py' },
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n#include <stdlib.h>\n\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n\n    struct ListNode* head;\n    if (l1->val < l2->val) {\n        head = l1;\n        l1 = l1->next;\n    } else {\n        head = l2;\n        l2 = l2->next;\n    }\n    \n    struct ListNode* current = head;\n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val < l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    if (l1 != NULL) {\n        current->next = l1;\n    } else if (l2 != NULL) {\n        current->next = l2;\n    }\n    return head;\n}`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (C++)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n\n        ListNode dummy(0);\n        ListNode* tail = &dummy;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n\n        if (l1) {\n            tail->next = l1;\n        } else if (l2) {\n            tail->next = l2;\n        }\n\n        return dummy.next;\n    }\n};`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (PYTHON)', `# LeetCode Problem: Merge Two Sorted Lists\n# Merge two sorted linked lists and return it as a sorted list.\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = ListNode()\n        current = dummy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n\n        if l1:\n            current.next = l1\n        elif l2:\n            current.next = l2\n        \n        return dummy.next`),
    createCodeBlock('LEETCODE: MERGE TWO SORTED LISTS (JAVASCRIPT)', `// LeetCode Problem: Merge Two Sorted Lists\n// Merge two sorted linked lists and return it as a sorted list.\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n * this.val = (val===undefined ? 0 : val)\n * this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    let head;\n    if (l1.val < l2.val) {\n        head = l1;\n        l1 = l1.next;\n    } else {\n        head = l2;\n        l2 = l2.next;\n    }\n    \n    let current = head;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n\n    if (l1) {\n        current.next = l1;\n    } else if (l2) {\n        current.next = l2;\n    }\n\n    return head;\n};`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (PYTHON)', `# LeetCode Problem: Longest Common Prefix\n# Write a function to find the longest common prefix string amongst an array of strings.\nclass Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        if not strs: return ""\n\n        prefix = strs[0]\n        for i in range(1, len(strs)):\n            while strs[i].find(prefix) != 0:\n                prefix = prefix[:-1] # Shorten prefix by one character\n                if not prefix: return ""\n        return prefix`),
    createCodeBlock('LEETCODE: LONGEST COMMON PREFIX (JAVASCRIPT)', `// LeetCode Problem: Longest Common Prefix\n// Write a function to find the longest common prefix string amongst an array of strings.\n/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    if (!strs || strs.length === 0) {\n        return "";\n    }\n\n    let prefix = strs[0];\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === "") {\n                return "";\n            }\n        }\n    }\n    return prefix;\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (C++)', `// LeetCode Problem: Valid Palindrome\n// Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        std::string cleaned_s;\n        for (char c : s) {\n            if (isalnum(c)) {\n                cleaned_s += tolower(c);\n            }\n        }\n\n        std::string reversed_s = cleaned_s;\n        std::reverse(reversed_s.begin(), reversed_s.end());\n\n        return cleaned_s == reversed_s;\n    }\n};`),
    createCodeBlock('LEETCODE: VALID PALINDROME (PYTHON)', `# LeetCode Problem: Valid Palindrome\n# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        return cleaned_s == cleaned_s[::-1]`),
    createCodeBlock('JULIA FUNCTION', `function greet(name)\n  println("Hello, $name!")\nend`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nprint "Hello from Perl!\\n";`),
    createCodeBlock('HASKELL FUNCTION', `greet name = putStrLn ("Hello, " ++ name)`),
    createCodeBlock('UNITY C#', `using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start() {\n    Debug.Log("Hello from Unity!");\n  }\n}`),
    createCodeBlock('UNREAL C++', `#include "CoreMinimal.h"\n#include "GameFramework/Actor.h"\n\nclass AMyActor : public AActor {\n  virtual void BeginPlay() override {\n    UE_LOG(LogTemp, Warning, TEXT("Hello Unreal!"));\n  }\n};`),
    createCodeBlock('ANSIBLE TASK', `- name: Install nginx\n  apt:\n    name: nginx\n    state: present`),
    createCodeBlock('FASTAPI APP', `from fastapi import FastAPI\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}`),
    createCodeBlock('REDUX ACTION', `export const increment = () => ({\n  type: 'INCREMENT'\n});`),
    createCodeBlock('WEBASSEMBLY TEXT', `(module\n  (func $hello\n    (export "hello")\n    (nop)))`),
    createCodeBlock('MARKDOWN TABLE', `| Name  | Age |\n|-------|-----|\n| Alice | 30  |\n| Bob   | 25  |`),
    createCodeBlock('HELM VALUES.YAML', `replicaCount: 2\nimage:\n  repository: myapp\n  tag: latest`),
    createCodeBlock('SOLIDITY CONTRACT', `pragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    function greet() public pure returns (string memory) {\n        return "Hello, Blockchain!";\n    }\n}`),
    createCodeBlock('QISKIT CIRCUIT', `from qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()`),
    createCodeBlock('TYPESCRIPT INTERFACE', `interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  isActive: boolean;\n}\n\nconst admin: User = {\n  id: 1,\n  name: "Alice Smith",\n  isActive: true,\n};\n\nfunction printUserDetails(user: User): void {\n  console.log(\`User ID: \${user.id}\`);\n  console.log(\`Name: \${user.name}\`);\n  if (user.email) {\n    console.log(\`Email: \${user.email}\`);\n  }\n  console.log(\`Active: \${user.isActive ? 'Yes' : 'No'}\`);\n}`),
    createCodeBlock('KUBERNETES DEPLOYMENT (YAML)', `apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80`),
    createCodeBlock('GRAPHQL QUERY', `query GetUserAndPosts($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n      content\n      createdAt\n    }\n  }\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package.json yarn.lock ./\nRUN yarn install --production\n\nCOPY . .\n\nCMD ["node", "src/index.js"]\n\nEXPOSE 3000`),
    createCodeBlock('ELIXIR FUNCTION', `defmodule MyModule do\n  def greet(name) do\n    IO.puts("Hello, \#{name}!")\n  end\n\n  def calculate_sum(a, b) do\n    a + b\n  end\n\n  def factorial(0), do: 1\n  def factorial(n) when n > 0, do: n * factorial(n - 1)\nend\n\n# Usage:\n# MyModule.greet("World")\n# MyModule.calculate_sum(5, 3)\n# MyModule.factorial(5)`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div>\n    <h1>{{ message }}</h1>\n    <button @click="incrementCount">Count: {{ count }}</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!',\n      count: 0\n    };\n  },\n  methods: {\n    incrementCount() {\n      this.count++;\n    }\n  },\n  mounted() {\n    console.log('Component mounted!');\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  color: #42b983;\n}\n</style>`),
    createCodeBlock('SVELTE COMPONENT', `<script>\n  let count = 0;\n\n  function handleClick() {\n    count += 1;\n  }\n</script>\n\n<main>\n  <h1>The count is {count}</h1>\n  <button on:click={handleClick}>Increment</button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n</style>`),
    createCodeBlock('C LANGUAGE (SIMPLE)', `#include <stdio.h>\n\nint main() {\n    printf("Hello, C World!\\n");\n    \n    for (int i = 0; i < 5; i++) {\n        printf("Loop iteration: %d\\n", i);\n    }\n    \n    return 0;\n}`),
    createCodeBlock('GO LANGUAGE (WEB SERVER)', `package main\n\nimport (\n\t"fmt"\n\t"log"\n\t"net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n\thttp.HandleFunc("/", handler)\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}`),
    createCodeBlock('PERL SCRIPT', `#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $name = "Perl Enthusiast";\nprint "Hello, $name!\\n";\n\nmy @numbers = (1, 2, 3, 4, 5);\nmy $sum = 0;\nforeach my $num (@numbers) {\n    $sum += $num;\n}\nprint "The sum is: $sum\\n";`),
    createCodeBlock('RUST ASYNC (TOKYO)', `use tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    println!("Listening on port 8080");\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!("failed to read from socket: {}", e);\n                        return;\n                    }\n                };\n\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!("failed to write to socket: {}", e);\n                    return;\n                }\n            }\n        });\n    }\n}`),
    createCodeBlock('POWERSHELL SCRIPT', `Write-Host "Hello from PowerShell!"\n\n$serviceName = "Spooler"\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\n\nif ($service) {\n    Write-Host "Service '$serviceName' is currently $($service.Status)."\n    # Example: Restart the service if it's stopped\n    # if ($service.Status -eq 'Stopped') {\n    #     Write-Host "Starting '$serviceName'..."\n    #     Start-Service -InputObject $service\n    # }\n} else {\n    Write-Warning "Service '$serviceName' not found."\n}`),
    createCodeBlock('Haskell Function', `-- Haskell function to calculate the nth Fibonacci number\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\n-- Example usage:\n-- main :: IO ()\n-- main = do\n--   putStrLn "Fibonacci of 10:"\n--   print (fib 10)`),
    createCodeBlock('YAML CONFIG', `version: "3.8"\nservices:\n  web:\n    build: .\n    ports:\n      - "8080:80"`),
    createCodeBlock('RUST OWNERSHIP', `fn main() {\n  let s1 = String::from("hello");...`),
    createCodeBlock('JAVASCRIPT FETCH API', `async function getData(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Network response was not ok.');\n  }\n  return response.json();\n}`),
    createCodeBlock('PORTFOLIO_NODE.JS (Self-Reference!)', `function ArtifactNode({ type, isActive }) {\n  // ...\n  return (\n    <group>\n      {type === 'cube' && <GenesisCube isActive={isActive} />}\n      {type === 'crystal' && <DataCrystal isActive={isActive} />}\n      {/* ... and so on ... */}\n    </group>\n  )\n}`),
    createCodeBlock('CSS ANIMATION', `@keyframes scrollUp {\n  from { transform: translateY(0); }\n  to { transform: translateY(-3000vh); }\n}`),
    createCodeBlock('JAVA OOP', `public class Main {\n  public static void main(String[] args) {\n    System.out.println("The machine is always running.");\n  }\n}`),
    createCodeBlock('PYTHON DECORATOR', `def my_decorator(func):\n def wrapper(*args, **kwargs):\n print("Something is happening before the function is called.")\n    func(*args, **kwargs)\n    print("Something is happening after the function is called.")\n  return wrapper`),
    createCodeBlock('C# LINQ', `var highScores = scores.Where(score => score > 80)\n.OrderByDescending(score => score)\n.Select(score => $"High Score: {score}");`),
    createCodeBlock('PYTHON DECORATOR', `def retry(max_attempts=3):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f"Attempt {attempt + 1} failed: {e}. Retrying...")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=5)\ndef flaky_function():\n    import random\n    if random.random() < 0.7:\n        raise ValueError("Oops, I failed!")\n    return "Success!"`),
    createCodeBlock('JAVASCRIPT ASYNC/AWAIT', `async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\`HTTP error! status: \${response.status}\`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error("Error fetching data:", error);\n    }\n}\n\nfetchData('https://api.example.com/data').then(data => {\n    console.log(data);\n});`),
    createCodeBlock('C# LINQ', `using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\npublic class LinqExample\n{\n    public static void Main(string[] args)\n    {\n        List<Person> people = new List<Person>\n        {\n            new Person { Name = "Alice", Age = 30 },\n            new Person { Name = "Bob", Age = 25 },\n            new Person { Name = "Charlie", Age = 35 },\n            new Person { Name = "David", Age = 25 }\n        };\n\n        var youngPeople = people.Where(p => p.Age < 30).OrderBy(p => p.Name).ToList();\n\n        foreach (var person in youngPeople)\n        {\n            Console.WriteLine($"{person.Name} is {person.Age} years old.");\n        }\n    }\n}`),
    createCodeBlock('GO ROUTINE', `package main\n\nimport (\n\t"fmt"\n\t"time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n\tfor j := range jobs {\n\t\tfprintf(fmt.Sprintf("worker %d started job %d\\n", id, j))\n\t\ttime.Sleep(time.Second)\n\t\tfprintf(fmt.Sprintf("worker %d finished job %d\\n", id, j))\n\t\tresults <- j * 2\n\t}\n}\n\nfunc main() {\n\tjobs := make(chan int, 100)\n\tresults := make(chan int, 100)\n\n\tfor w := 1; w <= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\tfor j := 1; j <= 9; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\n\tfor a := 1; a <= 9; a++ {\n\t\t<-results\n\t}\n}`),
    createCodeBlock('CSS ANIMATION', `/* CSS Animation */\n.fade-in {\n  animation: fadeIn 2s ease-in-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}`),
    createCodeBlock('RUBY BLOCK', `5.times do |i|\n  puts "Iteration #{i}"\nend\n\ndef greet(name)\n  yield(name) if block_given?\nend\n\ngreet("Alice") do |n|\n  puts "Hello, #{n}!"\nend`),
    createCodeBlock('KOTLIN COROUTINE', `import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println("World!")\n    }\n    print("Hello, ")\n}`),
    createCodeBlock('SWIFT STRUCT', `struct Point {\n    var x: Double\n    var y: Double\n\n    func distance(to otherPoint: Point) -> Double {\n        let dx = x - otherPoint.x\n        let dy = y - otherPoint.y\n        return (dx * dx + dy * dy).squareRoot()\n    }\n}\n\nlet p1 = Point(x: 0, y: 0)\nlet p2 = Point(x: 3, y: 4)\nprint(p1.distance(to: p2)) // Output: 5.0`),
    // ... more complex, modern snippets
  ],
  lightning: [
    { type: 'thought', content: 'The screen is a canvas.' },
    { type: 'thought', content: 'Doubt kills more dreams than failure ever will.' },
    { type: 'thought', content: 'Create the things you wish existed.' },
    { type: 'thought', content: 'It’s not a bug, it’s an undocumented feature.' },
    { type: 'thought', content: 'Talk is cheap. Show me the code.' },
    { type: 'thought', content: 'There are two ways to write error-free programs; only the third one works.' },
    { type: 'thought', content: 'Measuring programming progress by lines of code is like measuring aircraft building progress by weight.' },
    { type: 'thought', content: 'The most important property of a program is whether it accomplishes the intention of its user.' },
    { type: 'thought', content: 'Good code is its own best documentation.' },
    { type: 'thought', content: 'If you can’t explain it simply, you don’t understand it deeply.' },
    { type: 'thought', content: 'Keep your tools sharp. Especially your mind.' },
    { type: 'thought', content: 'Every bug starts as a feature request.' },
    { type: 'thought', content: 'Reading code is harder than writing it. That’s why we write so much.' },
    { type: 'thought', content: 'Good tools save bad days.' },
    { type: 'thought', content: 'Software rots. Keep refactoring.' },
    { type: 'comment-regex', content: '# When in doubt, escape it.' },
    { type: 'thought', content: 'The only reliable way to know if your code works is to test it thoroughly.' },
    { type: 'thought', content: 'Technical debt is like a credit card: easy to get, hard to pay off.' },
    { type: 'thought', content: 'Understanding the problem is 90% of the solution.' },
    { type: 'thought', content: 'A good API feels intuitive; a great API feels invisible.' },
    { type: 'thought', content: 'Refactor early, refactor often.' },
    { type: 'thought', content: 'The compiler caught it? Good. Static analysis caught it? Better. Test caught it? Okay. User caught it? Bad.' },
    { type: 'comment-js', content: '// This part is magic. Do not touch.' },
    { type: 'comment-c', content: '/* Every bug is a lesson in disguise. */' },
    { type: 'comment-asm', content: '; The shortest path is rarely the most scenic.' },
    { type: 'comment-sh', content: '# First, do it. Then, do it right. Then, do it better.' },
    { type: 'comment-js', content: '// TODO: Figure out the meaning of it all.' },
    { type: 'comment-py', content: '# This part is magic. Do not touch.' },
    { type: 'comment-asm', content: '; Zeroes and ones. Everything else is marketing.' },
    { type: 'comment-asm', content: '; Know thy registers.' },
    { type: 'comment-asm', content: '; Hardware doesn’t lie.' },
    { type: 'comment-sh', content: '# One pipe too many, and it all breaks.' },
    { type: 'comment-sh', content: '# rm -rf is forever.' },
    { type: 'comment-sh', content: '# In scripts we trust.' },
    { type: 'comment-sh', content: '# Here be dragons and dollar signs.' },
    { type: 'comment-sh', content: '# Good luck debugging this pipeline.' },
    { type: 'comment-sh', content: '# Shell scripts age like milk.' },
    { type: 'comment-bat', content: ':: DOS commands from the stone age.' },
    { type: 'comment-bat', content: ':: One % too few, and all hell breaks loose.' },
    { type: 'comment-ps1', content: '# Everything is an object. Until it isn’t.' },
    { type: 'comment-ps1', content: '# Verb-Noun forever.' },
    { type: 'comment-vim', content: '" Just one more hjkl...' },
    { type: 'comment-vim', content: '" :wq or :q! — the eternal dilemma.' },
    { type: 'comment-vim', content: '" :q is not an exit. It’s a lifestyle."' },
    { type: 'comment-rs', content: '// Ownership is freedom. And pain.' },
    { type: 'comment-rs', content: '// Fearless concurrency. Fearful compiler.' },
    { type: 'comment-cpp', content: '// Templates inside templates inside templates.' },
    { type: 'comment-cpp', content: '// Undefined behavior loves surprises.' },
    { type: 'comment-docker', content: '# It worked on my machine. Now it works in yours.' },
    { type: 'comment-docker', content: '# Containers all the way down.' },
    { type: 'comment-regex', content: '# One more .* and it’ll work.' },
    { type: 'comment-c', content: '/* Add sentinel node for easier list manipulation. */' },
    { type: 'comment-cpp', content: '// Dynamic programming: memoize results to avoid recomputation.' },
    { type: 'comment-py', content: '# BFS vs DFS: choose wisely based on problem constraints.' },
    { type: 'comment-js', content: '// Closure usage here to preserve scope.' },
    { type: 'comment-java', content: '// This is a classic example of an iterative solution.' },
    { type: 'comment-swift', content: '// Guard let for early exit and optional unwrapping.' },
    { type: 'code-line', content: 'gdb -q a.out' },
    { type: 'code-line', content: 'valgrind --tool=callgrind ./my_program' },
    { type: 'code-line', content: 'python3 -m cProfile script.py' },
    { type: 'code-line', content: 'jest --watchAll' },
    { type: 'code-line', content: 'valgrind --tool=memcheck --leak-check=full ./my_program' },
    { type: 'code-line', content: 'lldb -- source.c' },
    { type: 'code-line', content: 'npm run build' },
    { type: 'code-line', content: 'cargo check' },
    { type: 'code-line', content: 'pip install --upgrade everything' },
    { type: 'code-line', content: 'printf("Segmentation fault? Again?!\\n");' },
    { type: 'code-line', content: 'SELECT COUNT(*) FROM logs WHERE error IS NOT NULL;' },
    { type: 'code-line', content: 'docker-compose up -d' },
    { type: 'code-line', content: 'systemctl restart nginx' },
    { type: 'code-line', content: 'yarn create next-app myproject' },
    { type: 'code-line', content: 'ls -lah' },
    { type: 'code-line', content: 'kubectl get pods --all-namespaces' },
    { type: 'code-line', content: 'const a = 42;' },
    { type: 'code-line', content: 'rm -rf / --no-preserve-root' },
    { type: 'code-line', content: 'npm install' },
    { type: 'code-line', content: 'cargo run' },
    { type: 'code-line', content: 'SELECT * FROM users WHERE clueless > 0;' },
    { type: 'code-line', content: 'git push origin main --force' },
    { type: 'code-line', content: 'ls -R | grep TODO' },
    { type: 'code-line', content: 'Start-Process notepad.exe' },
    { type: 'code-line', content: 'vim -u NONE' },
    { type: 'code-line', content: 'cargo fmt' },
    { type: 'code-line', content: 'docker build -t myapp .' },
    { type: 'code-line', content: 'kubectl describe pod my-pod' },
    { type: 'code-line', content: 'git rebase -i HEAD~5' },
    { type: 'code-line', content: 'go mod tidy' },
    { type: 'code-line', content: 'npm audit fix' },
    { type: 'code-line', content: 'lua myscript.lua' },
    { type: 'code-line', content: 'perl -pe "s/foo/bar/g"' },
    createCodeBlock('C - VALID PARENTHESES', `bool isValid(char * s){\n    char stack[10000];\n    int top = -1;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char c = s[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack[++top] = c;\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((c == ')' && last != '(') || \n                (c == '}' && last != '{') ||\n                (c == ']' && last != '[')) return false;\n        }\n    }\n    return top == -1;\n}`),
    createCodeBlock('C++ - VALID PARENTHESES', `class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (c == '(' || c == '{' || c == '[') st.push(c);\n            else {\n                if (st.empty()) return false;\n                char t = st.top(); st.pop();\n                if ((c == ')' && t != '(') ||\n                    (c == '}' && t != '{') ||\n                    (c == ']' && t != '[')) return false;\n            }\n        }\n        return st.empty();\n    }\n};`),
    createCodeBlock('PYTHON - VALID PARENTHESES', `class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in mapping.values():\n                stack.append(char)\n            else:\n                if not stack or mapping[char] != stack.pop():\n                    return False\n        return not stack`),
    createCodeBlock('JAVASCRIPT - VALID PARENTHESES', `var isValid = function(s) {\n    const stack = [];\n    const map = {')':'(', '}':'{', ']':'['};\n    for (let c of s) {\n        if (['(','{','['].includes(c)) {\n            stack.push(c);\n        } else {\n            if (stack.pop() !== map[c]) return false;\n        }\n    }\n    return stack.length === 0;\n};`),
    createCodeBlock('C - PALINDROME NUMBER', `bool isPalindrome(int x){\n    if (x < 0) return false;\n    long rev = 0;\n    int orig = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return rev == orig;\n}`),
    createCodeBlock('C++ - PALINDROME NUMBER', `class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x < 0) return false;\n        long rev = 0;\n        int orig = x;\n        while (x != 0) {\n            rev = rev * 10 + x % 10;\n            x /= 10;\n        }\n        return rev == orig;\n    }\n};`),
    createCodeBlock('PYTHON - PALINDROME NUMBER', `class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        return str(x) == str(x)[::-1]`),
    createCodeBlock('JAVASCRIPT - PALINDROME NUMBER', `var isPalindrome = function(x) {\n    return x.toString() === x.toString().split('').reverse().join('');\n};`),
    createCodeBlock('C - MERGE TWO SORTED LISTS', `struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    while (l1 && l2) {\n        if (l1->val < l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    return dummy.next;\n}`),
    createCodeBlock('C++ - MERGE TWO SORTED LISTS', `class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode dummy;\n        ListNode* tail = &dummy;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                tail->next = l1;\n                l1 = l1->next;\n            } else {\n                tail->next = l2;\n                l2 = l2->next;\n            }\n            tail = tail->next;\n        }\n        tail->next = l1 ? l1 : l2;\n        return dummy.next;\n    }\n};`),
    createCodeBlock('PYTHON - MERGE TWO SORTED LISTS', `class Solution:\n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode(0)\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        tail.next = l1 or l2\n        return dummy.next`),
    createCodeBlock('JAVASCRIPT - MERGE TWO SORTED LISTS', `var mergeTwoLists = function(l1, l2) {\n    let dummy = new ListNode(0);\n    let current = dummy;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            current.next = l1;\n            l1 = l1.next;\n        } else {\n            current.next = l2;\n            l2 = l2.next;\n        }\n        current = current.next;\n    }\n    current.next = l1 || l2;\n    return dummy.next;\n};`),
    createCodeBlock('C - CLIMBING STAIRS', `int climbStairs(int n){\n    if (n <= 2) return n;\n    int a = 1, b = 2;\n    for (int i = 3; i <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}`),
    createCodeBlock('C++ - CLIMBING STAIRS', `class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 2) return n;\n        int a = 1, b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};`),
    createCodeBlock('PYTHON - CLIMBING STAIRS', `class Solution:\n    def climbStairs(self, n):\n        if n <= 2:\n            return n\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b`),
    createCodeBlock('JAVASCRIPT - CLIMBING STAIRS', `var climbStairs = function(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};`),
    createCodeBlock('C - BINARY SEARCH', `int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}`),
    createCodeBlock('C++ - BINARY SEARCH', `class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] < target) left = mid + 1;\n            else right = mid - 1;\n        }\n        return -1;\n    }\n};`),
    createCodeBlock('PYTHON - BINARY SEARCH', `class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1`),
    createCodeBlock('JAVASCRIPT - BINARY SEARCH', `var search = function(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n};`),
    createCodeBlock('C - TWO SUM', `int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                int* res = malloc(2 * sizeof(int));\n                res[0] = i;\n                res[1] = j;\n                *returnSize = 2;\n                return res;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}`),
    createCodeBlock('C++ - TWO SUM', `class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (m.count(target - nums[i])) {\n                return {m[target - nums[i]], i};\n            }\n            m[nums[i]] = i;\n        }\n        return {};\n    }\n};`),
    createCodeBlock('PYTHON - TWO SUM', `class Solution:\n    def twoSum(self, nums, target):\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            d[num] = i`),
    createCodeBlock('JAVASCRIPT - TWO SUM', `var twoSum = function(nums, target) {\n    const map = {};\n    for (let i = 0; i < nums.length; i++) {\n        let complement = target - nums[i];\n        if (map.hasOwnProperty(complement)) {\n            return [map[complement], i];\n        }\n        map[nums[i]] = i;\n    }\n};`),
    createCodeBlock('C - REVERSE LINKED LIST', `struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}`),
    createCodeBlock('C++ - REVERSE LINKED LIST', `class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};`),
    createCodeBlock('PYTHON - REVERSE LINKED LIST', `class Solution:\n    def reverseList(self, head):\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev`),
    createCodeBlock('JAVASCRIPT - REVERSE LINKED LIST', `var reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        let next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};`),
    createCodeBlock('C - FIBONACCI', `int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}`),
    createCodeBlock('C++ - FIBONACCI', `class Solution {\npublic:\n    int fib(int n) {\n        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);\n    }\n};`),
    createCodeBlock('PYTHON - FIBONACCI', `class Solution:\n    def fib(self, n):\n        if n <= 1:\n            return n\n        return self.fib(n-1) + self.fib(n-2)`),
    createCodeBlock('JAVASCRIPT - FIBONACCI', `var fib = function(n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n};`),
    createCodeBlock('BASH FOR LOOP', `for file in *.txt; do\n  echo "Processing $file"\ndone`),
    createCodeBlock('WINDOWS BATCH', `@echo off\necho Hello, Windows World!`),
    createCodeBlock('POWERSHELL SCRIPT', `Get-Process | Where-Object { $_.CPU -gt 100 }`),
    createCodeBlock('VIMSCRIPT FUNCTION', `function! Greet()\n  echo "Hello from Vim!"\nendfunction`),
    createCodeBlock('RUST FUNCTION', `fn greet(name: &str) {\n  println!("Hello, {}!", name);\n}`),
    createCodeBlock('C++ TEMPLATE', `template<typename T>\nT add(T a, T b) {\n  return a + b;\n}`),
    createCodeBlock('DOCKERFILE', `FROM node:18\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD ["npm", "start"]`),
    createCodeBlock('REGEX EXAMPLE', `/\\d{3}-\\d{2}-\\d{4}/`),
    createCodeBlock('HTML SNIPPET', `<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`),
    createCodeBlock('MAKEFILE', `all:\n\tgcc main.c -o myprogram`),
    createCodeBlock('LUA SCRIPT', `for i = 1, 5 do\n  print("Lua loop "..i)\nend`),
    createCodeBlock('MARKDOWN SAMPLE', `# Hello Markdown\n\n- Item 1\n- Item 2`),
    createCodeBlock('PYTORCH TRAINING LOOP', `import torch\nimport torch.nn as nn\n\nmodel = nn.Linear(10, 1)\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\nfor epoch in range(5):\n    inputs = torch.randn(16, 10)\n    targets = torch.randn(16, 1)\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    print(f"Epoch {epoch}, Loss: {loss.item()}")`),
    createCodeBlock('GO CONCURRENCY', `func main() {\n  messages := make(chan string)\n\n  go func() { messages <- "ping" }()\n\n  msg := <-messages\n  fmt.Println(msg)\n}`),
    createCodeBlock('HTML5 STRUCTURE', `<!DOCTYPE html>\n<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <header>\n    <h1>Welcome</h1>\n  </header>\n  <main>\n    <p>Content goes here.</p>\n  </main>\n  <footer>\n    <p>© 2025</p>\n  </footer>\n</body>\n</html>`),
    createCodeBlock('TAILWINDCSS', `<div class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4">\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo">\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>`),
    createCodeBlock('VUE.JS COMPONENT', `<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>`),
    createCodeBlock('GO ROUTINES', `package main\n\nimport (\n  "fmt"\n  "time"\n)\n\nfunc main() {\n  go func() {\n    fmt.Println("Hello from goroutine!")\n  }()\n  time.Sleep(time.Second)\n}`),
    createCodeBlock('C# LINQ', `var query = from user in users\n            where user.IsActive\n            select user.Name;\n\nforeach (var name in query)\n{\n    Console.WriteLine(name);\n}`),
    createCodeBlock('JAVA CLASS', `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}`),
    createCodeBlock('JSON CONFIG', `{\n  "name": "my-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node index.js"\n  }\n}`),
    createCodeBlock('BASH SCRIPT', `#!/bin/bash\n\nfor i in {1..5}\ndo\n  echo "Iteration $i"\ndone`),
    createCodeBlock('HTML SNIPPET', `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World</title>\n  </head>\n  <body>\n    <h1>Still building...</h1>\n  </body>\n</html>`),
  ],

  // A default theme for any other songs
  default_theme: [
    { type: 'thought', content: 'Still building.' },
    { type: 'comment-sh', content: '# To be or not to be...' },
  ],
}

const allCodeSnippets = finaleStream['main_theme'] // Or your combined pool
  .filter((item) => item.type === 'multi-column')
  .flatMap((block) => block.columns)

export const getRandomCodeSnippet = () => {
  // This function is now incredibly fast. It just picks one from the pre-processed list.
  return allCodeSnippets[Math.floor(Math.random() * allCodeSnippets.length)]
}
