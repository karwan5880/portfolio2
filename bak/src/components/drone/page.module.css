.thought {
  font-size: 1.5rem;
  color: #888; /* A softer, more contemplative gray */
  font-style: italic;
  font-family: 'Georgia', 'serif'; /* A classic serif font to contrast with the code */
  text-shadow: 0 0 5px rgba(136, 136, 136, 0.5);
  opacity: 0.9;
}
.code-line {
  font-size: 1.2rem;
  color: #d0d0d0; /* A crisp, standard terminal white */
  font-family: 'Fira Code', 'Victor Mono', monospace; /* The same font as your comments */
  white-space: nowrap;
}
.commentGlobal :global([class*='comment-']) {
  font-size: 1.2rem;
  font-style: italic;
  font-family: 'Fira Code', 'Victor Mono', monospace; /* A nice coding font */
  opacity: 0.8;
  white-space: nowrap;
}
/* --- 2. Thematic Color Groups --- */
/* Group A: Web, Scripting & General Purpose (Classic Green) */
.comment-js,
.comment-py,
.comment-php,
.comment-rb,
.comment-lua,
.comment-perl {
  color: #6a9955;
}
/* Group B: Systems & Compiled Languages (Cool Blue/Teal) */
.comment-c,
.comment-cpp,
.comment-csharp,
.comment-rs,
.comment-java,
.comment-fortran,
.comment-wasm {
  color: #569cd6;
}
/* Group C: Mobile, Modern & Specialty (Vibrant Orange/Amber) */
.comment-swift,
.comment-kt,
.comment-kotlin,
.comment-dart,
.comment-gd,
.comment-gdscript,
.comment-sol,
.comment-solidity {
  color: #ce9178;
}
/* Group D: Functional, Academic & Niche (Muted Yellow/Gold) */
.comment-hs,
.comment-lisp,
.comment-scala,
.comment-ex,
.comment-pl,
.comment-julia,
.comment-jl,
.comment-matlab,
.comment-qc {
  color: #d7ba7d;
}
/* Group E: Shell & DevOps (Subtle Gray/Off-white) */
.comment-sh,
.comment-shell,
.comment-powershell,
.comment-ps1,
.comment-bat,
.comment-docker,
.comment-yml {
  color: #999999;
  font-style: normal; /* Shell comments are often not italicized */
}
/* Group F: Low-Level & Esoteric (Sharp Magenta/Purple) */
.comment-asm,
.comment-assembly,
.comment-vim,
.comment-emacs,
.comment-regex {
  color: #c586c0;
}
/* Group G: Simple Markup (Plain) */
.comment-md,
.comment-ipync {
  color: #b0b0b0;
  font-style: normal;
}

.streamItem {
  width: 100%;
  padding: 0rem 2rem;
  display: flex;
  justify-content: center;
  text-align: center;
}

.streamItem {
  width: 100%;
  padding: 0rem 2rem;
  display: flex;
  justify-content: center;
  text-align: center;
}

.linksContainer {
  display: flex;
  justify-content: center;
  gap: 2rem;
  margin-top: 3rem;
  opacity: 0;
  transition: opacity 1s ease-in;
  pointer-events: none;
}
.linksContainer.visible {
  opacity: 1;
  /* pointer-events: auto; */
}
.link {
  font-size: 1.2rem;
  color: #999;
  text-decoration: none;
  transition: color 0.3s;
}
.link:hover {
  color: #fff;
}
.link a {
  font-size: 1.2rem;
  color: #999;
  text-decoration: none;
  transition: color 0.3s;
}
.link a:hover {
  color: #fff;
}

.finaleWrapper {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: #000;
  font-family: monospace;
  overflow: hidden;
}

.streamGrid {
  position: absolute;
  width: 100%;
  height: 100%;
  opacity: 0;
}
.streamGrid.visible {
  opacity: 1;
}
.slow {
  animation: scrollUp 180s linear infinite;
}
.medium {
  animation: scrollUp 120s linear infinite;
}
.fast {
  animation: scrollUp 90s linear infinite;
}

.codeBlock {
  background: rgba(10, 10, 10, 0.5);
  border: 1px solid #333;
  border-radius: 4px;
  padding: 1rem;
  font-size: 0.8rem;
}

.glitchOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.glitchItem {
  position: absolute;
  width: 30%;
  max-width: 450px;
  opacity: 0;
  animation: fadeInOut 3s 1;
}

@keyframes fadeInOut {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  20% {
    opacity: 1;
    transform: scale(1);
  }
  80% {
    opacity: 1;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0.95);
  }
}

.staticContainer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 10;
  text-align: center;
  transition: transform 1.5s ease-in-out; /* Make the transition a bit faster */
}
.staticContainer.scrollingUp {
  top: 0;
  transform: translate(-50%, 0); /* No more negative Y to push it off-screen */
  padding: 1rem 0; /* Add some padding so it's not glued to the edge */
}
.staticContainer.fadingOut,
.scrollContainer.fadingOut {
  opacity: 0;
}
.staticContainer.hidden {
  transform: translate(-50%, -200vh);
  opacity: 0;
}
.staticContainer.exiting {
  transform: translate(-50%, -150%);
  opacity: 0;
}

.scrollContainer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
  opacity: 0;
  transition: opacity 1s ease-in-out;
}
.scrollContainer.visible {
  opacity: 1;
}

.singleLineStream {
  /* This class is passed to StreamColumn, so its definition is needed here */
  width: 100%;
  z-index: 5;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}
/* .singleLineStream {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  pointer-events: none;
  z-index: 5;
} */
/* .singleLineStream {
  animation: scrollUp 70s linear infinite;
} */

.scrolling {
  animation: scrollUp var(--scroll-duration, 120s) linear infinite;
  will-change: transform;
}
.scrollingDown {
  animation: scrollDown var(--scroll-duration, 120s) linear infinite;
  /* Tell the browser we plan to animate 'transform' */
  will-change: transform;
}
@keyframes scrollUp {
  from {
    transform: translateY(100vh);
  }
  to {
    transform: translateY(-100%);
  }
}
@keyframes scrollDown {
  from {
    /* Start from the top, transformed off-screen */
    transform: translateY(-100%);
  }
  to {
    /* End at the bottom */
    transform: translateY(100vh);
  }
}
.distant {
  /* Optional: A subtle blur makes things feel far away */
  filter: blur(1px);
  /* You can also use opacity directly, but this is a good place for it */
  opacity: 0.6;
}
.x-fast {
  animation: scrollUp 70s linear infinite;
  font-size: 1.2rem;
}
.codeWall {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex; /* Use Flexbox to align columns */
  justify-content: center;
  gap: 2rem;
  z-index: 2; /* Ensure it's behind single lines but visible */
}
.columnWrapper {
  display: flex;
  flex-direction: column;
  width: 30%;
  max-width: 450px;
  /* THE KEY: We apply the animation to these wrappers, not the columns themselves */
}
.codeColumn {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}
.finalMessage {
  font-size: 2rem;
  color: #00ff00;
  white-space: nowrap;
  overflow: hidden;
  width: 0;
  border-right: 3px solid transparent;
}
/* .finalMessage {
  font-size: 2rem;
  color: #00ff00;
  text-shadow: 0 0 10px rgba(0, 255, 0, 0.7);
  white-space: nowrap;
  overflow: hidden;
  width: 27ch;
  border-right: 3px solid transparent;
  animation:
    typing 2.5s steps(27, end),
    blink-caret 1s step-end infinite;
} */
/* .finalMessageVisible {
  font-size: 2rem;
  color: #00ff00;
  text-shadow: 0 0 10px rgba(0, 255, 0, 0.7);
  white-space: nowrap;
} */
.finalMessage.active {
  width: 27ch;
  border-right-color: #00ff00;
  animation:
    typing 2.5s steps(27, end) forwards,
    blink-caret 1s step-end infinite;
}
@keyframes typing {
  from {
    width: 0;
  }
  to {
    width: 27ch;
  }
}

.typingContainer {
  animation: fadeIn 0.5s ease-out;
}
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
.finalMessageContainer {
  display: flex;
  justify-content: center;
  align-items: center;
}
.typingAnimation {
  font-size: 2rem;
  color: #00ff00;
  text-shadow: 0 0 10px rgba(0, 255, 0, 0.7);
  width: 26ch;
  overflow: hidden;
  white-space: nowrap;
  border-right: 3px solid #00ff00;
  animation:
    typing 2.5s steps(25, end) forwards,
    blink-caret 2s step-end infinite;
  /* blink-caret 0.75s step-end infinite; */
}
/* @keyframes typing {
  from {
    width: 0;
  }
  to {
    width: 26ch;
  }
} */
/* @keyframes blink-caret {
  from,
  to {
    border-color: transparent;
  }
  50% {
    border-color: #00ff00;
  }
} */
@keyframes blink-caret {
  50% {
    border-color: transparent;
  }
}

.idlePrompt {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
}
.blinkingCursor {
  display: inline-block;
  width: 10px;
  height: 1.8rem;
  background-color: #00ff00;
  animation: blink 1s step-end infinite;
}
@keyframes blink {
  50% {
    background-color: transparent;
  }
}

/**/

/* DataStorm.js */
.dataStormOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* z-index: 50; */
  z-index: 1; /* On top of everything */
  pointer-events: none;
}
@keyframes burstIn {
  from {
    transform: scale(0);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}
@keyframes collapse {
  from {
    transform: scale(1);
    opacity: 1;
  }
  to {
    /* It scales down to nothing while moving to its own center */
    transform: scale(0) translate(-50%, -50%);
    opacity: 0;
  }
}
/* We need to adjust the contentWrapper to be invisible initially */
.contentWrapper {
  width: 100%;
  height: 100%;
  opacity: 0; /* Hidden by default */
  transition: opacity 1s ease-in-out 1s; /* Fade in after a 1s delay */
}
.contentWrapper.visible {
  opacity: 1;
}
.contentWrapper.transitioning {
  opacity: 0;
}

.stormBlock {
  position: absolute;
  opacity: 0;
  width: 30%;
  max-width: 400px;
  background: rgba(10, 10, 10, 0.8);
  padding: 1rem;
  /* border: 1px solid #333; */
  /* border: 1px solid var(--particle-color); */
  /* box-shadow: 0 0 15px 0px var(--particle-color); */
  outline: 1px solid var(--particle-color);
  transform: scale(var(--particle-scale, 1)); /* Apply the scale, default to 1 */
  animation:
    burstAndCollapse var(--particle-lifetime, 100ms) ease-out forwards,
    drift var(--particle-lifetime) linear infinite alternate;
}
.stormBlock.collapsing {
  /* animation-name: gravityWell;
  animation-duration: 1.5s;
  animation-timing-function: ease-in;
  animation-fill-mode: forwards; */
  /* We remove the transform from the animation and put it on top/left */
  position: absolute; /* Ensure top/left works */
  /* animation: gravityWell 1.5s ease-in forwards; */
  animation: recedingTide 1s ease-in forwards;
  /* Crucially, stop the drift animation */
  /* animation-name: gravityWell;
  animation-duration: 1.5s;
  animation-timing-function: ease-in;
  animation-fill-mode: forwards; */
}
/* .stormBlock.collapsing {
  animation: gravityWell 1.5s ease-in forwards;
} */
/* .stormBlock.collapsing {
  animation: collapse 1s ease-in forwards;
} */
/* Add these new keyframes for the epic disappearance */
@keyframes gravityWell {
  from {
    /* Start from its current random position and opacity */
    transform: scale(1);
    opacity: inherit;
  }
  to {
    /* End at the center of the screen, completely vanished */
    /* transform: translate(-50vw, -50vh) scale(0); */
    top: var(--target-y, 50%);
    left: var(--target-x, 50%);
    transform: scale(0);
    opacity: 0;
  }
}
@keyframes burstAndCollapse {
  0% {
    transform: scale(0);
    opacity: 0;
  }
  45% {
    /* Appears quickly */
    transform: scale(1);
    opacity: inherit;
  }
  55% {
    /* Holds for a moment */
    transform: scale(1);
    opacity: inherit;
  }
  100% {
    /* Collapses quickly */
    transform: scale(0);
    opacity: 0;
  }
}

@keyframes drift {
  from {
    transform: translate(0, 0) rotate(var(--rotation, 0deg));
  }
  to {
    transform: translate(var(--x-drift), var(--y-drift)) rotate(var(--rotation, 0deg));
  }
}

@keyframes recedingTide {
  from {
    /* Start exactly where the bubble is, at its random opacity */
    transform: translateY(0) scale(var(--particle-scale, 1));
    opacity: inherit;
  }
  to {
    /* End 150% of the viewport height above the screen, completely faded out */
    transform: translateY(-150vh) scale(var(--particle-scale, 1));
    opacity: 0;
  }
}
@keyframes fallingAway {
  from {
    transform: translateY(0) scale(var(--particle-scale, 1));
    opacity: inherit;
  }
  to {
    /* Just change the sign from negative to positive */
    transform: translateY(150vh) scale(var(--particle-scale, 1));
    opacity: 0;
  }
}

.streamItemContainer {
  position: absolute;
  left: 0;
  right: 0;
  /* This ensures smooth movement */
  will-change: transform;
}

.ending {
  opacity: 0;
  /* Stop the animation from continuing to run on an invisible element */
  animation-play-state: paused;
  transition: opacity 5s ease-out; /* A slow, 5-second fade */
}
/* DataStorm.js */
