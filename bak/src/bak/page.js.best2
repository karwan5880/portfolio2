'use client'

import Link from 'next/link'
import { useEffect, useMemo, useRef, useState } from 'react'

import { DogEar } from '@/components/DogEar'
import { LightningEffect } from '@/components/LightningEffect'
import { SnowEffect } from '@/components/SnowEffect'
import { ThunderEffect } from '@/components/ThunderEffect'

import styles from './finale.module.css'
import { finaleStream } from '@/data/finale-stream-data'

const StreamItem = ({ item }) => {
  // Helper for syntax highlighting, now safely inside this component
  const createHighlightedHTML = (content) => {
    const html = content
      .replace(/</g, '<')
      .replace(/>/g, '>')
      .replace(/(const|let|class|return|def|function|async|await|if|else|public|static|void|FROM|WORKDIR|COPY|RUN|CMD|SELECT|JOIN|FROM|WHERE)/g, '<span class="keyword">$1</span>')
      .replace(/("[^"]*"|'[^']*'|`[^`]*`)/g, '<span class="string">$1</span>')
      .replace(/(\/\/.*|\#.*|\/\*[\s\S]*?\*\/)/g, '<span class="comment">$1</span>')
    return { __html: html }
  }

  const handleSecretClick = () => {
    console.log('SECRET FOUND!')
    // Here, you would trigger the navigation or animation
    // to your secret 3D scene.
    // For now, we'll just log it.
    window.location.href = '/secret-room'
  }

  // Render logic based on the item's type
  if (item.type === 'multi-column') {
    return (
      <div className={`${styles.streamItem} ${styles.multiColumnContainer}`}>
        {item.columns.map((col, i) => (
          <div key={i} className={styles.codeColumn}>
            <div className={styles.codeTitle}>{col.title}</div>
            <pre dangerouslySetInnerHTML={createHighlightedHTML(col.code)} />
          </div>
        ))}
      </div>
    )
  }

  // Handle live data with special styling
  if (item.type.startsWith('live-data')) {
    return (
      <div className={`${styles.streamItem} ${styles[item.type]}`}>
        <span>{item.content}</span>
      </div>
    )
  }

  // return (
  //   <div className={`${styles.streamItem} ${styles[item.type]}`}>
  //     <span>{item.content}</span>
  //   </div>
  // )

  // // Default rendering for all single-line types
  return (
    <div className={`${styles.streamItem} ${styles[item.type]} ${item.secret ? styles.secret : ''}`} onClick={item.secret ? handleSecretClick : null}>
      <span>{item.content}</span>
    </div>
  )
}

// const SyntaxHighlightedCode = ({ content }) => {
//   const html = content
//     .replace(/</g, '<')
//     .replace(/>/g, '>')
//     .replace(/(const|let|class|return|def)/g, '<span class="keyword">$1</span>')
//     .replace(/("[^"]*")/g, '<span class="string">$1</span>')
//   return <pre dangerouslySetInnerHTML={{ __html: html }} />
// }

const finalMessage = '> Status: Still building.'
const initialLinks = [
  { type: 'link', content: '[ GitHub ]', href: 'https://github.com/karwan5880/portfolio2' },
  { type: 'link', content: '[ LinkedIn ]', href: 'https://www.linkedin.com/in/karwanleong' },
]

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[array[i], array[j]] = [array[j], array[i]]
  }
  return array
}

export default function FinalePage() {
  const [pageState, setPageState] = useState('TYPING')
  const [typedText, setTypedText] = useState('')
  const [isExiting, setIsExiting] = useState(false)
  const [hasInteracted, setHasInteracted] = useState(false)

  // --- PLAYLIST & AUDIO STATE ---
  const masterPlaylist = useMemo(() => ['/sound/megamanx5.mp3', '/sound/yangguxian.mp3', '/sound/cangzoucheng.mp3', '/sound/harvestmoon.mp3'], [])
  const [currentSongIndex, setCurrentSongIndex] = useState(0)
  const [activeTheme, setActiveTheme] = useState(null)
  const audioRef = useRef(null)

  // --- NEW: State for each individual stream ---
  // const [singleLineItems, setSingleLineItems] = useState([]);
  // const [multiColumnItems, setMultiColumnItems] = useState([])
  const [githubItems, setGithubItems] = useState([])
  const [musicItems, setMusicItems] = useState([])

  const [animationDurations, setAnimationDurations] = useState({
    // marquee1: 250,
    // marquee2: 180,
    marquee1: 10,
    marquee2: 5,
  })

  // // --- DATA STREAMS STATE ---
  // const [singleLineItems, setSingleLineItems] = useState([])
  // const multiColumnStream = useMemo(() => finaleStream.filter((item) => item.type === 'multi-column'), [])
  // const dataIndex = useRef(0)
  // const singleLineData = useMemo(() => shuffleArray(finaleStream.filter((item) => item.type !== 'multi-column')), [])
  // const multiColumnData = useMemo(() => finaleStream.filter((item) => item.type === 'multi-column'), [])
  // const singleLineIndex = useRef(0)
  // const multiColumnIndex = useRef(0)

  // --- Data Preparation using useMemo ---
  const singleLineData = useMemo(() => {
    const filtered = finaleStream.filter((item) => item.type !== 'multi-column')
    // Shuffle logic here
    for (let i = filtered.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[filtered[i], filtered[j]] = [filtered[j], filtered[i]]
    }
    return filtered
  }, []) // Empty array means this runs ONLY ONCE
  const multiColumnData = useMemo(() => finaleStream.filter((item) => item.type === 'multi-column'), [])
  const [singleLineItems, setSingleLineItems] = useState([])
  const [multiColumnItems, setMultiColumnItems] = useState([])

  // const [pageState, setPageState] = useState('TYPING')
  // const [typedText, setTypedText] = useState('')
  // const [streamItems, setStreamItems] = useState([])
  // const [isExiting, setIsExiting] = useState(false)
  // const dataIndex = useRef(0)
  // const [liveData, setLiveData] = useState(null)
  // const [text, setText] = useState('')
  // const [showLinks, setShowLinks] = useState(false)
  // const [isScrolling, setIsScrolling] = useState(false)
  // const [currentSongIndex, setCurrentSongIndex] = useState(0)
  // const audioRef = useRef(null)
  // const shuffledStream = useMemo(() => shuffleArray([...finaleStream]), [])
  // const [activeTheme, setActiveTheme] = useState(null) // 'snow', 'thunder', or null
  const singleLineStream = useMemo(() => {
    const filtered = finaleStream.filter((item) => item.type !== 'multi-column')
    // Shuffle the array
    for (let i = filtered.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[filtered[i], filtered[j]] = [filtered[j], filtered[i]]
    }
    return filtered
  }, []) // The empty dependency array ensures this runs only once
  // const multiColumnStream = useMemo(() => finaleStream.filter((item) => item.type === 'multi-column'), [])

  const initialItems = [
    { type: 'thought', content: '> Status: Still building.' },
    { type: 'link', content: '[ GitHub ]', href: 'https://github.com/karwan5880' },
    { type: 'link', content: '[ LinkedIn ]', href: 'https://www.linkedin.com/in/karwanleong' },
  ]

  // // This effect sets up a one-time listener for the first interaction
  // useEffect(() => {
  //   const allowAudio = () => {
  //     setHasInteracted(true)
  //     // Once we've interacted, we don't need the listener anymore
  //     window.removeEventListener('click', allowAudio)
  //     window.removeEventListener('keydown', allowAudio)
  //   }
  //   window.addEventListener('click', allowAudio)
  //   window.addEventListener('keydown', allowAudio)
  //   return () => {
  //     window.removeEventListener('click', allowAudio)
  //     window.removeEventListener('keydown', allowAudio)
  //   }
  // }, [])

  // useEffect(() => {
  //   if (pageState !== 'SCROLLING') return
  //   const speedUpInterval = setInterval(() => {
  //     console.log(`{1} {2}: `, animationDurations)
  //     setAnimationDurations((prev) => ({
  //       // Decrease the duration by 5s, but don't go below a minimum (e.g., 60s)
  //       marquee1: Math.max(10, prev.marquee1 - 10),
  //       marquee2: Math.max(20, prev.marquee2 - 10),
  //     }))
  //   }, 1000) // Every 30 seconds
  //   return () => clearInterval(speedUpInterval)
  // }, [pageState])

  useEffect(() => {
    // if (!hasInteracted) return
    let audio
    const initialPlayTimer = setTimeout(() => {
      audio = new Audio(masterPlaylist[currentSongIndex])
      if (masterPlaylist[currentSongIndex].includes('harvestmoon.mp3')) {
        setActiveTheme('snow')
      } else if (masterPlaylist[currentSongIndex].includes('cangzoucheng.mp3')) {
        setActiveTheme('thunder')
      } else if (masterPlaylist[currentSongIndex].includes('yangguxian.mp3')) {
        setActiveTheme('lightning')
      } else {
        setActiveTheme(null)
      }
      audioRef.current = audio
      audio.volume = 0.2
      audio.play()
      const handleSongEnd = () => {
        setCurrentSongIndex((prevIndex) => {
          if (prevIndex === 0) {
            return 1
          } else {
            const nextIndex = prevIndex + 1
            return nextIndex >= masterPlaylist.length ? 1 : nextIndex
          }
        })
      }
      audio.addEventListener('ended', handleSongEnd)
    }, 4000)
    return () => {
      clearTimeout(initialPlayTimer)
      if (audioRef.current) {
        audioRef.current.pause()
      }
    }
  }, [currentSongIndex])
  // }, [currentSongIndex, hasInteracted])

  // useEffect(() => {
  //   if (pageState === 'SCROLLING' && !audioRef.current) {
  //     const audio = new Audio(playlist[currentSongIndex])
  //     audioRef.current = audio
  //     const playNextSong = () => {
  //       setCurrentSongIndex((prevIndex) => (prevIndex + 1) % playlist.length)
  //     }
  //     audio.addEventListener('ended', playNextSong)
  //     audio.play()
  //     return () => {
  //       audio.removeEventListener('ended', playNextSong)
  //       audio.pause()
  //     }
  //   }
  // }, [pageState, currentSongIndex])
  // useEffect(() => {
  //   const audioTimeout = setTimeout(() => {
  //     try {
  //       const audio = new Audio('/sound/megamanx5.mp3')
  //       audio.volume = 0.5
  //       audio.play()
  //     } catch (error) {
  //       console.error('Failed to play finale sound:', error)
  //     }
  //   }, 4000)
  //   return () => clearTimeout(audioTimeout)
  // }, [])

  // Effect for the Escape Hatch
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        setIsExiting(true)
        // Optional: navigate away after fade-out
        // setTimeout(() => window.location.href = '/', 1000);
      }
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [])

  // // --- The Main State Machine (useEffect on pageState) ---
  // useEffect(() => {
  //   if (pageState === 'SCROLLING') {
  //     // Populate initial items
  //     setSingleLineItems(singleLineData)
  //     setMultiColumnItems(multiColumnData)
  //     // Interval for single lines
  //     const singleLineInterval = setInterval(() => {
  //       setSingleLineItems((prev) => [...prev, singleLineData[singleLineIndex.current]])
  //       singleLineIndex.current = (singleLineIndex.current + 1) % singleLineData.length
  //     }, 2000)
  //     // Interval for multi-columns
  //     const multiColumnInterval = setInterval(() => {
  //       setMultiColumnItems((prev) => [...prev, multiColumnData[multiColumnIndex.current]])
  //       multiColumnIndex.current = (multiColumnIndex.current + 1) % multiColumnData.length
  //     }, 8000)
  //     return () => {
  //       clearInterval(singleLineInterval)
  //       clearInterval(multiColumnInterval)
  //     }
  //   }
  // }, [pageState, singleLineData, multiColumnData])

  // --- STATE MACHINE & ANIMATION LOGIC ---
  useEffect(() => {
    // Act 1: Typing
    if (pageState === 'TYPING') {
      const typeText = (index = 0) => {
        if (index < finalMessage.length) {
          setTypedText(finalMessage.substring(0, index + 1))
          setTimeout(() => typeText(index + 1), 100)
        } else {
          setTimeout(() => setPageState('STATIC'), 500)
        }
      }
      const startTypingTimer = setTimeout(typeText, 1500)
      return () => clearTimeout(startTypingTimer)
    }
    // Act 2: Static
    if (pageState === 'STATIC') {
      const startScrollingTimer = setTimeout(() => setPageState('SCROLLING'), 15000)
      return () => clearTimeout(startScrollingTimer)
    }
    // // Act 3: Scrolling
    // if (pageState === 'SCROLLING') {
    //   // const initialShuffledData = shuffleArray(finaleStream.filter((item) => item.type !== 'multi-column'))
    //   // setSingleLineItems(initialShuffledData)
    //   setSingleLineItems(singleLineData)
    //   // const streamInterval = setInterval(() => {
    //   //   setSingleLineItems((prev) => [...prev, initialShuffledData[dataIndex.current]])
    //   //   dataIndex.current = (dataIndex.current + 1) % initialShuffledData.length
    //   // }, 2500)
    //   // return () => clearInterval(streamInterval)
    // }

    if (pageState === 'SCROLLING') {
      // This is the key: we populate the streams ONCE and let CSS handle the animation.
      // This prevents the stuttering/jank issue.
      // 1. Get the pre-shuffled and pre-filtered data from our useMemo hooks
      const initialSingleLines = singleLineData // Assuming singleLineData is from useMemo
      const initialMultiColumns = multiColumnData // Assuming multiColumnData is from useMemo
      // 2. Set the state for our two main, stutter-free streams
      setSingleLineItems(initialSingleLines)
      setMultiColumnItems(initialMultiColumns)
      // No new timers or intervals are needed here for the main streams.
      // The animation is now 100% handled by CSS for maximum smoothness.
      // The cleanup function for this state is empty because there are no new timers to clear.
      return () => {}
    }
  }, [pageState])

  // useEffect(() => {
  //   if (!isScrolling) return
  //   const streamInterval = setInterval(() => {
  //     // We now pull from the shuffled array instead of the original
  //     setStreamItems((prev) => [...prev, shuffledStream[dataIndex.current]])
  //     dataIndex.current = (dataIndex.current + 1) % shuffledStream.length
  //   }, 2500)
  //   return () => clearInterval(streamInterval)
  // }, [isScrolling, shuffledStream])

  // --- EFFECT 2: Music "Now Playing" Data ---
  useEffect(() => {
    // This effect runs when scrolling starts OR when the song changes
    if (pageState !== 'SCROLLING') return
    console.log('Updating Now Playing data...')
    const songName = masterPlaylist[currentSongIndex].split('/').pop().replace('.mp3', '')
    const uniqueId = `music-${currentSongIndex}-${Date.now()}`
    const musicItem = {
      id: uniqueId,
      type: 'live-data-audio',
      id: `music-${currentSongIndex}-${Date.now()}`, // Unique ID
      content: `[AUDIO_LOG] Now Playing: ${songName}`,
    }
    // Add the new song to its dedicated stream
    setMusicItems((prev) => [...prev, musicItem])
    setTimeout(() => {
      setMusicItems((prev) => prev.filter((item) => item.id !== uniqueId))
    }, 15000) // 5-second animation duration
  }, [pageState, currentSongIndex]) // Dependency: Cares about scrolling AND song changes

  // --- EFFECT 1: GitHub Live Data ---
  useEffect(() => {
    // This effect only runs when scrolling starts
    if (pageState !== 'SCROLLING') return
    const fetchGithubData = async () => {
      console.log('Fetching GitHub data...')
      try {
        const response = await fetch('https://api.github.com/repos/karwan5880/portfolio2')
        if (!response.ok) throw new Error('GitHub API response failed')
        const repoData = await response.json()
        if (!repoData.pushed_at) return
        const lastPush = new Date(repoData.pushed_at).toLocaleString()
        const uniqueId = `github-${Date.now()}`
        const githubItem = {
          id: uniqueId,
          type: 'live-data-github',
          id: `github-${Date.now()}`, // Add a unique ID for React's key prop
          content: `[LIVE] Last commit to this repository: ${lastPush}`,
        }
        setGithubItems((prev) => [...prev, githubItem])
        setTimeout(() => {
          setGithubItems((prev) => prev.filter((item) => item.id !== uniqueId))
        }, 15000) // This MUST match the CSS animation duration
      } catch (error) {
        console.error('GitHub fetch failed:', error)
      }
    }
    // fetchGithubData() // Fetch once immediately
    const interval = setInterval(fetchGithubData, 30000) // Then fetch every minute
    return () => clearInterval(interval)
  }, [pageState]) // Dependency: Only cares about when scrolling starts

  // useEffect(() => {
  //   // We still only want this to run when scrolling starts
  //   if (pageState !== 'SCROLLING') return
  //   const injectLiveData = () => {
  //     console.log('Injecting live data into stream...')
  //     // 1. Get the currently playing song
  //     const songName = masterPlaylist[currentSongIndex].split('/').pop().replace('.mp3', '')
  //     const audioItem = {
  //       type: 'live-data-audio', // A unique type for the song
  //       content: `[AUDIO_LOG] Now Playing: ${songName}`,
  //     }
  //     // 2. Fetch from GitHub
  //     fetch('https://api.github.com/repos/karwan5880/portfolio2')
  //       .then((response) => {
  //         if (!response.ok) throw new Error('GitHub API response not OK')
  //         return response.json()
  //       })
  //       .then((repoData) => {
  //         if (!repoData.pushed_at) return
  //         const lastPush = new Date(repoData.pushed_at).toLocaleString()
  //         const githubItem = {
  //           type: 'live-data-github', // A unique type for the commit
  //           content: `[LIVE_STATUS] Last commit to this repository: ${lastPush}`,
  //         }
  //         // Inject BOTH items into the main stream array
  //         // setStreamItems((prev) => [...prev, githubItem, audioItem])
  //         // setSingleLineItems((prev) => [...prev, githubItem, audioItem])
  //         setGithubItems((prev) => [...prev, githubItem])
  //       })
  //       .catch((error) => console.error('Failed to fetch or process live data:', error))
  //   }
  //   // Run it once immediately when scrolling starts
  //   injectLiveData()
  //   // Then set an interval to run it again periodically
  //   const liveDataInterval = setInterval(injectLiveData, 60000) // Update every 60 seconds
  //   return () => clearInterval(liveDataInterval)
  // }, [pageState, currentSongIndex]) // Re-run if the song changes to update the log

  // useEffect(() => {
  //   if (pageState !== 'SCROLLING') {
  //     console.log(`github call, !isScrolling yet. return. `)
  //     return
  //   }
  //   // This function will fetch data and inject it into the stream
  //   const fetchAndInjectData = async () => {
  //     console.log("FETCH TRIGGERED: pageState is 'SCROLLING'")
  //     try {
  //       console.log('fetching data: ')
  //       const response = await fetch('https://api.github.com/repos/karwan5880/portfolio2')
  //       if (!response.ok) {
  //         console.error('GitHub API response not OK:', response.status)
  //         return
  //       }
  //       const repoData = await response.json()
  //       if (!repoData.pushed_at) {
  //         console.error('!repoData.pushed_at:', response.status)
  //         return
  //       }
  //       const lastPush = new Date(repoData.pushed_at).toLocaleString()
  //       const liveDataItem = {
  //         type: 'live-data', // A new type for special styling
  //         content: `[LIVE] Last commit to this repository: ${lastPush}`,
  //       }
  //       console.log('Injecting live data:', liveDataItem)
  //       // // Inject the live data into the stream
  //       // setStreamItems((prev) => [...prev, liveDataItem])
  //       setLiveData(`[LIVE] Last commit to this repository: ${lastPush}`)
  //       const songName = masterPlaylist[currentSongIndex].split('/').pop().replace('.mp3', '')
  //       setLiveData((prev) => `${prev}\n[AUDIO] Now Playing: ${songName}`)
  //     } catch (error) {
  //       console.error('Failed to fetch GitHub data:', error)
  //     }
  //   }
  //   fetchAndInjectData()
  //   const fetchDataInterval = setInterval(fetchAndInjectData, 60000) // 60 seconds
  //   return () => clearInterval(fetchDataInterval)
  // }, [pageState, currentSongIndex])

  return (
    <div className={`${styles.finaleWrapper} ${isExiting ? styles.exiting : ''}`}>
      {activeTheme === 'snow' && <SnowEffect />}
      {activeTheme === 'thunder' && <ThunderEffect />}
      {activeTheme === 'lightning' && <LightningEffect />}
      <div className={styles.staticContainer}>
        <p className={`${styles.streamItem} ${styles.finalMessage}`}>
          {typedText}
          {/* THE FIX: This condition ensures it disappears ONLY when exiting */}
          {!isExiting && <span className={styles.blinkingCursor}></span>}
        </p>

        {/* <p className={`${styles.streamItem} ${styles.finalMessage}`}>
          {typedText} */}
        {/* {(pageState === 'TYPING' || pageState === 'STATIC') && <span className={styles.blinkingCursor}></span>} */}
        {/* <span
            className={`${styles.blinkingCursor} ${pageState === 'TYPING' || pageState === 'STATIC' ? styles.visible : ''}`}
          ></span>
        </p> */}

        <div className={`${styles.linksContainer} ${pageState !== 'TYPING' ? styles.visible : ''}`}>
          {initialLinks.map((item, index) => (
            <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
              {item.content}
            </a>
          ))}
        </div>
      </div>

      <div className={`${styles.scrollContainer} ${pageState === 'SCROLLING' ? styles.scrolling : ''}`}>
        <div className={styles.marquee}>
          {/* <div key={`m1-clone1-${animationDurations.marquee1}`} className={styles.streamContent} style={{ animationDuration: `${animationDurations.marquee1}s` }}> */}
          <div className={styles.streamContent} style={{ animationDuration: `${animationDurations.marquee1}s` }}>
            {multiColumnItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
          {/* <div
            // key={`m1-clone2-${animationDurations.marquee1}`}
            className={styles.streamContent}
            style={{ animationDuration: `${animationDurations.marquee1}s`, animationDelay: `-${animationDurations.marquee1 / 2}s` }}
            aria-hidden="true"
          >
            {multiColumnItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div> */}
        </div>
        <div className={styles.marquee}>
          {/* <div key={`m2-clone1-${animationDurations.marquee2}`} className={styles.streamContent} style={{ animationDuration: `${animationDurations.marquee2}s` }}> */}
          <div className={styles.streamContent} style={{ animationDuration: `${animationDurations.marquee2}s` }}>
            {singleLineItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
          {/* <div
            // key={`m2-clone2-${animationDurations.marquee2}`}
            className={styles.streamContent}
            style={{ animationDuration: `${animationDurations.marquee2}s`, animationDelay: `-${animationDurations.marquee2 / 2}s` }}
            aria-hidden="true"
          >
            {singleLineItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div> */}
        </div>

        {/* Marquee 3: GitHub Live Data Bursts */}
        <div className={styles.dataBurstContainer}>
          {githubItems.map((item) => (
            <StreamItem key={item.id} item={item} />
          ))}
        </div>
        {/* Marquee 4: Music Live Data Bursts */}
        <div className={styles.dataBurstContainer}>
          {musicItems.map((item) => (
            <StreamItem key={item.id} item={item} />
          ))}
        </div>
        {/* Marquee 3: GitHub Live Data (Fast) */}
        {/* <div className={`${styles.marquee} ${styles.marquee3}`}>
          <div className={styles.streamContent}>
            {githubItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {githubItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
        </div> */}
        {/* Marquee 4: Music Live Data (Fastest) */}
        {/* <div className={`${styles.marquee} ${styles.marquee4}`}>
          <div className={styles.streamContent}>
            {musicItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {musicItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
        </div> */}

        {/* <div className={styles.multiColumnMarquee}>
          <div className={styles.streamContent}>
            {multiColumnStream.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {multiColumnStream.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
        </div>
        <div className={styles.singleLineMarquee}>
          <div className={styles.streamContent}>
            {singleLineItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {singleLineItems.map((item, i) => (
              <StreamItem key={i} item={item} />
            ))}
          </div>
        </div> */}

        {/* v1 */}
        {/* <div className={`${styles.scrollContainer} ${pageState === 'SCROLLING' ? styles.scrolling : ''}`}>
        <div className={styles.multiColumnMarquee}>
          <div className={styles.streamContent}>
            {multiColumnStream.map((item, index) => (
              <StreamItem key={index} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {multiColumnStream.map((item, index) => (
              <StreamItem key={index} item={item} />
            ))}
          </div>
        </div>
        <div className={styles.singleLineMarquee}>
          <div className={styles.streamContent}>
            {singleLineStream.map((item, index) => (
              <StreamItem key={index} item={item} />
            ))}
          </div>
          <div className={styles.streamContent} aria-hidden="true">
            {singleLineStream.map((item, index) => (
              <StreamItem key={index} item={item} />
            ))}
          </div>
        </div>
      </div> */}
      </div>
      <DogEar href="/dev-history" position="bottom-left" aria-label="Return to dev-history" />
      <DogEar href="/" position="bottom-right" aria-label="View main page" />
    </div>
  )

  // return (
  //   <div className={`${styles.finaleWrapper} ${isExiting ? styles.exiting : ''}`}>
  //     <div className={`${styles.streamContainer} ${pageState === 'SCROLLING' ? styles.scrolling : ''}`}>
  //       {/* --- The Header Section (visible in all states, but only moves when scrolling) --- */}
  //       <div className={styles.staticHeader}>
  //         <p className={`${styles.streamItem} ${styles.finalMessage}`}>
  //           {typedText}
  //           {pageState === 'TYPING' && <span className={styles.blinkingCursor}></span>}
  //         </p>
  //         <div className={`${styles.linksContainer} ${pageState !== 'TYPING' ? styles.visible : ''}`}>
  //           {initialLinks.map((item, index) => (
  //             <a
  //               key={index}
  //               href={item.href}
  //               target="_blank"
  //               rel="noopener noreferrer"
  //               className={`${styles.streamItem} ${styles.link}`}
  //             >
  //               {item.content}
  //             </a>
  //           ))}
  //         </div>
  //       </div>
  //       {/* --- The Credit Scene (only rendered when scrolling starts) --- */}
  //       {pageState === 'SCROLLING' &&
  //         streamItems.map((item, index) => (
  //           <div key={index} className={`${styles.streamItem} ${styles[item.type]}`}>
  //             {item.type === 'multi-column' ? (
  //               <div className={styles.multiColumnContainer}>
  //                 {item.columns.map((col, i) => (
  //                   <div key={i} className={styles.codeColumn}>
  //                     <SyntaxHighlightedCode content={col} />
  //                   </div>
  //                 ))}
  //               </div>
  //             ) : (
  //               <span>{item.content}</span>
  //             )}
  //           </div>
  //         ))}
  //     </div>
  //     <DogEar href="/dev-history" position="bottom-left" aria-label="Return to dev-history" />
  //     <DogEar href="/" position="bottom-right" aria-label="View main page" />
  //   </div>
  // )

  // return (
  //   <div className={`${styles.finaleWrapper} ${isExiting ? styles.exiting : ''}`}>
  //     <div className={`${styles.staticContainer} ${isScrolling ? styles.hidden : ''}`}>
  //       {initialItems.map((item, index) => (
  //         <div key={index} className={`${styles.streamItem} ${styles[item.type]}`}>
  //           {item.type === 'link' ? (
  //             <a href={item.href} target="_blank" rel="noopener noreferrer">
  //               {item.content}
  //             </a>
  //           ) : (
  //             <span>{item.content}</span>
  //           )}
  //         </div>
  //       ))}
  //     </div>
  //     <div className={`${styles.streamContainer} ${isScrolling ? styles.scrolling : ''}`}>
  //       {initialItems.map((item, index) => (
  //         <div key={index} className={`${styles.streamItem} ${styles[item.type]}`}>
  //           {item.type === 'link' ? (
  //             <a href={item.href} target="_blank" rel="noopener noreferrer">
  //               {item.content}
  //             </a>
  //           ) : (
  //             <span>{item.content}</span>
  //           )}
  //         </div>
  //       ))}
  //       {streamItems.map((item, index) => (
  //         <div key={index + initialItems.length} className={`${styles.streamItem} ${styles[item.type]}`}>
  //           {item.type === 'multi-column' ? (
  //             <div className={styles.multiColumnContainer}>
  //               {item.columns.map((col, i) => (
  //                 <div key={i} className={styles.codeColumn}>
  //                   <SyntaxHighlightedCode content={col} />
  //                 </div>
  //               ))}
  //             </div>
  //           ) : (
  //             <span>{item.content}</span>
  //           )}
  //         </div>
  //       ))}
  //     </div>
  //     <div className={styles.escapeHatch}>[ PRESS ESC TO DISCONNECT ]</div>
  //   </div>
  // )
}

// <div className={styles.finaleWrapper}>
//   <div className={styles.content}>
//     <p className={styles.finalText}>
//       {text}
//       {/* Only show the cursor while typing */}
//       {!showLinks && <span className={styles.blinkingCursor}></span>}
//     </p>
//     {showLinks && (
//       <div className={styles.linksContainer}>
//         <a
//           href="https://github.com/karwan5880/portfolio2"
//           target="_blank"
//           rel="noopener noreferrer"
//           className={styles.link}
//         >
//           [View Source on GitHub]
//         </a>
//         <a
//           href="https://www.linkedin.com/in/karwanleong"
//           target="_blank"
//           rel="noopener noreferrer"
//           className={styles.link}
//         >
//           [Connect on LinkedIn]
//         </a>
//       </div>
//     )}
//     {/* <DogEar direction="previous" aria-label="Go to previous page" /> */}
//     {/* <DogEar href="/dossier/applications" position="bottom-left" aria-label="Return to application logs" /> */}
//     <DogEar href="/dev-history" position="bottom-left" aria-label="Return to dev-history" />
//     <DogEar href="/" position="bottom-right" aria-label="View main page" />
//   </div>
// </div>
