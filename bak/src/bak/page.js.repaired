'use client'

import Link from 'next/link'
import { useEffect, useMemo, useRef, useState } from 'react'

import { DogEar } from '@/components/DogEar'
import { LightningEffect } from '@/components/LightningEffect'
import { SnowEffect } from '@/components/SnowEffect'
import { ThunderEffect } from '@/components/ThunderEffect'

import styles from './finale.module.css'
import { finaleStream } from '@/data/finale-stream-data'
import { useGatekeeper } from '@/hooks/useGatekeeper'
import { masterPlaylist } from '@/stores/audioStore'
import { useAudioStore } from '@/stores/audioStore'

const createHighlightedHTML = (content) => {
  const html = content
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/(const|let|class|return|def|function|async|await|if|else|public|static|void|FROM|WORKDIR|COPY|RUN|CMD|SELECT|JOIN|FROM|WHERE|template|typename|include|using|namespace|std|fn)/g, '<span class="keyword">$1</span>')
    .replace(/("[^"]*"|'[^']*'|`[^`]*`)/g, '<span class="string">$1</span>')
    .replace(/(\/\/.*|\#.*|\/\*[\s\S]*?\*\/|;.*)/g, '<span class="comment">$1</span>')
  return { __html: html }
}

const SyntaxHighlightedCode = ({ content }) => {
  const html = content
    .replace(/</g, '<')
    .replace(/>/g, '>')
    .replace(/(const|let|class|return|def|fn|public|static|void)/g, '<span class="keyword">$1</span>')
    .replace(/("[^"]*")/g, '<span class="string">$1</span>')
    .replace(/(\/\/.*|\#.*|\/\*.*\*\/)/g, '<span class="comment">$1</span>')
  return <pre dangerouslySetInnerHTML={{ __html: html }} />
}

const SingleLineStream = ({ items, animationClass }) => (
  <div className={`${styles.singleLineStream} ${styles[animationClass]}`}>
    {items.map((item, index) => (
      <div key={index} className={`${styles.streamItem} ${styles[item.type]}`}>
        <span>{item.content}</span>
      </div>
    ))}
  </div>
)

const CodeWall = ({ left, middle, right }) => (
  <div className={styles.codeWall}>
    <div className={`${styles.codeColumn} ${styles.slow}`}>
      {left.map((snip, i) => (
        <div key={i} className={styles.codeBlock}>
          <div className={styles.codeTitle}>{snip.title}</div>
          <SyntaxHighlightedCode content={snip.code} />
        </div>
      ))}
    </div>
    <div className={`${styles.codeColumn} ${styles.fast}`}>
      {middle.map((snip, i) => (
        <div key={i} className={styles.codeBlock}>
          <div className={styles.codeTitle}>{snip.title}</div>
          <SyntaxHighlightedCode content={snip.code} />
        </div>
      ))}
    </div>
    <div className={`${styles.codeColumn} ${styles.medium}`}>
      {right.map((snip, i) => (
        <div key={i} className={styles.codeBlock}>
          <div className={styles.codeTitle}>{snip.title}</div>
          <SyntaxHighlightedCode content={snip.code} />
        </div>
      ))}
    </div>
  </div>
)

const CodeBlock = ({ item }) => (
  <div className={styles.codeColumn}>
    <div className={styles.codeTitle}>{item.title}</div>
    <pre dangerouslySetInnerHTML={createHighlightedHTML(item.code)} />
  </div>
)

const StreamItem = ({ item }) => {
  const handleSecretClick = () => {
    console.log('SECRET FOUND!')
    window.location.href = '/secret-room'
  }

  if (item.type === 'multi-column') {
    return (
      <div className={styles.multiColumnContainer}>
        {item.columns.map((col, i) => (
          <div key={i} className={styles.codeColumn}>
            <div className={styles.codeTitle}>{col.title}</div>
            <pre dangerouslySetInnerHTML={createHighlightedHTML(col.code)} />
          </div>
        ))}
      </div>
    )
  }

  if (item.type.startsWith('live-data')) {
    return (
      <div className={`${styles.streamItem} ${styles[item.type]}`}>
        <span>{item.content}</span>
      </div>
    )
  }

  return (
    <div className={`${styles.streamItem} ${styles[item.type]} ${item.secret ? styles.secret : ''}`} onClick={item.secret ? handleSecretClick : null}>
      <span>{item.content}</span>
    </div>
  )
}
// const shuffleArray = (array) => {
//   for (let i = array.length - 1; i > 0; i--) {
//     const j = Math.floor(Math.random() * (i + 1));
//     [array[i], array[j]] = [array[j], array[i]];
//   }
//   return array
// }
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[array[i], array[j]] = [array[j], array[i]]
  }
  return array
}

const finalMessage = '> Status: Still building.'
const initialLinks = [
  { type: 'link', content: '[ GitHub ]', href: 'https://github.com/karwan5880/portfolio2' },
  { type: 'link', content: '[ LinkedIn ]', href: 'https://www.linkedin.com/in/karwanleong' },
]

export default function FinalePage() {
  useGatekeeper('/finale') // Checks if level 5 is unlocked, then sets max level to 6
  const [pageState, setPageState] = useState('TYPING')
  const [typedText, setTypedText] = useState('')
  const [isExiting, setIsExiting] = useState(false)
  const isAudioPlaying = useAudioStore((state) => state.isPlaying)
  // const { startPlayback, playNextTrack, currentSongIndex, isPlaying, activeTheme } = useAudioStore()
  const { startPlayback, playNextTrack, activeTheme, isPlaying, isArmed, armAudio, currentSongIndex, playlistEnded } = useAudioStore()
  const audioRef = useRef(null)
  const [githubItems, setGithubItems] = useState([])
  const [musicItems, setMusicItems] = useState([])
  const [githubBurst, setGithubBurst] = useState(null)
  const [musicBurst, setMusicBurst] = useState(null)
  const [singleLineItems, setSingleLineItems] = useState([])
  const [multiColumnItems, setMultiColumnItems] = useState([])
  // const singleLineData = useMemo(() => {
  //   const stream = finaleStream[activeTheme] || finaleStream['default_theme']
  //   return shuffleArray(stream.filter((item) => item.type !== 'multi-column'))
  // }, [activeTheme])
  const [leftColumnItems, setLeftColumnItems] = useState([])
  const [middleColumnItems, setMiddleColumnItems] = useState([])
  const [rightColumnItems, setRightColumnItems] = useState([])
  const [glitchItems, setGlitchItems] = useState([])
  // The data processing logic, re-running when the theme changes
  const { singleLineData, leftColumnData, middleColumnData, rightColumnData, glitchData } = useMemo(() => {
    const stream = finaleStream[activeTheme] || []
    const singleLines = shuffleArray(stream.filter((item) => item.type !== 'multi-column'))
    const multiCol = stream.filter((item) => item.type === 'multi-column')
    const allCode = multiCol.flatMap((b) => b.columns)
    const left = [],
      middle = [],
      right = [],
      glitches = []
    allCode.forEach((snip, i) => {
      const lane = i % 4
      if (lane === 0) left.push(snip)
      else if (lane === 1) middle.push(snip)
      else if (lane === 2) right.push(snip)
      else glitches.push(snip)
    })
    return {
      singleLineData: [...singleLines, ...singleLines],
      leftColumnData: [...left, ...left],
      middleColumnData: [...middle, ...middle],
      rightColumnData: [...right, ...right],
      glitchData: [...glitches, ...glitches],
    }
  }, [activeTheme])
  // const { leftColumnData, middleColumnData, rightColumnData, glitchData } = useMemo(() => {
  //   const stream = finaleStream[activeTheme] || finaleStream['default_theme']
  //   const multiColumnBlocks = shuffleArray(stream.filter((item) => item.type === 'multi-column'))
  //   const allCodeSnippets = multiColumnBlocks.flatMap((block) => block.columns)
  //   const left = []
  //   const middle = []
  //   const right = []
  //   const glitches = []
  //   allCodeSnippets.forEach((snippet, index) => {
  //     const lane = index % 4
  //     if (lane === 0) {
  //       left.push(snippet)
  //     } else if (lane === 1) {
  //       middle.push(snippet)
  //     } else if (lane === 2) {
  //       right.push(snippet)
  //     } else {
  //       // lane === 3
  //       glitches.push(snippet)
  //     }
  //   })
  //   return {
  //     leftColumnData: left,
  //     middleColumnData: middle,
  //     rightColumnData: right,
  //     glitchData: shuffleArray(glitches),
  //   }
  // }, [])
  const glitchIndex = useRef(0)
  const [streamItems, setStreamItems] = useState([])
  const [currentGlitch, setCurrentGlitch] = useState(null)
  const [isTransitioning, setIsTransitioning] = useState(false)

  // This effect handles the smooth transition between themes
  useEffect(() => {
    setIsTransitioning(true)
    const timer = setTimeout(() => setIsTransitioning(false), 1000) // 1s fade-in time
    return () => clearTimeout(timer)
  }, [activeTheme])

  // This effect starts the music when the component mounts
  useEffect(() => {
    // After a 4-second delay, try to start the music.
    const timer = setTimeout(() => {
      startPlayback()
    }, 4000)
    return () => clearTimeout(timer)
  }, [startPlayback])

  useEffect(() => {
    const timer = setTimeout(() => startPlayback(), 4000)
    return () => clearTimeout(timer)
  }, [startPlayback])
  useEffect(() => {
    if (currentSongIndex > 0) playNextTrack()
  }, [currentSongIndex, playNextTrack])

  // useeffect for escape listener, unused.
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        setIsExiting(true)
      }
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [])

  // useeffect for the three pagestate
  useEffect(() => {
    // if (!isArmed) {
    //   // First-time setup: wait for user interaction to arm audio
    //   const handleFirstInteraction = () => {
    //     armAudio()
    //     window.removeEventListener('click', handleFirstInteraction)
    //   }
    //   window.addEventListener('click', handleFirstInteraction)
    //   return () => window.removeEventListener('click', handleFirstInteraction)
    // }
    if (pageState === 'TYPING') {
      const typeText = (index = 0) => {
        if (index < finalMessage.length) {
          setTypedText(finalMessage.substring(0, index + 1))
          setTimeout(() => typeText(index + 1), 100)
        } else {
          setTimeout(() => setPageState('STATIC'), 500)
        }
      }
      const startTypingTimer = setTimeout(typeText, 1500)
      return () => clearTimeout(startTypingTimer)
    }
    if (pageState === 'STATIC') {
      const startScrollingTimer = setTimeout(() => setPageState('SCROLLING'), 15000)
      return () => clearTimeout(startScrollingTimer)
    }

    if (pageState === 'SCROLLING') {
      if (!isPlaying && !playlistEnded) {
        // If not playing, and there are songs left, start the playback
        startPlayback()
      } else if (!isPlaying && playlistEnded) {
        // Playlist is over, begin the final fade
        setIsExiting(true)
      }
    }
    // if (pageState === 'SCROLLING') {
    //   console.log('State changed to SCROLLING. Populating streams and starting glitch loop.')
    //   // const initialSingleLines = singleLineData
    //   // const initialMultiColumns = multiColumnData
    //   // setSingleLineItems(initialSingleLines)
    //   // setMultiColumnItems(initialMultiColumns)
    //   setSingleLineItems(singleLineData)
    //   // setMultiColumnItems(multiColumnData)
    //   setLeftColumnItems(leftColumnData)
    //   setMiddleColumnItems(middleColumnData)
    //   setRightColumnItems(rightColumnData)
    //   // --- Glitch Fragment Logic ---
    //   let glitchTimerId
    //   const glitchLoop = () => {
    //     const item = glitchData[glitchIndex.current]
    //     if (!item) return // Safety check in case the glitch data array is empty
    //     const uniqueItem = { ...item, id: Date.now() } // Give it a unique ID
    //     setGlitchItems((prev) => [...prev, uniqueItem])
    //     glitchIndex.current = (glitchIndex.current + 1) % glitchData.length
    //     // Remove the item after its animation is done
    //     setTimeout(() => {
    //       setGlitchItems((prev) => prev.filter((i) => i.id !== uniqueItem.id))
    //     }, 4000) // 4s animation
    //     // Set a timer for the next glitch
    //     const randomDelay = Math.random() * 3000 + 1000 // 1s to 4s
    //     glitchTimerId = setTimeout(glitchLoop, randomDelay)
    //   }
    //   glitchLoop()
    //   // The cleanup function for this state
    //   return () => {
    //     // When the component unmounts or the state changes, clear any pending timer
    //     // This prevents memory leaks and errors.
    //     clearTimeout(glitchTimerId)
    //   }
    // }
  }, [pageState, isArmed, isPlaying, playlistEnded, armAudio, startPlayback])
  // }, [pageState])

  // This effect ONLY starts when the scrolling starts.
  useEffect(() => {
    if (pageState === 'SCROLLING' && glitchData.length > 0) {
      const glitchInterval = setInterval(() => {
        const nextSnippet = glitchData[glitchIndex.current]
        setCurrentGlitch({
          ...nextSnippet,
          top: `${Math.random() * 80 + 10}%`,
          left: `${Math.random() * 80 + 10}%`,
        })
        glitchIndex.current = (glitchIndex.current + 1) % glitchData.length
      }, 3000)
      return () => clearInterval(glitchInterval)
    }
  }, [pageState, glitchData])

  // --- EFFECT: GitHub Live Data Burst ---
  useEffect(() => {
    if (pageState !== 'SCROLLING') return
    const fetchAndAnimateGithubData = async () => {
      try {
        const response = await fetch('https://api.github.com/repos/karwan5880/portfolio2')
        if (!response.ok) throw new Error('GitHub API response failed')
        const repoData = await response.json()
        if (!repoData.pushed_at) return
        const lastPush = new Date(repoData.pushed_at).toLocaleString()
        const uniqueId = `github-${Date.now()}`
        const githubItem = {
          id: uniqueId,
          type: 'live-data-github',
          id: `github-${Date.now()}`,
          content: `[LIVE] Last commit to this repository: ${lastPush}`,
        }
        // Set the state to this ONE item
        setGithubBurst(githubItem)
        // After 5s, set it back to null to remove it from the DOM
        setTimeout(() => setGithubBurst(null), 5000)
      } catch (error) {
        console.error(error)
      }
    }
    const interval = setInterval(fetchAndAnimateGithubData, 60000)
    fetchAndAnimateGithubData()
    return () => clearInterval(interval)
  }, [pageState])

  // --- EFFECT: Music "Now Playing" Data Burst ---
  useEffect(() => {
    if (pageState !== 'SCROLLING') return
    // const songName = masterPlaylist[currentSongIndex].split('/').pop().replace('.mp3', '')
    const songName = masterPlaylist[currentSongIndex]['path'].split('/').pop()
    const uniqueId = `music-${currentSongIndex}-${Date.now()}`
    const musicItem = { id: uniqueId, type: 'live-data-audio', content: `[AUDIO] Now Playing: ${songName}` }
    // Set the state to this ONE item
    setMusicBurst(musicItem)
    // After 5s, set it back to null
    setTimeout(() => setMusicBurst(null), 5000)
  }, [pageState, currentSongIndex]) // This correctly runs every time the song changes

  // A new sub-component for our scrolling columns
  const CodeColumn = ({ data, animationClass }) => {
    return (
      <div className={`${styles.codeColumn} ${styles[animationClass]}`}>
        {data.map((snippet, index) => (
          <div key={index} className={styles.codeBlock}>
            <div className={styles.codeTitle}>{snippet.title}</div>
            <SyntaxHighlightedCode content={snippet.code} />
          </div>
        ))}
      </div>
    )
  }

  // A new sub-component for the flickering glitch
  const GlitchSnippet = ({ snippet }) => {
    if (!snippet) return null
    return (
      <div className={styles.glitchItem} style={{ top: snippet.top, left: snippet.left }}>
        <div className={styles.codeBlock}>
          <div className={styles.codeTitle}>{snippet.title}</div>
          <SyntaxHighlightedCode content={snippet.code} />
        </div>
      </div>
    )
  }

  return (
    <div className={`${styles.finaleWrapper} ${isExiting ? styles.exiting : ''}`}>
      {activeTheme === 'snow' && <SnowEffect />}
      {activeTheme === 'thunder' && <ThunderEffect />}
      {activeTheme === 'lightning' && <LightningEffect />}

      <div className={`${styles.staticContainer} ${pageState === 'SCROLLING' ? styles.hidden : ''}`}>
        <p className={`${styles.streamItem} ${styles.finalMessage}`}>
          {typedText}
          {!isExiting && <span className={styles.blinkingCursor}></span>}
        </p>
        <div className={`${styles.linksContainer} ${pageState !== 'TYPING' ? styles.visible : ''}`}>
          {initialLinks.map((item, index) => (
            <a key={index} href={item.href} target="_blank" rel="noopener noreferrer" className={styles.link}>
              {item.content}
            </a>
          ))}
        </div>
      </div>

      <div className={`${styles.scrollContainer} ${pageState === 'SCROLLING' ? styles.visible : ''} ${isTransitioning ? styles.fadingOut : ''}`}>
        <SingleLineStream items={singleLineData} animationClass="x-fast" />
        <CodeWall left={leftColumnData} middle={middleColumnData} right={rightColumnData} />
      </div>
      {/* <div className={styles.streamGrid}>
        <CodeColumn data={leftColumnData} animationClass="slow" />
        <CodeColumn data={middleColumnData} animationClass="fast" />
        <CodeColumn data={rightColumnData} animationClass="medium" />
      </div>
      <div className={styles.glitchOverlay}>
        <GlitchSnippet snippet={currentGlitch} />
      </div> */}

      <div className={`${styles.scrollContainer} ${pageState === 'SCROLLING' ? styles.scrolling : ''}`}>
        <div className={styles.dataBurstContainer}>{githubBurst && <StreamItem key={githubBurst.id} item={githubBurst} />}</div>
        <div className={styles.dataBurstContainer}>{musicBurst && <StreamItem key={musicBurst.id} item={musicBurst} />}</div>
      </div>
      <DogEar href="/dev-history" position="bottom-left" aria-label="Return to dev-history" />
      <DogEar href="/" position="bottom-right" aria-label="View main page" />
    </div>
  )
}
